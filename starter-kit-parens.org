 -*- coding: utf-8 -*-
# -*- find-file-hook: org-babel-execute-buffer -*-

#+TITLE: Parens costumization
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args :tangle yes

Adding this line to test magit.


* Electric pair mode
From http://ergoemacs.org/emacs/emacs_insert_brackets_by_pair.html

Emacs 24 has a new minor mode electric-pair-mode. When on, typing any left bracket automatically insert the right matching bracket. You can have it on always. Put this in your emacs init:

#+BEGIN_SRC emacs-lisp :tangle yes
;; auto close bracket insertion. New in emacs 24
(electric-pair-mode 1)
#+END_SRC

Brackets includes ASCII and Unicode brackets or quotation marks. Deleting one bracket doesn't delete the other. Exactly which brackets are auto-closed depends on the current major mode's syntax table. If you always want certain brackets be inserted in pairs, you can customize the variable electric-pair-pairs. Its value should be a Association List. For example, the curly bracket ={}= isn't auto-closed when in emacs-lisp-mode. You can make it do so, like this:


#+BEGIN_SRC emacs-lisp :tangle yes
;; make electric-pair-mode work on more brackets
(setq electric-pair-pairs
      '(
        (?\" . ?\")
        (?\{ . ?\})
        (?\[ . ?\])
        (?\` . ?\')))
#+END_SRC

#+RESULTS:
: ((34 . 34) (123 . 125) (91 . 93) (60 . 62) (39 . 39) (96 . 39))

NB: 
#+BEGIN_EXAMPLE
(?\< . ?\>)
(?\' . ?\')
#+END_EXAMPLE

are not included because I don't want double =''= in Lisp, and neither do I want =<>= in R...

** Electric Pair for Org-Mode
And now on to Org mode: 

From: https://ipfs-sec.stackexchange.cloudflare-ipfs.com/emacs/A/question/2538.html 
and https://tgro.neocities.org/init.html

I dunno why some pairs work (//, ==) and some don't (~, *, _, ()) ...

#+begin_src emacs-lisp :tangle yes :results silent 
(defvar org-electric-pairs '(
                             (?/ . ?/) 
                             (?= . ?=) 
                             (?~ . ?~)
                             (?$ . ?$)
                             (?[ . ?])
                             (?( . ?))
                             (?\" . ?\")
                             (?\` . ?\')
                             (?\< . ?\>)
                             (?\( . ?\))
                             ) 
  "Electric pairs for Org-mode.")

(defun org-add-electric-pairs ()
  (setq-local electric-pair-pairs (append electric-pair-pairs org-electric-pairs))
  (setq-local electric-pair-text-pairs electric-pair-pairs))

(add-hook 'org-mode-hook 'org-add-electric-pairs)
#+end_src

These pairs

#+BEGIN_EXAMPLE
                             ;; (?* . ?*) 
                             ;; (?_ . ?_) 
#+END_EXAMPLE

not included as they were obstrusive.

#+begin_src emacs-lisp :tangle no
(add-hook 'LaTeX-mode-hook
      (lambda ()
        (setq LaTeX-electric-left-right-brace t)
        (local-set-key "(" 'LaTeX-insert-left-brace)))
#+end_src

#+RESULTS:
| (lambda nil (setq LaTeX-electric-left-right-brace t) (local-set-key ( 'LaTeX-insert-left-brace)) | er/add-latex-mode-expansions | preview-mode-setup | (lambda nil (highlight-symbol-mode)) | (lambda nil (set (make-local-variable 'TeX-electric-math) (cons \left( \right)))) | (lambda nil (define-key LaTeX-mode-map (kbd $) 'self-insert-command) (define-key LaTeX-mode-map (kbd [) 'self-insert-command)) | TeX-PDF-mode | turn-on-reftex |

** COMMENT Electric Pair for ESS mode

Funciona pero es muy obstrusivo. Mejor usar a snippet.

#+begin_src emacs-lisp :tangle no
  (defvar ess-electric-pairs '(
                               (?< . ?>)
                               ) "Electric pairs for ess-mode.")

  (defun ess-add-electric-pairs ()
    (setq-local electric-pair-pairs (append electric-pair-pairs ess-electric-pairs))
    (setq-local electric-pair-text-pairs electric-pair-pairs))

  (add-hook 'ess-mode-hook 'ess-add-electric-pairs)
#+end_src

#+RESULTS:
| ess-add-electric-pairs | (lambda nil (define-key ess-mode-map < 'electric-pair)) | (lambda nil (local-set-key [(shift return)] 'my-ess-eval)) | run-starter-kit-coding-hook |

* Alternative: autopair
- https://github.com/joaotavora/autopair


* =paredit=: technomancy's and JohnW's way

From: http://emacslife.com/emacs-chats/chat-phil-hagelberg.html

Original quote by Technomancy: "If you think paredit is not for you then you need to become the kind of person that paredit is for."

Sacha: "If you are not the kind of person who can deal with paredit or smartparens, you become that kind of person." 

Phil: It's not for everyone, just for the kind of person you should aspire to be. laughs 

Sacha: What is it like for you? How do you wrap your brain around not just the slurping and barfing, but all the other things you can do with it? 

Phil: The main thing people get tripped up on, I think, is that paredit will refuse to do certain things when it can tell that those operations will result in broken pairing. 

Sacha: The number of times I've hit C-q )! 

Phil: Right, yeah. It's trying to set you on the right path, so it does that by just making sure that all the operations it does are protected. Every time you insert a paren, you have to insert a matching one. Every time you kill, you can only kill up to the end. Otherwise that would leave your code in an invalid state. As long as you limit yourself to the commands it knows about, it provides this guarantee. =C-w= (=kill-region=) is not one of those commands, so you have to train yourself to avoid that. When you use =kill-region=, you're
saying, "No, paredit, I know better than you," which is usually not the case. But once you've internalised that, you end up working on a higher level where you're not thinking in terms of characters any more, but in terms of expressions. You're saying, "I want to kill this whole string or this whole form", not, "I want to kill from this point up to this point".
It's higher level commands, I would say. Especially people who are new to Lisp, they think this is so intimidating, seeing all these parentheses everywhere. If you have paredit on, it's... it does take some adaptation, but it's no additional mental overhead for you. You're changing the structure directly. 

Sacha: Okay, so basically, just keep at it, and keep your fingers off of =C-w=, and eventually you'll get the hang of it. 

Phil: One thing you can do is unbind =C-w= temporarily, or change it to another binding. Actually, one thing I did when I started using my (inaudible) keyboard–this is my travel board that I designed. You can see it has 42 keys. I had to move =tab= way off into the corner. It's not very convenient. Most programs that are Unix-y, anything running in a terminal will interpret =C-i= as a =tab=, because inside a terminal, they are literally the same. Pressing =TAB= sends a =C-i= (inaudible), but Emacs does the translation, even when it's in a GUI. I was able to teach my web browser to do the same. That was great when I was on here. But it was so tempting… I kept wanting to push this key here that doesn't actually exist. So what I ended up doing was taking my regular keyboard that I use when I'm in the office, and plucking out that key, so there's no more key cap there any more. You learn really quick then. 

Sacha: That's really hardcore. I remember the time I bound my left control to ring a bell, because I was trying to get used to the Caps as control thing. Negative reinforcement or just making things less functional to force yourself into new ways. I'm a little curious, because you mentioned 42 keys… You'd imagine, with Emacs, you'd want to add more keys instead of reducing the number of keys. How does it work with key chords and stuff? 

Phil: Well, a big part of it is that you can see, as with the two here, it just puts way more on your thumbs. These are Control and Alt. These are way more accessible. That's Shift.So that doesn't make more room available, but it does make it nicer on your hands. But then also most of the punctuation is on the Fn layer, so you have to hold down Fn and hit the punctuation. For a lot of the punctuation, you need shift for it anyway. For example, with parentheses, you are pressing Shift then moving way up to the top Right. On this keyboard, the parenteses are on the home row, so it's actually less reaching overall anyway. 

Settings actually copied from https://github.com/bbatsov/emacs.d

- Need to read: https://stackoverflow.com/q/5242380
- Summary:
   + =C-u= and =C-q= will allow you to escape the next keystroke. 

Give paredit mode a chance. I, too, was really annoyed with it automatically closing my parens, and refusing to delete just a single
paren for me.

But doing this enables it to be certain at all times that the buffer is a well-balanced =sexp=, so it can perform many useful sexp-oriented tasks for you instead of just text-oriented tasks. For example, I use the following all the time:

 =M-(= to wrap a =sexp= with a new one, e.g., turn (map f some-list) into (doto (map f some-list) println)
 =C-)= to "slurp" another sexp into the current one, eg turn (let [x 10]) (println x) into (let [x 10] (println x))
 =M-<UP>= and/or =M-r= to pull the sexp at point a level "higher" in the source tree, destroying the thing that was wrapping it, eg to turn (first (map f some-list)) into (map f some-list) or (first some-list)

There are zillions of useful features like this, that let you start editing code instead of text. And while there are plenty of excellent Lisp hackers who don't like paredit mode, I advise you not to decide against it before you realize the awesome stuff it can do for you.

- I absolutely agree. I hated paredit at first, but I soon missed it enough in every other language mode that I bound some of paredit's functions in those modes too. For example, =M-(= for =paredit-wrap-round=, which encloses the following expressing in parens. Most programming language modes have a concept of sexps for that language's expressions and tokens, so the paredit functions often just Do The Right Thing. 

** Emacs Rocks's Tutorial 
- Paredit is about treating the code not as text to be inserted and erased, but as a tree to be manipulated.
- =M-(= for =wrap-round= or start a =(= and enclose in it the following expression.
- =C-<right> for =forward-slurp-sexp=: include next expresion inside brackets.
   + =C-)= for =paredit-forward-slurp-sexp=
- =C-{= for =paredit-backward-barf-sexp=: Remove the first S-expression in the current list from that list by moving the closing delimiter.
- =C-<left> for =forward-barf-sexp=
   + =C-}= for =paredit-forward-barf-sexp=
- =M-r= for =raise-sexp= or te quedas con uno de los dos predicados en una expression. Replaces the entire paren with the child.
- =M-<up>= for =splice-sexp-killing-backward= or kill all that comes earlier in the expression.
- =M-?= for =convolute-sexp= for when you have two nested expressions. This will make the inner expression the outer one and vice versa. This is called "convoluting" an expression, though I still need to understand it better.
- =C-k= for =paredit-kill=
- =M-S= for =paredit-split-sexp= to split an sexp by, for example, inserting a pair of =""= and then a pair of =()=.
- =M-J= for =join-sexps= 

His examples are:

#+BEGIN_EXAMPLE
(defun mi-command ()
  (interactive)
  (save-excursion
   (do-some-things))
  (do-more-things)
  (conclude-doing,things))

(defun my-other-command ()
  (when (and (this-predicate)
             (that-predicate))
    (do-something)
    (do-some-more)
    (do-a-third-thing)))

(defun another-command ()
  (when (and (some-predicate)
             (some-other-predicate))
    (let ((v (calculate-v))
          (x (calculate-x)))
      (do-that-thing)
      (do-something-more)
      (do-even-more))))

(defun some-command ()
  (do-stuff "this here ") (" is a string" 123)
  (do-stuff (more-stuff "something"
                        "and more")))

(ns adventur-engine.execute-room
    (:use adventur-engine.utils)
    (:require [adventur-core-ast-traverser :as ast])
    (:require [adventur-core-ast-traverser :as ast])
    (:require [adventur-core-ast-traverser :as ast])
    (:require [adventurcore-ast-traverser :as ast])
    (:require [adventur-core-ast-traverser :as ast]))
#+END_EXAMPLE


** Costumization 
DGM: I took this out
    
=(add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode)=
=(add-hook 'lisp-interaction-mode-hook #'paredit-mode)=

Probably it is what makes =C-{= not work as a keybinding. 

Note: 

#+BEGIN_EXAMPLE
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    ;; enable in the *scratch* buffer
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
    (add-hook 'prog-mode-hook             #'enable-paredit-mode)
    (add-hook 'org-mode-hook              #'enable-paredit-mode)
    (add-hook 'latex-mode-hook            #'enable-paredit-mode)
    (add-hook 'TeX-mode-hook              #'enable-paredit-mode)
    (add-hook 'ado-mode-hook              #'enable-paredit-mode)
    (add-hook 'ess-mode-hook              #'enable-paredit-mode)
    (add-hook 'inferior-ess-mode-hook     #'enable-paredit-mode)
    (add-hook 'ess-stata-mode-hook        #'enable-paredit-mode)
    (add-hook 'ledger-mode-hook           #'enable-paredit-mode) 

    (add-hook 'org-mode-hook              'paredit-mode)
    (add-hook 'latex-mode-hook            'paredit-mode)
    (add-hook 'TeX-mode-hook              'paredit-mode)
    (add-hook 'ado-mode-hook              'paredit-mode)


#+END_EXAMPLE

Doesn't work.  
   
#+begin_src emacs-lisp :tangle yes
  (use-package paredit
    :init
    (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    ;;    (add-hook 'prog-mode-hook             'paredit-mode)
    (add-hook 'emacs-lisp-mode-hook       'paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook 'paredit-mode)
    (add-hook 'lisp-interaction-mode-hook 'paredit-mode)
    (add-hook 'ielm-mode-hook             'paredit-mode)
    (add-hook 'lisp-mode-hook             'paredit-mode)
    (add-hook 'scheme-mode-hook           'paredit-mode)
    (add-hook 'ledger-mode-hook           'paredit-mode)

    (defun paredit-barf-all-the-way-backward ()
      (interactive)
      (paredit-split-sexp)
      (paredit-backward-down)
      (paredit-splice-sexp))

    (defun paredit-barf-all-the-way-forward ()
      (interactive)
      (paredit-split-sexp)
      (paredit-forward-down)
      (paredit-splice-sexp)
      (if (eolp) (delete-horizontal-space)))

    (defun paredit-slurp-all-the-way-backward ()
      (interactive)
      (catch 'done
        (while (not (bobp))
          (save-excursion
            (paredit-backward-up)
            (if (eq (char-before) ?\()
                (throw 'done t)))
          (paredit-backward-slurp-sexp))))

    (defun paredit-slurp-all-the-way-forward ()
      (interactive)
      (catch 'done
        (while (not (eobp))
          (save-excursion
            (paredit-forward-up)
            (if (eq (char-after) ?\))
                (throw 'done t)))
          (paredit-forward-slurp-sexp))))
    :config
      (nconc paredit-commands
           '("Extreme Barfage & Slurpage"
             (("C-M-)")
              paredit-slurp-all-the-way-forward
              ("(foo (bar |baz) quux zot)"
               "(foo (bar |baz quux zot))")
              ("(a b ((c| d)) e f)"
               "(a b ((c| d)) e f)"))
             (("C-M-}" "M-F")
              paredit-barf-all-the-way-forward
              ("(foo (bar |baz quux) zot)"
               "(foo (bar|) baz quux zot)"))
             (("C-M-(")
              paredit-slurp-all-the-way-backward
              ("(foo bar (baz| quux) zot)"
               "((foo bar baz| quux) zot)")
              ("(a b ((c| d)) e f)"
               "(a b ((c| d)) e f)"))
             (("C-M-{" "M-B")
              paredit-barf-all-the-way-backward
              ("(foo (bar baz |quux) zot)"
               "(foo bar baz (|quux) zot)"))))

    (paredit-define-keys)

    (paredit-annotate-mode-with-examples)

    (paredit-annotate-functions-with-examples)    
    )
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24485 50596 522689 640000) :init (24485 50596 522675 289000) :config (24485 50596 522518 238000) :config-secs (0 0 1056 169000) :init-secs (0 0 1353 672000) :use-package-secs (0 0 1428 853000)))

;;    (add-hook 'ess-mode-hook              'paredit-mode)
;;    (add-hook 'inferior-ess-mode-hook     'paredit-mode)
;;    (add-hook 'ess-stata-mode-hook        'paredit-mode)

Alternative from: http://wikemacs.org/wiki/Paredit-mode

#+BEGIN_EXAMPLE
(autoload 'enable-paredit-mode "paredit"
  "Turn on pseudo-structural editing of Lisp code."
  t)
(add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
(add-hook 'lisp-mode-hook             'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
(add-hook 'scheme-mode-hook           'enable-paredit-mode)
#+END_EXAMPLE


** Extreme barfarge and slurpage by John Wiegly
- https://www.emacswiki.org/emacs/ParEdit

- Included in the =use-package= call.
  
** =paredit-everywhere=
- Slurp: eat noisily, i.e., take in, incorporate.
- Barf:  vomit, i.e., expel 
- Splice: join together

#+begin_src emacs-lisp :tangle yes
  (use-package paredit-everywhere
    :init
    (add-hook 'prog-mode-hook 'paredit-everywhere-mode)
    (defvar paredit-everywhere-mode-map
      (let ((m (make-sparse-keymap)))
        (define-key m (kbd "C-(")           'paredit-backward-slurp-sexp)
        (define-key m (kbd "C-)")           'paredit-forward-slurp-sexp)
        (define-key m (kbd "C-}")           'paredit-forward-barf-sexp)
        (define-key m (kbd "C-{")           'paredit-backward-barf-sexp)
        (define-key m (kbd "M-(")           'paredit-wrap-round)
        (define-key m (kbd "M-[")           'paredit-wrap-square)
        (define-key m (kbd "M-{")           'paredit-wrap-curly)
        (define-key m (kbd "M-)")           'paredit-close-round-and-newline)
        (define-key m (kbd "M-]")           'paredit-close-square-and-newline)
        (define-key m (kbd "M-}")           'paredit-close-curly-and-newline)
        (define-key m (kbd "M-\"")          'paredit-meta-doublequote)
        (define-key m (kbd "M-S")           'paredit-split-sexp)
        (define-key m (kbd "M-J")           'paredit-join-sexps)
        (define-key m (kbd "M-s")           'paredit-splice-sexp)
        (define-key m (kbd "M-r")           'paredit-raise-sexp)
        (define-key m (kbd "M-<backspace>") 'paredit-backward-kill-word)
        (define-key m (kbd "M-d")           'paredit-forward-kill-word)
        (define-key m (kbd "C-d")           'paredit-forward-delete)
        (define-key m (kbd "DEL")           'paredit-backward-delete)
        (define-key m (kbd "C-k")           'paredit-kill)
        (define-key m (kbd ")")             'paredit-close-round)
        (define-key m (kbd "M-<up>")        'paredit-splice-sexp-killing-backward)
        (define-key m (kbd "M-<down>")      'paredit-splice-sexp-killing-forward)
        m)
      "Keymap for `paredit-everywhere-mode'.")
    )
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24487 50062 575117 74000) :init (24487 50062 575086 163000) :config (24487 50062 574644 930000) :config-secs (0 0 11 550000) :init-secs (0 0 749 861000) :use-package-secs (0 0 869 302000)))


* Latex-related tweaks
** Electric Pair for LaTeX

https://tex.stackexchange.com/questions/75697/auctex-how-to-cause-math-mode-dollars-to-be-closed-automatically-with-electric

DGM, 22 jan 20. Trying to get the =[]= pair in latex

#+begin_src emacs-lisp :tangle yes
(electric-pair-mode)
(add-hook 'LaTeX-mode-hook
          '(lambda ()
            (define-key LaTeX-mode-map (kbd "$") 'self-insert-command)
            (define-key LaTeX-mode-map (kbd "[") 'self-insert-command)))
#+end_src

#+RESULTS:
| (lambda nil (define-key LaTeX-mode-map (kbd $) 'self-insert-command) (define-key LaTeX-mode-map (kbd [) 'self-insert-command)) | preview-mode-setup | (lambda nil (highlight-symbol-mode)) | TeX-PDF-mode | turn-on-reftex |

But it is not working. I try this:

#+begin_src emacs-lisp :tangle no
(defun brf-TeX-Inserting (sta stb stc num)
  " after entering stb insert stc and go back with the cursor by num positions.
    With prefix nothings gets replaced. If the previous char was sta nothing will be 
    replaces as well." 
  (if (null current-prefix-arg)
      (progn
        (if (= (preceding-char) sta )
            (insert stb)
          (progn (insert stc) (backward-char num))))
    (insert stb)))

(defun brf-TeX-dollarm () (interactive) (brf-TeX-Inserting ?\\ "$"  "$$" 1))

(add-hook 'LaTeX-mode-hook
   (function (lambda ()
       (local-set-key (kbd "$")      'brf-TeX-dollarm))))
#+end_src


** Trying to make paredit work with latex

No funciona, no se' por que'

#+begin_src emacs-lisp :tangle no
(require 'latex-paredit-hack)
#+end_src

** AUCTeX pairing braces
This is what solved it for braces and the like but not for math delimiters!!!

AUCTeX has a built in support for pairing braces: 
- https://www.gnu.org/software/auctex/manual/auctex.html#Braces
- https://emacs.stackexchange.com/questions/27084/electric-pair-of-any-length-using-auctex

#+begin_src emacs-lisp :tangle yes
(setq LaTeX-electric-left-right-brace t)
#+end_src

#+RESULTS:
: t

#+begin_src emacs-lisp :tangle no
  (setq TeX-electric-math t) 

  (add-hook 'plain-TeX-mode-hook
            (lambda () (set (make-local-variable 'TeX-electric-math)
                            (cons "$" "$"))))
 (add-hook 'LaTeX-mode-hook
            (lambda () (set (make-local-variable 'TeX-electric-math)
                            (cons "\\(" "\\)"))))

 (add-hook 'LaTeX-mode-hook
            (lambda () (set (make-local-variable 'TeX-electric-math)
                            (cons "\\left(" "\\right)"))))

(add-hook 'LaTeX-mode-hook
            (lambda () (set (make-local-variable 'TeX-electric-math)
                            (cons "\\left[" "\\right]"))))

(add-hook 'LaTeX-mode-hook
            (lambda () (set (make-local-variable 'TeX-electric-math)
                            (cons "\\left{" "\\right}"))))

  (setq LaTeX-electric-left-right-brace t)

  (setq blink-matching-paren t)
#+end_src

#+RESULTS:
: t

Things I've tried:  

#+BEGIN_EXAMPLE
(add-hook 'plain-TeX-mode-hook
	  (lambda () (set (make-local-variable 'TeX-electric-math)
			  (cons "$" "$"))))
(add-hook 'LaTeX-mode-hook
	  (lambda () (set (make-local-variable 'TeX-electric-math)
			  (cons "\\(" "\\)"))))
#+END_EXAMPLE

#+BEGIN_EXAMPLE
(add-hook 'LaTeX-mode-hook
          '(lambda ()
            (define-key LaTeX-mode-map (kbd "$") 'self-insert-command)))
#+END_EXAMPLE


#+begin_src emacs-lisp :tangle yes
 (add-hook 'LaTeX-mode-hook
            (lambda () (set (make-local-variable 'TeX-electric-math)
                            (cons "\\left(" "\\right)"))))
#+end_src

#+RESULTS:
| (lambda nil (set (make-local-variable 'TeX-electric-math) (cons \left( \right)))) | (lambda nil (highlight-symbol-mode)) | (lambda nil (define-key LaTeX-mode-map (kbd $) 'self-insert-command) (define-key LaTeX-mode-map (kbd [) 'self-insert-command)) | TeX-PDF-mode | turn-on-reftex |

* Provide

Trying this on 28 dic 2018. I don't really know why it is needed or not.

#+BEGIN_SRC emacs-lisp :tangle yes
(provide 'starter-kit-parens)
#+END_SRC

#+RESULTS:
: dgm

* Final message
#+source: message-line
#+begin_src emacs-lisp :tangle yes
(message "Starter Kit Parens File loaded.")
#+end_src
