#+TITLE: Starter Kit Org
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Org
Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also implemented using Org-mode and [[http://git-scm.com/][git]].

The [Local Org-mode XeLaTeX Export Settings] section has
 references to fonts that you may not have available on your
 system. Change the references as appropriate, or comment out or
 delete the lines.



** Export Settings and Helpful Packages
*** Markdown 
HTML and LaTeX exporters are shown by default. We add the Markdown exporter to the menu.

#+begin_src emacs-lisp :tangle yes
  ;; Autocomplete for orgmode
  ;; (require 'org-ac)
  ;; (org-ac/config-default)

  ;; Markdown exporter
  (require 'ox-md)

  ;; (setq org-completion-use-ido t)  ;; dgm disables in case it interferes with helm
  ;; (require 'org-special-blocks)
  ;; (if window-system (require 'org-mouse))

  ;; Compatibility with WindMove
  ;; Make windmove work in org-mode:
;;  (add-hook 'org-shiftup-final-hook 'windmove-up)
;;  (add-hook 'org-shiftleft-final-hook 'windmove-left)
;;  (add-hook 'org-shiftdown-final-hook 'windmove-down)
;;  (add-hook 'org-shiftright-final-hook 'windmove-right)
  ;; (if window-system (require 'org-mouse))
#+end_src

*** Pandoc 

Following Daniel Mai we add the exporter for Pandoc as well (remember to install Pandoc on your system!). Pandoc converts between a huge number of different file formats.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ox-pandoc
  :no-require t
  :defer 10
  :ensure t)
#+END_SRC

*** Local Pandoc Support

A pandoc menu for markdown and tex files.

#+src-name: pandoc_mode
#+begin_src emacs-lisp :tangle yes
  (load "pandoc-mode")
  (add-hook 'markdown-mode-hook 'pandoc-mode)
  (add-hook 'TeX-mode-hook 'pandoc-mode)
  (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)
  ;; (global-set-key (kbd "C-c C-p") 'pandoc-main-hydra/body) ;; not sure it is taken
#+end_src

#+RESULTS:
| turn-on-reftex | pandoc-load-default-settings |

*** Export options 

Taken from Caolan on Publishing (https://caolan.org/dotfiles/emacs.html)
Remove section numbers, table of contents etc. from =HTML= output plus some other sensible defaults. These can be overridden in =org-publish-project-alist=.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-export-with-section-numbers nil)
(setq org-html-include-timestamps nil)
(setq org-export-with-sub-superscripts nil)
(setq org-export-with-toc nil)
(setq org-html-toplevel-hlevel 2)
(setq org-export-htmlize-output-type 'css)
(setq org-export-html-coding-system 'utf-8-unix)
(setq org-html-viewport nil)
(setq org-export-with-smart-quotes t)
#+END_SRC

*** Html export settings

Create =html= files form the =org= sources, to help with documentation. To set up org-mode for publishing projects to HTML you will need to change these settings, as they apply only to the Starter Kit.

#+source: html-export-settings
#+begin_src emacs-lisp :tangle yes
  (setq org-publish-project-alist
         '(("org"
            :base-directory "~/.emacs.d/"
            :publishing-directory "/media/dgm/blue/documents/websites/esk/"
            :publishing-function org-html-publish-to-html
            :auto-sitemap t
            :sitemap-filename "index.org"
            :sitemap-title "Emacs Starter Kit for the Social Sciences: Documentation"
            :section-numbers t
            ;;:table-of-contents t
            :html-head "<link rel=\"stylesheet\"
                   href=\"http://kieranhealy.org/css/org.css\"
                   type=\"text/css\"/>"            )))

  (setq org-html-postamble nil)
#+end_src

#+RESULTS: html-export-settings

*** =twbs= or html made cool 

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'ox-twbs)
#+END_SRC

#+RESULTS:
: ox-twbs

***  Configure Org-babel
   - Add LaTeX to the list of languages Org-babel will recognize.
#+srcname: add-latex
#+begin_src emacs-lisp :tangle yes
     (require 'ob-latex)
  ;; (org-babel-add-interpreter "latex")
  ;; (add-to-list 'org-babel-tangle-langs '("latex" "tex"))
#+end_src
   - Add LaTeX to a list of languages that raise noweb-type errors.
#+srcname: noweb-error
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'org-babel-noweb-error-langs "latex")
#+end_src

*** Links in Org mode
A global binding for Org-mode (see [[file:starter-kit-org.org][starter-kit-org]])

Org-mode supports [[http://orgmode.org/manual/Hyperlinks.html#Hyperlinks][links]], this command allows you to store links
globally for later insertion into an Org-mode buffer.  See
[[http://orgmode.org/manual/Handling-links.html#Handling-links][Handling-links]] in the Org-mode manual.

#+begin_src emacs-lisp :tangle yes
(define-key global-map "\C-cl" 'org-store-link)
#+end_src

#+RESULTS:
: org-store-link
*** ebib and citation settings
    ebib is a bibtex database manager that works inside emacs. It can
    talk to org-mode. See [[http://orgmode.org/worg/org-tutorials/org-latex-export.html#sec-17_2][this Worg tutorial]] for details.
#+source: ebib-setup
#+begin_src emacs-lisp :tangle yes
    (org-add-link-type "ebib" 'ebib)

   (org-add-link-type
     "cite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "cite:" desc)))
               (format "\\cite{%s}" path)
               (format "\\cite[%s]{%s}" desc path)
               )))))

   (org-add-link-type
     "parencite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "parencite:" desc)))
               (format "\\parencite{%s}" path)
               (format "\\parencite[%s]{%s}" desc path)
  )))))

  (org-add-link-type
     "textcite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "textcite:" desc)))
               (format "\\textcite{%s}" path)
               (format "\\textcite[%s]{%s}" desc path)
  )))))

  (org-add-link-type
     "autocite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "autocite:" desc)))
               (format "\\autocite{%s}" path)
           (format "\\autocite[%s]{%s}" desc path)
  )))))

  (org-add-link-type
   "footcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "footcite:" desc)))
           (format "\\footcite{%s}" path)
         (format "\\footcite[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "fullcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "fullcite:" desc)))
           (format "\\fullcite{%s}" path)
         (format "\\fullcite[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "citetitle" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "citetitle:" desc)))
           (format "\\citetitle{%s}" path)
         (format "\\citetitle[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "citetitles" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "citetitles:" desc)))
           (format "\\citetitles{%s}" path)
         (format "\\citetitles[%s]{%s}" desc path)
         )))))

  (org-add-link-type
     "headlessfullcite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "headlessfullcite:" desc)))
               (format "\\headlessfullcite{%s}" path)
               (format "\\headlessfullcite[%s]{%s}" desc path)
  )))))
#+end_src

#+RESULTS: ebib-setup
: Created headlessfullcite link.


*** Org-protocol

Org-protocol from https://caolan.org/dotfiles/emacs.html#orgd96aeb0
Use org-protocol to trigger org-mode interactions from external programs. Useful for capturing links from Firefox using the org-mode-capture add-on.

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'org-protocol)
#+END_SRC

#+RESULTS:
: org-protocol


** Org-Mode Hooks
Make yasnippet work properly with org-mode.

#+begin_src emacs-lisp :tangle yes
;;  (defun yas/org-very-safe-expand ()
;;    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

(defun yas-org-very-safe-expand ()
  (let ((yas-fallback-behavior 'return-nil))
    (and (fboundp 'yas-expand) (yas-expand))))

(add-hook 'org-mode-hook
          (lambda ()
            (add-to-list 'org-tab-first-hook
                         'yas-org-very-safe-expand)
            ))

#+end_src

#+begin_src emacs-lisp :tangle yes
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\M-\C-n" 'outline-next-visible-heading)
              (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
              (local-set-key "\M-\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-iimage-in-org)
              ;; yasnippet (using the new org-cycle hooks)
              ;;(make-variable-buffer-local 'yas/trigger-key)
              ;;(setq yas/trigger-key [tab])
              ;;(add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
              ;;(define-key yas/keymap [tab] 'yas/next-field)
              ))
#+end_src


Original hook from =dgm.org=

#+BEGIN_SRC emacs-lisp :tangle yes
   (add-hook 'org-mode-hook
             (lambda ()
               (set-face-attribute 'org-level-1 nil :height 1.5)
               (set-face-attribute 'org-level-2 nil :height 1.2)
               (set-face-attribute 'org-level-3 nil :height 1.1)
               (set-face-attribute 'org-level-4 nil :height 1.1)
               (set-face-attribute 'org-level-5 nil :height 1.1)))
#+END_SRC

#+RESULTS:
| er/add-org-mode-expansions | (lambda nil (org-bullets-mode)) | turn-off-auto-fill | ambrevar/turn-off-indent-tabs | ambrevar/turn-off-linum | (lambda nil (visual-line-mode 1)) | org-indent-mode | (lambda nil (highlight-symbol-mode)) | org-table-stripes-enable | (lambda nil (set-face-attribute 'org-level-1 nil :height 1.5) (set-face-attribute 'org-level-2 nil :height 1.2) (set-face-attribute 'org-level-3 nil :height 1.1) (set-face-attribute 'org-level-4 nil :height 1.1) (set-face-attribute 'org-level-5 nil :height 1.1)) | org-mode-reftex-setup | org-ref-org-menu | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |

*** Hooks by Uncle David

Hook from Uncle Dave at https://github.com/daedreth/UncleDavesEmacs

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

#+RESULTS:
| er/add-org-mode-expansions | (lambda nil (org-bullets-mode)) | turn-off-auto-fill | ambrevar/turn-off-indent-tabs | ambrevar/turn-off-linum | (lambda nil (visual-line-mode 1)) | org-indent-mode | (lambda nil (highlight-symbol-mode)) | org-table-stripes-enable | (lambda nil (set-face-attribute 'org-level-1 nil :height 1.5) (set-face-attribute 'org-level-2 nil :height 1.2) (set-face-attribute 'org-level-3 nil :height 1.1) (set-face-attribute 'org-level-4 nil :height 1.1) (set-face-attribute 'org-level-5 nil :height 1.1)) | org-mode-reftex-setup | org-ref-org-menu | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |


Line wrapping from Uncle Dave at https://github.com/daedreth/UncleDavesEmacs.

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'org-mode-hook
        '(lambda ()
           (visual-line-mode 1)))
#+END_SRC

#+RESULTS:
| er/add-org-mode-expansions | (lambda nil (org-bullets-mode)) | turn-off-auto-fill | ambrevar/turn-off-indent-tabs | ambrevar/turn-off-linum | (lambda nil (visual-line-mode 1)) | org-indent-mode | (lambda nil (highlight-symbol-mode)) | org-table-stripes-enable | (lambda nil (set-face-attribute 'org-level-1 nil :height 1.5) (set-face-attribute 'org-level-2 nil :height 1.2) (set-face-attribute 'org-level-3 nil :height 1.1) (set-face-attribute 'org-level-4 nil :height 1.1) (set-face-attribute 'org-level-5 nil :height 1.1)) | org-mode-reftex-setup | org-ref-org-menu | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |


*** Hooks by Ambrevar

#+BEGIN_SRC emacs-lisp :tangle yes
(dolist (fun '(ambrevar/turn-off-linum ambrevar/turn-off-indent-tabs turn-off-auto-fill))
  (add-hook 'org-mode-hook fun))

(when (require 'org-contacts nil t)
;;  (let ((contacts "~/personal/contacts/contacts.org.gpg"))
  (let ((contacts "/media/dgm/blue/documents/dropbox/org/contacts.org.gpg"))
    (when (file-exists-p contacts)
      ;; When used to auto-complete e-mail addresses, the file is automatically
      ;; loaded.  The buffer usually need not be restored by a desktop session.
      (when desktop-save-mode
        (setq desktop-files-not-to-save
              (concat (substring desktop-files-not-to-save 0 -2) "\\|" (regexp-quote (expand-file-name contacts)) "\\)")))
      (setq org-contacts-files (list contacts)))))
#+END_SRC

** Speed keys
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

Speed commands are a nice and quick way to perform certain actions while at the beginning of a heading. It’s not activated by default.

See the =org-speed-commands-default= variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to =org-babel-describe-bindings=) will
display a list of the code blocks commands and their related keys.

#+begin_src emacs-lisp :tangle yes
  (setq org-use-speed-commands t)
#+end_src

** Code blocks
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
=org-babel-load-languages= variable, or with an elisp form like the
one below.  The customize interface of =org-babel-load-languages=
contains an up to date list of the currently supported languages.

#+begin_src emacs-lisp :tangle yes
(require 'ess) 
(require 'ob-stata)

  (org-babel-do-load-languages
   'org-babel-load-languages
  '((emacs-lisp . t)
;;    (sh . t)
    (R . t)
    (perl . t)
    (ruby . t)
    (python . t)
    (js . t)
    (haskell . t)
    (stata . t)
    (shell . t)
    (latex . t)
    ))


;; I am following Ista Zahn here: don't include (stata . t) but do (require 'ob-stata) afterwards. Stil, when I do so, I get the Debugger entered--Lisp error: (void-variable inferior-STA-program-name)
;; eval(inferior-STA-program-name) so the problem comes from =ob-stata=.


#+end_src

#+RESULTS:

The next block makes org-babel aware that a lower-case 'r' in a =src= block header should be processed as R. 

#+source: add-r
#+begin_src emacs-lisp :tangle yes
    (add-to-list 'org-src-lang-modes
                 '("r" . ess-mode))

    (add-to-list 'org-src-lang-modes
                 '("stata" . ess-mode))
#+end_src

#+RESULTS: add-r
: ((stata . ess-mode) (r . ess-mode) (ocaml . tuareg) (elisp . emacs-lisp) (ditaa . artist) (asymptote . asy) (dot . fundamental) (sqlite . sql) (calc . fundamental) (C . c) (cpp . c++) (C++ . c++) (screen . shell-script) (shell . sh) (bash . sh))

** Code block fontification
   :PROPERTIES:
   :CUSTOM_ID: code-block-fontification
   :END:

The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.

Added from Daniel Mai at https://github.com/danielmai/.emacs.d/blob/master/config.org as well

#+begin_src emacs-lisp :tangle yes
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src

#+RESULTS:
: t

Don't ask for confirmation on every =C-c C-c= code-block compile. 

#+source: turn-off-code-block-confirm
#+begin_src emacs-lisp :tangle yes
  (setq org-confirm-babel-evaluate nil)
#+end_src


*** More on syntax highlighting 

We'll need the =htmlize= package for syntax highlighting of code blocks (in Caolan's and Uncle Dave's dot files).

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package htmlize
  :ensure t)
#+END_SRC

** Ensure the Latest Org-mode manual is in the info directory

By placing the =doc/= directory in Org-mode at the front of the
=Info-directory-list= we can be sure that the latest version of the
Org-mode manual is available to the =info= command (bound to =C-h i=).

#+begin_src emacs-lisp :tangle yes
  (unless (boundp 'Info-directory-list)
    (setq Info-directory-list Info-default-directory-list))
  (setq Info-directory-list
        (cons (expand-file-name
               "doc"
               (expand-file-name
                "org"
                (expand-file-name "src" dotfiles-dir)))
              Info-directory-list))
#+end_src

** Nice Bulleted Lists

#+name: org-bullets
#+begin_src emacs-lisp :tangle yes
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src

#+RESULTS: org-bullets
: t

** More customization

Disable line splitting on M-RET.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-M-RET-may-split-line '((default)))
#+END_SRC

#+RESULTS:
| default |

Replace ellipsis with ellipsis in brackets

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-ellipsis " […]")
#+END_SRC

#+RESULTS:
:  […]

Indentation.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-adapt-indentation nil)
#+END_SRC

#+RESULTS:


** Local Org-mode Settings
*** COMMENT Smart-quote binding
When in an org-mode buffer, bind TeX-insert-quote to =C-c "=. Turned off by default.

#+source: org-mode-smartquote-key
#+begin_src emacs-lisp :tangle no
  (add-hook 'org-mode-hook 'smart-quote-keys)

;;  (defun smart-quote-keys ()
;;    (require 'typopunct)
;;    (typopunct-change-language 'english)
;;    (local-set-key (kbd "\C-c \'") 'typopunct-insert-single-quotation-mark)
;;    (local-set-key (kbd "\C-c \"") 'typopunct-insert-quotation-mark)
;;    )
#+end_src

*** Archive Settings
    Where archived projects and tasks go.
#+source: orgmode-archive
#+begin_src emacs-lisp :tangle yes
  (setq org-archive-location "/home/dgm/Dropbox/gtd/archive.org::From %s")
#+end_src

** Daniel Mai's costumization

From https://github.com/danielmai/.emacs.d/blob/master/config.org

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-image-actual-width 550)
(setq org-highlight-latex-and-related '(latex script entities))
#+END_SRC

*** SRC block exectuation, watch out!

On Org mode version 9 I wasn’t able to execute source blocks out of the box. Others have ran into the same issue too. The solution is to remove the .elc files from the package directory: =rm ${ORG_DIR}/*.elc=.
*** Org tags

The default value is -77, which is weird for smaller width windows. I’d rather have the tags align horizontally with the header. 45 is a good column number to do that.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-tags-column 45)
#+END_SRC

** =org-ref= 

=org-ref= from https://github.com/jkitchin/org-ref and the Reddit workflow from https://www.reddit.com/r/emacs/comments/4gudyw/help_me_with_my_orgmode_workflow_for_notetaking/

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-ref
    :ensure t
    :init
    (setq org-ref-completion-library 'org-ref-helm-bibtex)
    (setq org-ref-notes-directory "/media/dgm/blue/documents/elibrary/org/references"
          org-ref-bibliography-notes "/media/dgm/blue/documents/elibrary/org/references/readings.org"
          org-ref-default-bibliography '("/media/dgm/blue/documents/bibs/socbib.bib")
          org-ref-pdf-directory "/media/dgm/blue/documents/elibrary/org/references/pdfs/"))

(require 'org-id)
(require 'org-ref-wos)
(require 'org-ref-scopus)
(require 'org-ref-pubmed)

;; (add-to-list 'org-ref-bibtex-completion-actions '("Edit notes" . helm-bibtex-edit-notes))
#+END_SRC

#+RESULTS:
: org-ref-pubmed

*** Pre/post text support from Kitchin
- From: https://github.com/jkitchin/org-ref/blob/master/org-ref.org
org-ref has basic and limited support for pre/post text in citations. You can get pre/post text by using a description in a cite link, with pre/post text separated by ::. For example, See page 20::, for example. It is not easy (maybe not possible) to extend this for the humanities style of citations (e.g. harvard) with nested pre/post text on multiple citations. If anyone knows how to do it, pull requests are welcome! There is an ongoing effort in org-mode for a new citation syntax that may make this more feasible.

If you use helm-bibtex and would like pre/post text support enabled, you can add org-ref-format-citation to bibtex-completion-format-citation-functions:

Tangled to no until I understand what is this Pre/Post thingy.

#+BEGIN_SRC emacs-lisp :tangle no
;;(setf (cdr (assoc 'org-mode bibtex-completion-format-citation-functions)) 'org-ref-format-citation)
#+END_SRC

#+RESULTS:
: org-ref-format-citation

** Goodies

Template Lists from Daniel Mai at https://github.com/danielmai/.emacs.d/blob/master/config.org.

#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'org-structure-template-alist
             '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
(add-to-list 'org-structure-template-alist
             '("py" "#+BEGIN_SRC python\n?\n#+END_SRC" ""))
(add-to-list 'org-structure-template-alist
             '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC" ""))
(add-to-list 'org-structure-template-alist
             '("md" "#+BEGIN_SRC markdown\n?\n#+END_SRC" ""))
#+END_SRC

#+RESULTS:
| md | #+BEGIN_SRC markdown |

* Agenda 
** Shortcuts


#+BEGIN_SRC emacs-lisp :tangle yes
;;   (setq org-default-notes-file (concat org-directory "/notes.org")) ;; i disable this to see if I can choose between notes and tasks.
;;    this is not working for some reason: (define-key global-map "\C-c c" 'org-capture)
  (define-key global-map (kbd "C-c c") 'org-capture)

;; other bindings from http://orgmode.org/manual/Activation.html
;;     (global-set-key "\C-c l" 'org-store-link)  este binding ya estaba listo
;;     (global-set-key "\C-c a" 'org-agenda) ;; este binding puesto así no funcionaba
;;    (global-set-key "\C-c b" 'org-iswitchb);; este binding puesto así no funcionaba

  (define-key global-map (kbd "C-c a") 'org-agenda)
  (define-key global-map (kbd "C-c b") 'org-iswitchb)
#+END_SRC

#+RESULTS:
: org-iswitchb

Shortcuts that should work in Org but do not. Besides, they used to be bound to windmove but no more because I'd rather use =ace-window=

#+BEGIN_SRC emacs-lisp :tangle yes
  (define-key global-map (kbd "S-<left>") 'org-timestamp-down-day)
  (define-key global-map (kbd "S-<right>") 'org-timestamp-up-day)
  (define-key global-map (kbd "S-<up>") 'org-timestamp-up)
  (define-key global-map (kbd "S-<down>") 'org-timestamp-down)
#+END_SRC

#+RESULTS:
: org-timestamp-down

** Customization

#+BEGIN_SRC emacs-lisp :tangle yes
(setq
 org-insert-heading-respect-content t
 org-enforce-todo-dependencies t
 org-deadline-warning-days 7
 org-agenda-default-appointment-duration 60
 org-agenda-columns-add-appointments-to-effort-sum t
 ;; Add keywords.
; org-todo-keywords '((sequence "TODO" "REVIEW" "DONE"))  ;; commented
; out by dgm
 ; Customizations in:
 ; http://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html added
 ; by dgm
 org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "WAITING(w)"  "|" "DONE(d)" "CANCELED(c)"))
 ; comments out
 ;; org-todo-keyword-faces '(("REVIEW" :inherit org-done))
 ;; Priorities.
 org-priority-start-cycle-with-default nil
 org-default-priority 67
 ;; Org-mode aligns text.
 indent-tabs-mode nil)
#+END_SRC

#+RESULTS:


Set to the location of your Org files on your local system.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-directory "/home/dgm/Dropbox/gtd")
  ;; Set to <your Dropbox root directory>/MobileOrg.
  (setq org-mobile-directory "/media/dgm/blue/documents/dropbox/mobileorg")
  ;; Set to the files (or directory of files) you want sync'd
  ;;   (setq org-agenda-files (quote ("/home/dgm/Dropbox/gtd")))  ;; this is the original line by kieran healy.

  ;; organization by: https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html
  ;; Org agenda view scans these files and collects all the heading with a TODO (or related) keyword
  (setq org-agenda-files (list "/home/dgm/Dropbox/gtd/inbox.org"
                               "/home/dgm/Dropbox/gtd/gtd.org"
                               "/home/dgm/Dropbox/gtd/journal.org"
                               "/media/dgm/blue/documents/proyectos/mtj/mtj_gtd.org" ; i could add it with =C-c [= but that action does not survive across sections
                               "/media/dgm/blue/documents/proyectos/iat_methods/iat_methods.org"
                               "/media/dgm/blue/documents/proyectos/laBussola/laBussola_gtd.org"
                               "/home/dgm/Dropbox/gtd/tickler.org"))
#+END_SRC


From https://stackoverflow.com/questions/10635989/emacs-org-agenda-list-destroy-my-windows-splits. 

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-agenda-window-setup 'current-window)
#+END_SRC

#+RESULTS:
: current-window

** Custom agenda commands in overview  
Tip from https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html.

Useful for using custom agenda commands to get an overview of actions by context or tag. Here’s an example custom agenda command that will display all actions for the =@office= context. Following the GTD principle, what I usually want is to only show the first action to be done (or next action) for each project with the =@office= tag. That can be achieved using a skipping condition. I've tweak it so that I can have it work for entries tagged for the context "work" and for the context "home".

HOWEVER I am not 100% sure how useful is all this  because I have a nice option in C-c a to choose filtering by tag (/), etc.  Anyways, more info on agenda-custom-commands in http://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html.


#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-agenda-custom-commands
        '(("w" "Weekly Review"
           ((agenda "" ((org-agenda-span 7)))  ;; review upcoming deadlines and appointments
            ;; old code ((org-agenda-fortnight-view)))
            ;; type "l" in the agenda to review logged items
            ;;            (stuck "") ;; review stuck projects as designated by org-stuck-projects
            (todo "STARTED") ;; review  actions that have started
            (todo "NEXT") ;; review next actions
            (todo "TODO") ;; review pending actions waiting for "next actiosn" to be fulfilled
            (todo "WAITING"))) ;; review waiting items
          ("f" "Fortnight Review"
           ((agenda "" ((org-agenda-span 14))) ;; review upcoming deadlines and appointments
            ;; type "l" in the agenda to review logged items
            ;;            (stuck "") ;; review stuck projects as designated by org-stuck-projects
            (todo "STARTED") ;; review  actions that have started
            (todo "NEXT") ;; review next actions
            (todo "TODO") ;; review pending actions waiting for "next actiosn" to be fulfilled
            (todo "WAITING"))) ;; review waiting items
          ("r" "Monthly Review"
           ((agenda "" ((org-agenda-span 31))) ;; review upcoming deadlines and appointments
            ;; type "l" in the agenda to review logged items
            ;;            (stuck "") ;; review stuck projects as designated by org-stuck-projects
            (todo "STARTED") ;; review  actions that have started
            (todo "NEXT") ;; review next actions
            (todo "TODO") ;; review pending actions waiting for "next actiosn" to be fulfilled
            (todo "WAITING"))) ;; review waiting items
          ("y" "Yearly Review"
           ((agenda "" ((org-agenda-span (quote year))))))
          ("p" "Project Review"
           ((tags "project")
            (todo "STARTED") ;; review  actions that have started
            (todo "NEXT") ;; review next actions
            (todo "TODO")))  ;; review pending actions waiting for "next actions" to be fulfilled
          ;;          ("l" "Monthly (Long-Term) Review"
          ;;           ((agenda "" ((org-agenda-span (quote month))))))
          ("o" "Office and home agenda"
           ((agenda "" ((org-agenda-ndays 1))) ;; esto no me funciona... debe ser que (setq org-agenda-span (quote month)) en starter-kit-org.org tiene prioridad
            ;; limits the agenda display to a single day
            (tags-todo "@office|@home")
            (tags-todo "office|home")
            ;;            (tags "project+CATEGORY=\"elephants\"")
            ;;            (tags "review" ((org-agenda-files '("~/org/circuspeanuts.org"))))
            ;; limits the tag search to the file circuspeanuts.org
            ;;            (todo "WAITING")
            )
           ((org-agenda-compact-blocks t))) ;; options set here apply to the entire block
          ;; ...other commands here
          ))

(defun my-org-agenda-skip-all-siblings-but-first ()
    "Skip all but the first non-done entry."
    (let (should-skip-entry)
      (unless (org-current-is-todo)
        (setq should-skip-entry t))
      (save-excursion
        (while (and (not should-skip-entry) (org-goto-sibling t))
          (when (org-current-is-todo)
            (setq should-skip-entry t))))
      (when should-skip-entry
        (or (outline-next-heading)
            (goto-char (point-max))))))

  (defun org-current-is-todo ()
    (string= "TODO" (org-get-todo-state)))
#+END_SRC

#+RESULTS:
| w | Weekly Review          | ((agenda  ((org-agenda-span 7))) (todo STARTED) (todo NEXT) (todo TODO) (todo WAITING))  |                          |        |                                 |
| f | Fortnight Review       | ((agenda  ((org-agenda-span 14))) (todo STARTED) (todo NEXT) (todo TODO) (todo WAITING)) |                          |        |                                 |
| r | Monthly Review         | ((agenda  ((org-agenda-span 31))) (todo STARTED) (todo NEXT) (todo TODO) (todo WAITING)) |                          |        |                                 |
| y | Yearly Review          | ((agenda  ((org-agenda-span 'year))))                                                    |                          |        |                                 |
| p | Project Review         | ((tags project) (todo STARTED) (todo NEXT) (todo TODO))                                  |                          |        |                                 |
| o | Office and home agenda | ((agenda  ((org-agenda-ndays 1))) (tags-todo @office                                     | @home) (tags-todo office | home)) | ((org-agenda-compact-blocks t)) |


Set to the name of the file where new notes will be stored

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-mobile-inbox-for-pull "/media/dgm/blue/documents/dropbox/org/fromMobile.org")
#+END_SRC

#+RESULTS:
: /media/dgm/blue/documents/dropbox/org/fromMobile.org

Finally, as Carsten Dominik says here: http://thread.gmane.org/gmane.emacs.orgmode/523, with the project list You may run into problems with this approach if you have set =org-tags-match-list-sublevels= to a non-nil value, because then, due to tag inheritance, every headline *inside* each project will also show up in the resulting list.  To work around this, you may define your own special command like this:

#+BEGIN_SRC emacs-lisp :tangle yes
   (defun my-org-project-list ()
      "Get me a list of projects."
      (interactive)
      (let ((org-tags-match-list-sublevels nil))
      (org-tags-view nil "project")))
#+END_SRC

 And guess what?? It works!!!

** Capture templates 

 Article from The Reddit Workflow, From https://www.reddit.com/r/emacs/comments/4gudyw/help_me_with_my_orgmode_workflow_for_notetaking/

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-capture-templates '(
                              ;; ("t" "Todo [inbox]" entry
                              ;;   (file+headline "/home/dgm/Dropbox/gtd/inbox.org" "Tasks")
                              ;;   "* TODO %i%? \nEntry added on: %U
                              ;;                    \nEntry created from this heading or email: %a")
                              ;; ("a"  "Article"  entry  
                              ;;  (file+headline "/home/dgm/Dropbox/gtd/bibliography.org" "Bibliography") 
                              ;;    "* %a %^g
                              ;;     \n:PROPERTIES: 
                              ;;     \n:Created: %U
                              ;;     \n:END:
                              ;;     \n%i
                              ;;     \nBrief description:
                              ;;     \n%?"  
                              ;;  :empty-lines 1    
                              ;;  :created t)        
                                ("T" "Tickler" entry
                                 (file+headline "/home/dgm/Dropbox/gtd/tickler.org" "Tickler")
                                 "* %i%?
                                      \nEntry added on: %U from %a")
                                ("j" "Journal" entry
                                 (file+datetree "/home/dgm/Dropbox/gtd/journal.org")
                                 "* %?
                                      \n Added on: %U")
                                ("n" "Note" entry
                                 (file "~/Dropbox/gtd/notes.org")
                                     "* %?\nCaptured on %U from %a")))
#+END_SRC

#+RESULTS:
| T | Tickler | entry | (file+headline /home/dgm/Dropbox/gtd/tickler.org Tickler) | * %i%? |





































From caolan: https://caolan.org/dotfiles/emacs.html#orgd96aeb0

#+BEGIN_SRC emacs-lisp :tangle yes
(push `("t" "Todo" entry (file+headline "/home/dgm/Dropbox/gtd/inbox.org" "Tasks")
        ,(string-join
          '("* TODO %^{Description}"
            "  %?"
            "  %a"
            "  :LOGBOOK:"
            "  - Captured on %U from %a"
            "  :END:")
          "\n"))
      org-capture-templates)
#+END_SRC

#+RESULTS:
| t | Todo | entry | (file+headline /home/dgm/Dropbox/gtd/inbox.org Tasks) | * TODO %^{Description} |

As Caolan (https://caolan.org/dotfiles/emacs.html#orgd96aeb0) says, during expansion of the template, =%a= has been replaced by a link to the location from where you called the capture command. This can be extremely useful for deriving tasks from emails, for example. This tip from the Org-mode manual. The =%U= will be replaced with the time of the capture, this is an 'inactive' timestamp meaning it won't show up in the agenda view.

Tip from https://lists.gnu.org/archive/html/emacs-orgmode/2007-08/msg00253.html for having agenda show 30 days: =(setq org-agenda-span (quote month))=

*** Respond later
The 'Respond later' template is a customised TODO which includes some extra email information. This relies on the extended email properties made available in the Org-mode -> Custom Links -> mu4e section of this config.


#+BEGIN_SRC emacs-lisp :tangle yes
(push `("r" "Respond later" entry (file+headline "~/Dropbox/gtd/inbox.org" "Email")
        ,(string-join
          '("* TODO Respond to %:from on %a"
            "  %?"
            "  :LOGBOOK:"
            "  - Captured on %U from %a"
            "  :END:")
          "\n"))
        org-capture-templates)
#+END_SRC

#+RESULTS:
| r | Respond later | entry | (file+headline ~/Dropbox/gtd/inbox.org Email) | * TODO Respond to %:from on %a |

** Agenda costumization from Ambrevar

Set PDF association in Org-mode (original is ='default=).

#+BEGIN_SRC emacs-lisp :tangle yes
(setcdr (assoc "\\.pdf\\'" org-file-apps) 'emacs)
#+END_SRC

#+RESULTS:
: emacs

** Further customization of agenda

Remove =DONE= tasks from agenda view. Tip from: https://stackoverflow.com/questions/8281604/remove-done-tasks-from-agenda-view

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done t)
#+END_SRC

#+RESULTS:
: t

*** Globally defined tags. 

Tip from: https://orgmode.org/manual/Setting-tags.html

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-tag-alist '(("airbnb" . ?a) ("@computer" . ?b) ("course" . ?c)  ("errands" . ?e) ("@home" . ?h) ("medicos" . ?m) ("@office" . ?o)  ("@phone" . ?p) ("project" . ?q) ("teaching" . ?t) ("uned" . ?u)))
#+END_SRC

#+RESULTS:
: ((airbnb . 97) (@computer . 98) (course . 99) (errands . 101) (@home . 104) (medicos . 109) (@office . 111) (@phone . 112) (project . 113) (teaching . 116) (uned . 117))

** Public holidays 

Public holidays in Spain. Tip from: https://www.emacswiki.org/emacs/CalendarLocalization

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'org-agenda)
  (require 'holidays)
  (setq calendar-holidays holiday-other-holidays)
  (setq org-agenda-include-diary t)

  (setq holiday-other-holidays
        '((holiday-fixed 1 1 "Año Nuevo")
          (holiday-fixed 1 6 "Día de Reyes")
          (holiday-fixed 2 14 "Miércoles de Ceniza")
          (holiday-sexp '(calendar-nth-named-day 1 1 3 year 19) "Día de San José")
          (holiday-easter-etc -7 "Domingo de Ramos")
          (holiday-easter-etc -3 "Jueves Santo")
          (holiday-easter-etc -2 "Viernes Santo")
          (holiday-easter-etc +1 "Lunes de Pascua")
          (holiday-fixed 5 1 "Día Internacional del Trabajo")
          (holiday-fixed 5 2 "Día de la Comunidad de Madrid")
          (holiday-fixed 5 6 "Día de la Madre")
          (holiday-fixed 5 15 "Día de San Isidro")
          (holiday-fixed 5 31 "Corpus Christi (Madrid)")
;;          (holiday-easter-etc +43 "Día de la Ascención")
          (holiday-easter-etc +64 "Corpus Christi")
          (holiday-fixed 10 12 "Día de la Hispanidad")
          (holiday-fixed 11 1  "Todos los santos")
          (holiday-fixed 12 25 "Navidad")
          (holiday-fixed 12 6 "Día de la Constitución")
          (holiday-fixed 12 8 "Inmaculada Concepción")
          ))
#+END_SRC

#+RESULTS:
| holiday-fixed      |                                       1 |                1 | Año Nuevo                     |
| holiday-fixed      |                                       1 |                6 | Día de Reyes                  |
| holiday-fixed      |                                       2 |               14 | Miércoles de Ceniza           |
| holiday-sexp       | '(calendar-nth-named-day 1 1 3 year 19) |  Día de San José |                               |
| holiday-easter-etc |                                      -7 | Domingo de Ramos |                               |
| holiday-easter-etc |                                      -3 |     Jueves Santo |                               |
| holiday-easter-etc |                                      -2 |    Viernes Santo |                               |
| holiday-easter-etc |                                       1 |  Lunes de Pascua |                               |
| holiday-fixed      |                                       5 |                1 | Día Internacional del Trabajo |
| holiday-fixed      |                                       5 |                2 | Día de la Comunidad de Madrid |
| holiday-fixed      |                                       5 |                6 | Día de la Madre               |
| holiday-fixed      |                                       5 |               15 | Día de San Isidro             |
| holiday-fixed      |                                       5 |               31 | Corpus Christi (Madrid)       |
| holiday-easter-etc |                                      64 |   Corpus Christi |                               |
| holiday-fixed      |                                      10 |               12 | Día de la Hispanidad          |
| holiday-fixed      |                                      11 |                1 | Todos los santos              |
| holiday-fixed      |                                      12 |               25 | Navidad                       |
| holiday-fixed      |                                      12 |                6 | Día de la Constitución        |
| holiday-fixed      |                                      12 |                8 | Inmaculada Concepción         |


*** Make calendar start on Monday instead of Sunday

#+BEGIN_SRC emacs-lisp :tangle yes
(setq calendar-week-start-day 1)
#+END_SRC

#+RESULTS:
: 1

** Refiling

From Caolan at https://caolan.org/dotfiles/emacs.html#orgd96aeb0. 
Provide refile targets as paths, so a level 3 headline will be available as level1/level2/level3. Offer completions in hierarchical steps.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-refile-use-outline-path t)
(setq org-outline-path-complete-in-steps t)
#+END_SRC

Targets.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-refile-targets '(("/home/dgm/Dropbox/gtd/gtd.org" :maxlevel . 3)
                             ("/media/dgm/blue/documents/proyectos/mtj/mtj_gtd.org" :maxlevel . 2)
                             ("/media/dgm/blue/documents/proyectos/laBussola/laBussola_gtd.org" :maxlevel . 2)
                             ("/media/dgm/blue/documents/proyectos/iat_methods/iat_methods.org" :maxlevel . 2)
                             ("/home/dgm/Dropbox/gtd/someday.org" :level . 2)
                             ("/home/dgm/Dropbox/gtd/inbox.org" :level . 2)
                             ("/home/dgm/Dropbox/gtd/notes.org" :level . 2)
                             ("/home/dgm/Dropbox/gtd/tickler.org" :level . 2)))
#+END_SRC

Create any missing parent nodes during refile (after asking for confirmation). (From Caolan at  https://caolan.org/dotfiles/emacs.html#orgd96aeb0.)

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

#+RESULTS:
: confirm

** Ambrevar's agenda stuff

#+BEGIN_SRC emacs-lisp :tangle yes
(autoload 'ambrevar/org-switch-agenda-file "org")
(autoload 'ambrevar/org-switch-agenda-file-other-window "org")
#+END_SRC

#+RESULTS:
: ambrevar/org-switch-agenda-file-other-window

* Ido =Imenu='s depth of search

Depth of search for =Imenu= in Org buffers. From https://www.reddit.com/r/emacs/comments/8v6fny/how_to_change_the_depth_of_imenulist_for_org_files/

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-imenu-depth 5)
#+END_SRC

#+RESULTS:
: 5

* Provide

#+BEGIN_SRC emacs-lisp :tangle yes
(provide 'starter-kit-org)
#+END_SRC

#+RESULTS:
: starter-kit-org

* Final message
#+source: message-line
#+begin_src emacs-lisp :tangle yes
  (message "Starter Kit Org loaded.")
#+end_src

