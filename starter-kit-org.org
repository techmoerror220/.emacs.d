# -*- coding: utf-8 -*-
# -*- find-file-hook: org-babel-execute-buffer -*-

#+TITLE: Starter Kit Org
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Org
Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also implemented using Org-mode and [[http://git-scm.com/][git]].

The [Local Org-mode XeLaTeX Export Settings] section has
references to fonts that you may not have available on your
system. Change the references as appropriate, or comment out or
delete the lines.

From DW:
[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Overview
Here are the Org files I use. I should probably organize them better.  Inspired by Sacha Chua.

| archive.org      | Archived subtrees                                                        |
| articles.org     | Huge file with artilce notes                                             |
| bibliography.org | Needed for =org-ref= workflow, I think.                                  |
| business.org     | Business-related notes and TODOs                                         |
| compras.org      |                                                                          |
| contacts.org     | Contact information and people-related tasks                             |
| gtd.org          | Main document for outlining projects                                     |
| inbox.org        | My main Org file. Inbox for M-x org-capture, tasks, weekly reviews, etc. |
| journal.org      | Stoic journal                                                            |
| learning.org     | Learning plan                                                            |
| math.org         | Math notes                                                               |
| medidas.org      |                                                                          |
| notes.org        | Notes without a TODO flag                                                |
| programming.org  | Programming projects, fabric tracking, etc.                              |
| tickler.org      | TODOs and events with a date                                             |
| someday.org      | Plans without due date                                                   |


    (add-to-list 'org-speed-commands-user '("N" org-narrow-to-subtree))
    (add-to-list 'org-speed-commands-user '("W" widen))
    (add-to-list 'org-speed-commands-user '("S" call-interactively 'org-sort))
           :map org-speed-commands-user
           ("N"           . org-narrow-to-subtree)
           ("W"           . widen)
           ("S"           . org-sort)

           ("s-,"         . org-wiki-helm)

;;     :ensure org-plus-contrib

NB: On lenovo, I take 

#+begin_example elisp

:map org-capture-mode-map
           ("C-c C-r"     . my/org-refile-and-jump)

#+end_example

out as I get the warning:

#+begin_example elisp

Error (use-package): org/:catch: Symbol’s value as variable is void: org-capture-mode-map Disable showing Disable logging

#+end_example

** Org-mode
#+begin_src emacs-lisp :tangle yes

  (use-package org
    :commands (org-capture org-agenda)
    :mode ("\\.org\\'"    . org-mode)
    :bind (("\C-cl"       . org-store-link)
           ("C-c c"       . org-capture)
           ("C-c a"       . org-agenda)
           ("C-c j"       . org-clock-goto)
           ("S-<left>"    . org-timestamp-down-day)
           ("S-<right>"   . org-timestamp-up-day)
           ("S-<up>"      . org-timestamp-up)
           ("S-<down>"    . org-timestamp-down)
           ("\M-\C-n"     . outline-next-visible-heading)
           ("\M-\C-p"     . outline-previous-visible-heading)
           ("\M-\C-u"     . outline-up-heading)
           ("\M-\C-w"     . org-table-copy-region)
           ("\M-\C-y"     . org-table-paste-rectangle)
           ("\M-\C-l"     . org-table-sort-lines)
           ("\M-I"        . org-toggle-inline-images)
           ("C-c I"       . eos/org-clock-in)
           ("C-c O"       . org-clock-out)
           ("C-c q"       . my/org-quick-clock-in-task)
           ("s-."         . org-recipes)
           :map org-mode-map
           ("C-c C-w"     . org-refile)
           ("s-<"         . org-cut-subtree)
           ("C->"         . org-time-stamp)
           ("M-<right>"   . nil)
           ("M-<right>"   . org-shiftmetaright)
           ("M-<left>"    . nil)
           ("M-<left>"    . org-shiftmetaleft)
           ("M-S-<right>" . nil)
           ("M-S-<right>" . org-metaright)
           ("M-S-<left>"  . nil)
           ("M-S-<left>"  . org-metaleft)
           ("s-,"         . org-toggle-pretty-entities)
           :map org-agenda-mode-map
           ("x"           . org-agenda-refile)
           ("1"           . bjm/org-agenda-item-to-top))
    :init
    (defun yas-org-very-safe-expand ()
      (let ((yas-fallback-behavior 'return-nil))
        (and (fboundp 'yas-expand) (yas-expand))))

    (add-hook 'org-mode-hook
              (lambda ()
                (add-to-list 'org-tab-first-hook
                             'yas-org-very-safe-expand)))
    (add-hook 'org-mode-hook
              (lambda ()
                (set-face-attribute 'org-level-1 nil :height 1.5)
                (set-face-attribute 'org-level-2 nil :height 1.2)
                (set-face-attribute 'org-level-3 nil :height 1.1)
                (set-face-attribute 'org-level-4 nil :height 1.1)
                (set-face-attribute 'org-level-5 nil :height 1.1)))

    (dolist (fun '(ambrevar/turn-off-linum ambrevar/turn-off-indent-tabs turn-off-auto-fill))
      (add-hook 'org-mode-hook fun))

    (defun bh/show-org-agenda ()
      (interactive)
      (if org-agenda-sticky
          (switch-to-buffer "*Org Agenda( )*")
        (switch-to-buffer "*Org Agenda*"))
      (delete-other-windows))

    (defun bh/hide-other ()
      (interactive)
      (save-excursion
        (org-back-to-heading 'invisible-ok)
        (hide-other)
        (org-cycle)
        (org-cycle)
        (org-cycle)))

    (defun bh/narrow-to-org-subtree ()
      (widen)
      (org-narrow-to-subtree)
      (save-restriction
        (org-agenda-set-restriction-lock)))

    (defun bh/narrow-to-org-project ()
      (widen)
      (save-excursion
        (bh/find-project-task)
        (bh/narrow-to-org-subtree)))

    (defun bh/skip-habits ()
      "Skip habits"
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (if (org-is-habit-p)
              next-headline
            nil))))

    (defun bh/is-project-p ()
      "Any task with a todo keyword subtask"
      (save-restriction
        (widen)
        (let ((has-subtask)
              (subtree-end (save-excursion (org-end-of-subtree t)))
              (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-todo-keywords-1)
                (setq has-subtask t))))
          (and is-a-task has-subtask))))

    (defun bh/is-project-subtree-p ()
      "Any task with a todo keyword that is in a project subtree.
        Callers of this function already widen the buffer view."
      (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                  (point))))
        (save-excursion
          (bh/find-project-task)
          (if (equal (point) task)
              nil
            t))))

    (defun bh/is-task-p ()
      "Any task with a todo keyword and no subtask"
      (save-restriction
        (widen)
        (let ((has-subtask)
              (subtree-end (save-excursion (org-end-of-subtree t)))
              (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-todo-keywords-1)
                (setq has-subtask t))))
          (and is-a-task (not has-subtask)))))

    (defun bh/is-subproject-p ()
      "Any task which is a subtask of another project"
      (let ((is-subproject)
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (while (and (not is-subproject) (org-up-heading-safe))
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq is-subproject t))))
        (and is-a-task is-subproject)))

    (defun bh/list-sublevels-for-projects-indented ()
      "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
          This is normally used by skipping functions where this variable is already local to the agenda."
      (if (marker-buffer org-agenda-restrict-begin)
          (setq org-tags-match-list-sublevels 'indented)
        (setq org-tags-match-list-sublevels nil))
      nil)

    (defun bh/list-sublevels-for-projects ()
      "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
          This is normally used by skipping functions where this variable is already local to the agenda."
      (if (marker-buffer org-agenda-restrict-begin)
          (setq org-tags-match-list-sublevels t)
        (setq org-tags-match-list-sublevels nil))
      nil)

    (defvar bh/hide-scheduled-and-waiting-next-tasks t)

    (defun bh/toggle-next-task-display ()
      (interactive)
      (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
      (when  (equal major-mode 'org-agenda-mode)
        (org-agenda-redo))
      (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

    (defun bh/skip-stuck-projects ()
      "Skip trees that are not stuck projects"
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (if (bh/is-project-p)
              (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                     (has-next ))
                (save-excursion
                  (forward-line 1)
                  (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                    (unless (member "WAITING" (org-get-tags-at))
                      (setq has-next t))))
                (if has-next
                    nil
                  next-headline)) ; a stuck project, has subtasks but no next task
            nil))))

    (defun bh/skip-non-stuck-projects ()
      p  "Skip trees that are not stuck projects"
      ;; (bh/list-sublevels-for-projects-indented)
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (if (bh/is-project-p)
              (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                     (has-next ))
                (save-excursion
                  (forward-line 1)
                  (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                    (unless (member "WAITING" (org-get-tags-at))
                      (setq has-next t))))
                (if has-next
                    next-headline
                  nil))           ; a stuck project, has subtasks but no next task
            next-headline))))

    (defun bh/skip-non-projects ()
      "Skip trees that are not projects"
      ;; (bh/list-sublevels-for-projects-indented)
      (if (save-excursion (bh/skip-non-stuck-projects))
          (save-restriction
            (widen)
            (let ((subtree-end (save-excursion (org-end-of-subtree t))))
              (cond
               ((bh/is-project-p)
                nil)
               ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
                nil)
               (t
                subtree-end))))
        (save-excursion (org-end-of-subtree t))))

    (defun bh/skip-non-tasks ()
      "Show non-project tasks.
        Skip project and sub-project tasks, habits, and project related tasks."
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (cond
           ((bh/is-task-p)
            nil)
           (t
            next-headline)))))

    (defun bh/skip-project-trees-and-habits ()
      "Skip trees that are projects"
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            subtree-end)
           ((org-is-habit-p)
            subtree-end)
           (t
            nil)))))

    (defun bh/skip-projects-and-habits-and-single-tasks ()
      "Skip trees that are projects, tasks that are habits, single non-project tasks"
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (cond
           ((org-is-habit-p)
            next-headline)
           ((and bh/hide-scheduled-and-waiting-next-tasks
                 (member "WAITING" (org-get-tags-at)))
            next-headline)
           ((bh/is-project-p)
            next-headline)
           ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
            next-headline)
           (t
            nil)))))

    (defun bh/skip-project-tasks-maybe ()
      "Show tasks related to the current restriction.
        When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
        When not restricted, skip project and sub-project tasks, habits, and project related tasks."
      (save-restriction
        (widen)
        (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
               (next-headline (save-excursion (or (outline-next-heading) (point-max))))
               (limit-to-project (marker-buffer org-agenda-restrict-begin)))
          (cond
           ((bh/is-project-p)
            next-headline)
           ((org-is-habit-p)
            subtree-end)
           ((and (not limit-to-project)
                 (bh/is-project-subtree-p))
            subtree-end)
           ((and limit-to-project
                 (bh/is-project-subtree-p)
                 (member (org-get-todo-state) (list "NEXT")))
            subtree-end)
           (t
            nil)))))

    (defun bh/skip-project-tasks ()
      "Show non-project tasks.
        Skip project and sub-project tasks, habits, and project related tasks."
      (save-restriction
        (widen)
        (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            subtree-end)
           ((org-is-habit-p)
            subtree-end)
           ((bh/is-project-subtree-p)
            subtree-end)
           (t
            nil)))))

    (defun bh/skip-non-project-tasks ()
      "Show project tasks.
        Skip project and sub-project tasks, habits, and loose non-project tasks."
      (save-restriction
        (widen)
        (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
               (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (cond
           ((bh/is-project-p)
            next-headline)
           ((org-is-habit-p)
            subtree-end)
           ((and (bh/is-project-subtree-p)
                 (member (org-get-todo-state) (list "NEXT")))
            subtree-end)
           ((not (bh/is-project-subtree-p))
            subtree-end)
           (t
            nil)))))

    (defun bh/skip-projects-and-habits ()
      "Skip trees that are projects and tasks that are habits"
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            subtree-end)
           ((org-is-habit-p)
            subtree-end)
           (t
            nil)))))

    (defun bh/skip-non-subprojects ()
      "Skip trees that are not projects"
      (let ((next-headline (save-excursion (outline-next-heading))))
        (if (bh/is-subproject-p)
            nil
          next-headline)))

    ;;  (autoload 'ambrevar/org-switch-agenda-file "org")
    ;;  (autoload 'ambrevar/org-switch-agenda-file-other-window "org")

    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
    (add-hook 'org-mode-hook 'org-display-inline-images)

    (defun my/org-follow-entry-link ()
      "Follow the defined link for this entry."
      (interactive)
      (if (org-entry-get (point) "LINK")
          (org-open-link-from-string (org-entry-get (point) "LINK"))
        (org-open-at-point)))

    (defun my/org-link-projects (location)
      "Add link properties between the current subtree and the one specified by LOCATION."
      (       (list (let ((org-refile-use-cache nil))
                      (org-refile-get-location "Location"))))
      (let ((link1 (org-store-link nil)) link2)
        (save-window-excursion
          (org-refile 4 nil location)
          (setq link2 (org-store-link nil))
          (org-set-property "LINK" link1))
        (org-set-property "LINK" link2)))

    (defun my/org-insert-heading-for-next-day ()
      "Insert a same-level heading for the following day."
      (interactive)
      (let ((new-date
             (seconds-to-time
              (+ 86400.0
                 (float-time
                  (org-read-date nil 'to-time (elt (org-heading-components) 4)))))))
        (org-insert-heading-after-current)
        (insert (format-time-string "%Y-%m-%d\n\n" new-date))))

    (defun my/org-refile-and-jump ()
      (interactive)
      (if (derived-mode-p 'org-capture-mode)
          (org-capture-refile)
        (call-interactively 'org-refile))
      (org-refile-goto-last-stored))

    (defun sacha/org-entry-wpm ()
      (interactive)
      (save-restriction
        (save-excursion
          (org-narrow-to-subtree)
          (goto-char (point-min))
          (let* ((words (count-words-region (point-min) (point-max)))
                 (minutes (org-clock-sum-current-item))
                 (wpm (/ words minutes)))
            (message "WPM: %d (words: %d, minutes: %d)" wpm words minutes)
            (kill-new (number-to-string wpm))))))

    (defun sacha/timer-go ()
      "Quick keyboard timer."
      (interactive)
      (insert "GO\n")
      (run-with-timer 3 nil (lambda () (insert "\n")))  ; for warmup
      (run-with-timer 15 nil (lambda () ; 12 seconds + the 3-second warmup
                               (let ((col (- (point) (line-beginning-position))))
                                 (insert (format " | %d | \n" col)))
                               )))

    (defun my/org-agenda-for-subtree ()
      (interactive)
      (when (derived-mode-p 'org-agenda-mode) (org-agenda-switch-to))
      (my/org-with-current-task
       (let ((org-agenda-view-columns-initially t))
         (org-agenda nil "t" 'subtree))))

    ;; This variable needs to be set before org.el is loaded.
    (setq org-list-allow-alphabetical t)

    (defun org-repair-property-drawers ()
      "Fix properties drawers in current buffer.
         Ignore non Org buffers."
      (interactive)
      (when (eq major-mode 'org-mode)
        (org-with-wide-buffer
         (goto-char (point-min))
         (let ((case-fold-search t)
               (inline-re (and (featurep 'org-inlinetask)
                               (concat (org-inlinetask-outline-regexp)
                                       "END[ \t]*$"))))
           (org-map-entries
            (lambda ()
              (unless (and inline-re (org-looking-at-p inline-re))
                (save-excursion
                  (let ((end (save-excursion (outline-next-heading) (point))))
                    (forward-line)
                    (when (org-looking-at-p org-planning-line-re) (forward-line))
                    (when (and (< (point) end)
                               (not (org-looking-at-p org-property-drawer-re))
                               (save-excursion
                                 (and (re-search-forward org-property-drawer-re end t)
                                      (eq (org-element-type
                                           (save-match-data (org-element-at-point)))
                                          'drawer))))
                      (insert (delete-and-extract-region
                               (match-beginning 0)
                               (min (1+ (match-end 0)) end)))
                      (unless (bolp) (insert "\n"))))))))))))

    (defvar my/org-agenda-limit-items nil "Number of items to show in agenda to-do views; nil if unlimited.")
    (eval-after-load 'org
      '(defadvice org-agenda-finalize-entries (around sacha activate)
         (if my/org-agenda-limit-items
             (progn
               (setq list (mapcar 'org-agenda-highlight-todo list))
               (setq ad-return-value
                     (subseq list 0 my/org-agenda-limit-items))
               (when org-agenda-before-sorting-filter-function
                 (setq list (delq nil (mapcar org-agenda-before-sorting-filter-function list))))
               (setq ad-return-value
                     (mapconcat 'identity
                                (delq nil
                                      (subseq
                                       (sort list 'org-entries-lessp)
                                       0
                                       my/org-agenda-limit-items))
                                "\n")))
           ad-do-it)))

    (defun my/org-agenda-list-unscheduled (&rest ignore)
      "Create agenda view for tasks that are unscheduled and not done."
      (let* ((org-agenda-todo-ignore-with-date t)
             (org-agenda-overriding-header "List of unscheduled tasks: "))
        (org-agenda-get-todos)))

    (defun my/org-summarize-task-status ()
      "Count number of tasks by status.
        Probably should make this a dblock someday."
      (interactive)
      (let (result)
        (org-map-entries
         (lambda ()
           (let ((todo (elt (org-heading-components) 2)))
             (if todo
                 (if (assoc todo result)
                     (setcdr (assoc todo result)
                             (1+ (cdr (assoc todo result))))
                   (setq result (cons (cons todo 1) result)))))))
        (message "%s" (mapconcat (lambda (x) (format "%s: %d" (car x) (cdr x)))
                                 result "\n"))))

    (defun my/org-days-between (start end)
      "Number of days between START and END (exclusive).
          This includes START but not END."
      (- (calendar-absolute-from-gregorian (org-date-to-gregorian end))
         (calendar-absolute-from-gregorian (org-date-to-gregorian start))))

    (defun my/org-agenda-project-agenda ()
      "Return the project headline and up to `my/org-agenda-limit-items' tasks."
      (save-excursion
        (let* ((marker (org-agenda-new-marker))
               (heading
                (org-agenda-format-item "" (org-get-heading) (org-get-category) nil))
               (org-agenda-restrict t)
               (org-agenda-restrict-begin (point))
               (org-agenda-restrict-end (org-end-of-subtree 'invisible))
               ;; Find the TODO items in this subtree
               (list (org-agenda-get-day-entries (buffer-file-name) (calendar-current-date) :todo)))
          (org-add-props heading
              (list 'face 'defaults
                    'done-face 'org-agenda-done
                    'undone-face 'default
                    'mouse-face 'highlight
                    'org-not-done-regexp org-not-done-regexp
                    'org-todo-regexp org-todo-regexp
                    'org-complex-heading-regexp org-complex-heading-regexp
                    'help-echo
                    (format "mouse-2 or RET jump to org file %s"
                            (abbreviate-file-name
                             (or (buffer-file-name (buffer-base-buffer))
                                 (buffer-name (buffer-base-buffer))))))
            'org-marker marker
            'org-hd-marker marker
            'org-category (org-get-category)
            'type "tagsmatch")
          (concat heading "\n"
                  (org-agenda-finalize-entries list)))))

    (defun my/org-agenda-projects-and-tasks (match)
      "Show TODOs for all `org-agenda-files' headlines matching MATCH."
      (interactive "MString: ")
      (let ((todo-only nil))
        (if org-agenda-overriding-arguments
            (setq todo-only (car org-agenda-overriding-arguments)
                  match (nth 1 org-agenda-overriding-arguments)))
        (let* ((org-tags-match-list-sublevels
                org-tags-match-list-sublevels)
               (completion-ignore-case t)
               rtn rtnall files file pos matcher
               buffer)
          (when (and (stringp match) (not (string-match "\\S-" match)))
            (setq match nil))
          (when match
            (setq matcher (org-make-tags-matcher match)
                  match (car matcher) matcher (cdr matcher)))
          (catch 'exit
            (if org-agenda-sticky
                (setq org-agenda-buffer-name
                      (if (stringp match)
                          (format "*Org Agenda(%s:%s)*"
                                  (or org-keys (or (and todo-only "M") "m")) match)
                        (format "*Org Agenda(%s)*" (or (and todo-only "M") "m")))))
            (org-agenda-prepare (concat "TAGS " match))
            (org-compile-prefix-format 'tags)
            (org-set-sorting-strategy 'tags)
            (setq org-agenda-query-string match)
            (setq org-agenda-redo-command
                  (list 'org-tags-view `(quote ,todo-only)
                        (list 'if 'current-prefix-arg nil `(quote ,org-agenda-query-string))))
            (setq files (org-agenda-files nil 'ifmode)
                  rtnall nil)
            (while (setq file (pop files))
              (catch 'nextfile
                (org-check-agenda-file file)
                (setq buffer (if (file-exists-p file)
                                 (org-get-agenda-file-buffer file)
                               (error "No such file %s" file)))
                (if (not buffer)
                    ;; If file does not exist, error message to agenda
                    (setq rtn (list
                               (format "ORG-AGENDA-ERROR: No such org-file %s" file))
                          rtnall (append rtnall rtn))
                  (with-current-buffer buffer
                    (unless (derived-mode-p 'org-mode)
                      (error "Agenda file %s is not in `org-mode'" file))
                    (save-excursion
                      (save-restriction
                        (if org-agenda-restrict
                            (narrow-to-region org-agenda-restrict-begin
                                              org-agenda-restrict-end)
                          (widen))
                        (setq rtn (org-scan-tags 'my/org-agenda-project-agenda matcher todo-only))
                        (setq rtnall (append rtnall rtn))))))))
            (if org-agenda-overriding-header
                (insert (org-add-props (copy-sequence org-agenda-overriding-header)
                            nil 'face 'org-agenda-structure) "\n")
              (insert "Headlines with TAGS match: ")
              (add-text-properties (point-min) (1- (point))
                                   (list 'face 'org-agenda-structure
                                         'short-heading
                                         (concat "Match: " match)))
              (setq pos (point))
              (insert match "\n")
              (add-text-properties pos (1- (point)) (list 'face 'org-warning))
              (setq pos (point))
              (unless org-agenda-multi
                (insert "Press `C-u r' to search again with new search string\n"))
              (add-text-properties pos (1- (point)) (list 'face 'org-agenda-structure)))
            (org-agenda-mark-header-line (point-min))
            (when rtnall
              (insert (mapconcat 'identity rtnall "\n") ""))
            (goto-char (point-min))
            (or org-agenda-multi (org-agenda-fit-window-to-buffer))
            (add-text-properties (point-min) (point-max)
                                 `(org-agenda-type tags
                                                   org-last-args (,todo-only ,match)
                                                   org-redo-cmd ,org-agenda-redo-command
                                                   org-series-cmd ,org-cmd))
            (org-agenda-finalize)
            (setq buffer-read-only t)))))


    (defun my/org-archive-done-tasks ()
      "Archive finished or cancelled tasks."
      (interactive)
      (org-map-entries
       (lambda ()
         (org-archive-subtree)
         (setq org-map-continue-from (outline-previous-heading)))
       "TODO=\"DONE\"|TODO=\"CANCELED\"" (if (org-before-first-heading-p) 'file 'tree)))


    (defmacro my/org-with-current-task (&rest body)
      "Execute BODY with the point at the subtree of the current task."
      `(if (derived-mode-p 'org-agenda-mode)
           (save-window-excursion
             (org-agenda-switch-to)
             ,@body)
         ,@body))

    (defun my/org-clock-in-and-track ()
      "Start the clock running. Clock into Quantified Awesome."
      (interactive)
      (my/org-with-current-task
       (org-clock-in)
       (call-interactively 'my/org-quantified-track)
       (when (org-entry-get (point) "AUTO")
         (org-open-link-from-string (org-entry-get (point) "AUTO")))))
        ;;;;  (bind-key "!" 'my/org-clock-in-and-track org-agenda-mode-map)

    (defmacro my/with-org-task (&rest body)
      "Run BODY within the current agenda task, clocked task, or cursor task."
      `(cond
        ((derived-mode-p 'org-agenda-mode)
         (let* ((marker (org-get-at-bol 'org-marker))
                (buffer (marker-buffer marker))
                (pos (marker-position marker)))
           (with-current-buffer buffer
             (save-excursion
               (save-restriction
                 (widen)
                 (goto-char pos)
                 ,@body)))))
        ((and (derived-mode-p 'org-mode) (org-at-heading-p)) (save-excursion ,@body))
        ((org-clocking-p) (save-excursion (org-clock-goto) ,@body))
        ((derived-mode-p 'org-mode) ,@body)))

    (defun my/org-quantified-track (&optional category note)
      "Create a tracking record using CATEGORY and NOTE.
          Default to the current task in the agenda, the currently-clocked
          entry, or the current subtree in Org."
      (interactive (list nil nil))
      (unless (and category note)
        (my/with-org-task
         (setq category (or category
                            (org-entry-get-with-inheritance "QUANTIFIED")))
         (cond
          ((null category)
           (setq category (read-string "Category: "))
           (org-set-property "QUANTIFIED" category))
          ((string= category "ask")
           (setq category (read-string "Category: "))))
         (setq note
               (concat
                (if (string= (or (org-entry-get-with-inheritance "QUANTIFIEDQUIET") "") "t")
                    "!private "
                  "")
                (or note (elt (org-heading-components) 4) (read-string "Note: "))))))
      (quantified-track (concat category " | " note)))

    (defun my/org-quick-clock-in-task (location jump)
      "Track and clock in on the specified task.
          If JUMP is non-nil or the function is called with the prefix argument, jump to that location afterwards."
      (interactive (list (save-excursion (my/org-refile-get-location "Location")) current-prefix-arg))
      (when location
        (if jump
            (progn (org-refile 4 nil location) (my/org-clock-in-and-track))
          (save-window-excursion
            (org-refile 4 nil location)
            (my/org-clock-in-and-track)))))

    (require 'quantified nil t)

    (defun my/org-send-to-bottom-of-list ()
      "Send the current line to the bottom of the list."
      (interactive)
      (beginning-of-line)
      (let ((kill-whole-line t))
        (save-excursion
          (kill-line 1)
          (org-end-of-item-list)
          (yank))))

    (add-to-list 'load-path "/home/dgm/.emacs.d/src/org-recipes")

    (defun bh/clock-in-to-next (kw)
      "Switch a task from TODO to NEXT when clocking in.
        Skips capture tasks, projects, and subprojects.
        Switch projects and subprojects from NEXT back to TODO"
      (when (not (and (boundp 'org-capture-mode) org-capture-mode))
        (cond
         ((and (member (org-get-todo-state) (list "TODO"))
               (bh/is-task-p))
          "NEXT")
         ((and (member (org-get-todo-state) (list "NEXT"))
               (bh/is-project-p))
          "TODO"))))

    (defun bh/find-project-task ()
      "Move point to the parent (project) task if any"
      (save-restriction
        (widen)
        (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
          (while (org-up-heading-safe)
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq parent-task (point))))
          (goto-char parent-task)
          parent-task)))

    (defun bh/punch-in (arg)
      "Start continuous clocking and set the default task to the
        selected task.  If no task is selected set the Organization task
        as the default task."
      (interactive "p")
      (setq bh/keep-clock-running t)
      (if (equal major-mode 'org-agenda-mode)
          ;;
          ;; We're in the agenda
          ;;
          (let* ((marker (org-get-at-bol 'org-hd-marker))
                 (tags (org-with-point-at marker (org-get-tags-at))))
            (if (and (eq arg 4) tags)
                (org-agenda-clock-in '(16))
              (bh/clock-in-organization-task-as-default)))
        ;;
        ;; We are not in the agenda
        ;;
        (save-restriction
          (widen)
                                          ; Find the tags on the current task
          (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
              (org-clock-in '(16))
            (bh/clock-in-organization-task-as-default)))))

    (defun bh/punch-out ()
      (interactive)
      (setq bh/keep-clock-running nil)
      (when (org-clock-is-active)
        (org-clock-out))
      (org-agenda-remove-restriction-lock))

    (defun bh/clock-in-default-task ()
      (save-excursion
        (org-with-point-at org-clock-default-task
          (org-clock-in))))

    (defun bh/clock-in-parent-task ()
      "Move point to the parent (project) task if any and clock in"
      (let ((parent-task))
        (save-excursion
          (save-restriction
            (widen)
            (while (and (not parent-task) (org-up-heading-safe))
              (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
                (setq parent-task (point))))
            (if parent-task
                (org-with-point-at parent-task
                  (org-clock-in))
              (when bh/keep-clock-running
                (bh/clock-in-default-task)))))))

    (defvar bh/organization-task-id "eb155a82-92b2-4f25-a3c6-0304591af2f9")

    (defun bh/clock-in-organization-task-as-default ()
      (interactive)
      (org-with-point-at (org-id-find bh/organization-task-id 'marker)
        (org-clock-in '(16))))

    (defun bh/clock-out-maybe ()
      (when (and bh/keep-clock-running
                 (not org-clock-clocking-in)
                 (marker-buffer org-clock-default-task)
                 (not org-clock-resolving-clocks-due-to-idleness))
        (bh/clock-in-parent-task)))

    (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

    (defun bh/mark-next-parent-tasks-todo ()
      "Visit each parent task and change NEXT states to TODO"
      (let ((mystate (or (and (fboundp 'org-state)
                              state)
                         (nth 2 (org-heading-components)))))
        (when mystate
          (save-excursion
            (while (org-up-heading-safe)
              (when (member (nth 2 (org-heading-components)) (list "NEXT"))
                (org-todo "TODO")))))))

    (add-hook 'org-after-todo-state-change-hook 'bh/mark-next-parent-tasks-todo 'append)
    (add-hook 'org-clock-in-hook 'bh/mark-next-parent-tasks-todo 'append)

    (defun bjm/org-headline-to-top ()
      "Move the current org headline to the top of its section"
      (interactive)
      ;; check if we are at the top level
      (let ((lvl (org-current-level)))
        (cond
         ;; above all headlines so nothing to do
         ((not lvl)
          (message "No headline to move"))
         ((= lvl 1)
          ;; if at top level move current tree to go above first headline
          (org-cut-subtree)
          (beginning-of-buffer)
          ;; test if point is now at the first headline and if not then
          ;; move to the first headline
          (unless (looking-at-p "*")
            (org-next-visible-heading 1))
          (org-paste-subtree))
         ((> lvl 1)
          ;; if not at top level then get position of headline level above
          ;; current section and refile to that position. Inspired by
          ;; https://gist.github.com/alphapapa/2cd1f1fc6accff01fec06946844ef5a5
          (let* ((org-reverse-note-order t)
                 (pos (save-excursion
                        (outline-up-heading 1)
                        (point)))
                 (filename (buffer-file-name))
                 (rfloc (list nil filename nil pos)))
            (org-refile nil nil rfloc))))))

    (defun bjm/org-agenda-item-to-top ()
      "Move the current agenda item to the top of the subtree in its file"
      (interactive)
      ;; save buffers to preserve agenda
      (org-save-all-org-buffers)
      ;; switch to buffer for current agenda item
      (org-agenda-switch-to)
      ;; move item to top
      (bjm/org-headline-to-top)
      ;; go back to agenda view
      (switch-to-buffer (other-buffer (current-buffer) 1))
      ;; refresh agenda
      (org-agenda-redo)
      )

    (add-hook 'org-mode-hook
              '(lambda ()
                 (delete '("\\.pdf\\'" . default) org-file-apps)
                 (add-to-list 'org-file-apps '("\\.pdf\\'" . "org-pdfview-open %s"))))

    ;; (eval-after-load "org"
    ;;   '(progn
    ;;      (setcdr (assoc "\\.pdf\\'" org-file-apps) "org-pdfview-open %s")))


    (defun ll/org/agenda/color-headers-with (tag col)
      "Color agenda lines matching TAG with color COL."
      (interactive)
      (goto-char (point-min))
      (while (re-search-forward tag nil t)
        (unless (find-in-line "\\[#[A-Z]\\]")
          (let ((todo-end (or (ll/org/agenda/find-todo-word-end)
                              (point-at-bol)))
                (tags-beginning (or (find-in-line " :" t)
                                    (point-at-eol))))
            (add-text-properties todo-end
                                 tags-beginning
                                 `(face (:foreground ,col)))))))

    ;; Helper definitions
    (setq ll/org/agenda-todo-words
          '("PROJECT"))
    (defun find-in-line (PROJECT &optional beginning count)
      "Find the position of the start of PROJECT in the current line.
        If BEGINNING is non-nil, find the beginning of PROJECT in the current
        line. If COUNT is non-nil, find the COUNT'th occurrence from the left."
      (save-excursion
        (beginning-of-line)
        (let ((found (re-search-forward PROJECT (point-at-eol) t count)))
          (if beginning
              (match-beginning 0)
            found))))
    (defun ll/org/agenda/find-todo-word-end ()
      (reduce (lambda (a b) (or a b))
              (mapcar #'find-in-line ll/org/agenda-todo-words)))


    (defun ll/org/colorize-headings ()
      ;; Color all headings with :pers: #F5f5f5 #Dcdcdc #D3d3d3 #A9a9a9 #696969 #586e75  #657b83 #839496 #93a1a1 #268bd2 (tan originalmente;  #A9a9a9 alternativa)
      (ll/org/agenda/color-headers-with "PROJECT" "#268bd2"))
    ;; and :work: blue
    ;; (ll/org/agenda/color-headers-with ":work:" "blue"))
    (add-hook 'org-agenda-finalize-hook #'ll/org/colorize-headings)

    (defun org-mode-reftex-setup ()
      (load-library "reftex")
      (and (buffer-file-name)
           (file-exists-p (buffer-file-name))
           (reftex-parse-all))
      (define-key org-mode-map (kbd "C-c (") 'reftex-citation))

    (add-hook 'org-mode-hook 'org-mode-reftex-setup)

    (defun org-latex-no-toc (depth)  
      (when depth
        (format "%% Org-mode is exporting headings to %s levels.\n"
                depth)))
    :config
    (message "Org-mode loaded!")

    (when (require 'org-contacts nil t)
      (let ((contacts "/home/dgm/Dropbox/gtd/contacts.org"))
        (when (file-exists-p contacts)
          ;; When used to auto-complete e-mail addresses, the file is automatically
          ;; loaded.  The buffer usually need not be restored by a desktop session.
          (when desktop-save-mode
            (setq desktop-files-not-to-save
                  (concat (substring desktop-files-not-to-save 0 -2) "\\|" (regexp-quote (expand-file-name contacts)) "\\)")))
          (setq org-contacts-files (list contacts)))))

    (autoload 'ambrevar/org-switch-agenda-file "org")
    (autoload 'ambrevar/org-switch-agenda-file-other-window "org")

    (eval-after-load "org"
      '(progn
         (setcdr (assoc "\\.pdf\\'" org-file-apps) "org-pdfview-open %s")))

    (require 'ox-md)
    (require 'ob-latex)
    (require 'org-protocol)
    (require 'org-id)
    ;;    (require 'org-ref-wos)
    ;;    (require 'org-ref-scopus)
    ;;    (require 'org-ref-pubmed)
    (require 'org-agenda)
    (require 'holidays)
    (require 'imenu)
    (require 'org-clock)
    (require 'org-wiki) ;; not reconized in Ubuntu
    (require 'org-recipes) ;; not recognized in Ubuntu
    (require 'org-query)
    (require 'org-query-gtd)
    (require 'org-pdfview)
    (require 'graph)
    (require 'org-graph-view)
    (require 'bind-key)
    ;; (require 'org-bibtex)  ;; for bib files written in Org-mode
    (require 'ox-tufte-latex)

    ;; Required by tufted org mode (https://github.com/tsdye/tufte-org-mode) 
    (require 'ox-extra)
    (ox-extras-activate '(latex-header-blocks ignore-headlines))
    (require 'ox-tufte-latex)
    (require 'ox-latex)
    (require 'ox-beamer)

    (unbind-key "C-," org-mode-map)
    (unbind-key "C-'" org-mode-map)

    (org-clock-persistence-insinuate)

    (defun bh/clock-in-to-next (kw)
      "Switch a task from TODO to NEXT when clocking in.
        Skips capture tasks, projects, and subprojects.
        Switch projects and subprojects from NEXT back to TODO"
      (when (not (and (boundp 'org-capture-mode) org-capture-mode))
        (cond
         ((and (member (org-get-todo-state) (list "TODO"))
               (bh/is-task-p))
          "NEXT")
         ((and (member (org-get-todo-state) (list "NEXT"))
               (bh/is-project-p))
          "TODO"))))

    (setq org-publish-project-alist
          '(("org"
             :base-directory "~/.emacs.d/"
             :publishing-directory "~/documents/websites/esk/"
             :publishing-function org-html-publish-to-html
             :auto-sitemap t
             :sitemap-filename "index.org"
             :sitemap-title "Emacs Starter Kit for the Social Sciences: Documentation"
             :section-numbers t
             ;;:table-of-contents t
             :html-head "<link rel=\"stylesheet\"
                           href=\"http://kieranhealy.org/css/org.css\"
                           type=\"text/css\"/>")))

    (progn
      (setq org-expiry-inactive-timestamps t)
      (setq org-clock-idle-time nil)
      (setq org-log-done 'time) ;; explained here: https://www.gnu.org/software/emacs/manual/html_node/org/Closing-items.html
      (setq org-clock-continuously nil)
      (setq org-clock-persist t) ;; Save the running clock and all clock history when exiting Emacs, load it on startup
      (setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
      (setq org-clock-in-resume t) ;; t to Resume clocking task on clock-in if the clock is open
      ;; Do not prompt to resume an active clock
      (setq org-clock-persist-query-resume nil)
      (setq org-show-notification-handler 'message)
      (setq org-time-stamp-rounding-minutes (quote (0 5)))
      (setq org-clock-report-include-clocking-task t))


    (setq org-startup-folded 'showeverything
          org-export-with-section-numbers nil
          org-html-include-timestamps nil
          org-export-with-sub-superscripts nil
          org-export-with-toc nil
          org-html-toplevel-hlevel 2
          org-export-htmlize-output-type 'css
          org-export-html-coding-system 'utf-8-unix
          org-export-coding-system 'utf-8
          org-html-viewport nil
          org-export-with-smart-quotes t
          org-html-postamble nil
          org-src-fontify-natively t
          org-src-window-setup 'current-window
          org-src-strip-leading-and-trailing-blank-lines t
          org-src-preserve-indentation t
          org-src-tab-acts-natively t
          org-adapt-indentation nil
          org-archive-location "/home/dgm/Dropbox/gtd/archive.org::From %s"
          org-mobile-inbox-for-pull "~/documents/dropbox/org/fromMobile.org"
          org-wiki-location "~/documents/dropbox/notes/org-wiki"
          org-latex-prefer-user-labels t
          org-agenda-window-setup 'current-window
          org-agenda-skip-scheduled-if-done t
          org-agenda-skip-deadline-if-done t
          calendar-holidays holiday-other-holidays
          org-agenda-include-diary t
          calendar-week-start-day 1
          org-refile-allow-creating-parent-nodes 'confirm
          org-refile-use-outline-path t
          org-outline-path-complete-in-steps nil
          org-imenu-depth 5
          org-goto-interface 'outline-path-completion
          org-goto-max-level 10
          org-cycle-include-plain-lists t
          org-yank-adjusted-subtrees t
          org-reverse-note-order t
          org-log-into-drawer "LOGBOOK"
          org-clock-into-drawer t
          org-enforce-todo-dependencies t
          org-hide-leading-stars nil
          org-cycle-separator-lines 0
          org-insert-heading-respect-content nil
          org-table-export-default-format "orgtbl-to-csv"
          org-log-state-notes-insert-after-drawers nil
          org-clock-sound "~/inconcv.wav"
          require-final-newline t
          org-agenda-persistent-filter t
          org-tags-match-list-sublevels t
          org-agenda-skip-additional-timestamps-same-entry t
          org-src-preserve-indentation nil
          org-edit-src-contentqq-indentation 0
          org-use-sub-superscripts nil
          org-list-indent-offset 1
          org-hierarchical-todo-statistics nil
          org-fast-tag-selection-single-key 'expert)

    (setq org-catch-invisible-edits 'show-and-error)
    (setq org-recipes-file-list '("~/documents/dropbox/notes/org-recipes/recipes.org" "~/documents/dropbox/notes/cheatSheets/emacsCheatSheet.org"))

    (setq org-agenda-log-mode-items (quote (closed state)))
    (setq org-agenda-sticky t)

    (setq org-blank-before-new-entry (quote ((heading)
                                             (plain-list-item . auto))))

    (setq org-show-following-heading t)
    (setq org-show-hierarchy-above t)
    (setq org-show-siblings (quote ((default))))

    (setq org-special-ctrl-a/e t)
    (setq org-special-ctrl-k t)
    (setq org-yank-adjusted-subtrees t)

    (setq org-todo-keywords
          (quote ((sequence "NEXT(n)" "TODO(t)" "STARTED(s@/!)" "PROJECT(p)" "PHONE(@/!)" "|" "DONE(d@/!)")
                  (sequence "WAITING(w@/!)" "|" "DEFERRED(@/!)" "DELEGATED(@/!)" "CANCELED(c@/!)"))))


    (setq org-todo-keyword-faces
          '(("TODO"      . (:foreground "SeaGreen" :weight bold))  ;; "#859900"
            ("NEXT"      . (:foreground "#d33682" :weight bold))
            ("PHONE"     . (:foreground "#859900" :weight bold))
            ("STARTED"   . (:foreground "#cb4b16" :weight bold))
            ("WAITING"   . (:foreground "#b58900" :weight bold))
            ("DEFERRED"   . (:foreground "#b58900" :weight bold))
            ("DELEGATED"   . (:foreground "#b58900" :weight bold))
            ("DONE"      . (:foreground "#268bd2" :weight bold))
            ("PROJECT"   . (:foreground "#6c71c4" :weight bold))
            ("CANCELED"  . (:foreground "#00629D" :weight bold))))

    (setq bh/keep-clock-running nil)

    (setq calendar-holidays  ;; holiday-other-holidays
          '((holiday-fixed 1 1 "Año Nuevo / New Year's Day")
            (holiday-fixed 1 6 "Día de Reyes / Epiphany")
            (holiday-fixed 2 14 "Valentine's Day")
            ;;          (holiday-fixed 3 5 "Martes de Carnaval")
            ;;          (holiday-fixed 3 6 "Miércoles de Ceniza")
            (holiday-easter-etc -47 "Martes de Carnaval / Shrove Tuesday")
            (holiday-easter-etc -46 "Miércoles de Ceniza / Ash Friday")
            ;; (holiday-sexp '(calendar-nth-named-day 1 1 3 year 19) "Día de San José") ;; en 2020 este esta mal
            (holiday-easter-etc -7 "Domingo de Ramos / Palm Sunday")
            (holiday-easter-etc -3 "Jueves Santo / Maundy Thursday")
            (holiday-easter-etc -2 "Viernes Santo / Good Friday")
            (holiday-easter-etc 0 "Domingo de Resurrección o Pascua / Easter Sunday")
            (holiday-easter-etc +1 "Lunes de Pascua")
            (holiday-fixed 5 1 "Día Internacional del Trabajo")
            (holiday-fixed 5 2 "Día de la Comunidad de Madrid")
            (holiday-fixed 5 6 "Día de la Madre")
            (holiday-fixed 5 15 "Día de San Isidro")
            (holiday-fixed 5 31 "Corpus Christi (Madrid)")
            ;;  (holiday-easter-etc +43 "Día de la Ascención")
            ;;  (holiday-easter-etc +64 "Corpus Christi")
            (holiday-easter-etc 60 "Corpus Christi") ;; en http://lists.gnu.org/archive/html/emacs-devel/2004-07/msg00494.html
            (holiday-fixed 10 12 "Día de la Hispanidad")
            (holiday-fixed 11 1  "Todos los santos")
            (holiday-fixed 11 9  "Día de la Almudena")
            (holiday-fixed 12 25 "Natividad del Señor")
            (holiday-fixed 12 6 "Día de la Constitución")
            (holiday-fixed 12 8 "Inmaculada Concepción") ;; en 2018. En 2019 se trasladará al lunes 9. Ojo! Cambiar con el nuevo agno!!
            ))

    (add-to-list
     'file-coding-system-alist '("\\.org" . utf-8-unix))

    (setq org-use-speed-commands t)

    (setq org-M-RET-may-split-line '((default)))

    (add-to-list 'org-src-lang-modes
                 '("r" . ess-mode))

    (add-to-list 'org-src-lang-modes
                 '("stata" . ess-mode))

    (unless (boundp 'Info-directory-list)
      (setq Info-directory-list Info-default-directory-list))

    (setq Info-directory-list
          (cons (expand-file-name
                 "doc"
                 (expand-file-name
                  "org"
                  (expand-file-name "src" dotfiles-dir)))
                Info-directory-list))

    (setq org-ellipsis " ⤵") ;; ⤵ ↴ ⬎ ⤷ ⬎
    (set-face-attribute 'org-ellipsis nil :underline nil)

    (setq org-tag-alist '((:startgroup)
                          ("@errands"  . ?e)
                          ("@home"     . ?h)
                          ("@uned"     . ?u)
                          (:endgroup)
                          ("project"   . ?p)
                          ("browsing"  . ?b)
                          ("drill"     . ?d)
                          ("habit"     . ?a)
                          ("laptop"    . ?l)
                          ("mailing"   . ?m)
                          ("ordenador" . ?o)
                          ("reading"   . ?r)
                          ("salud"     . ?s)
                          ("tel"       . ?t)
                          ("writing"   . ?w)
                          ("FLAGGED"   . ??)))

    (setq org-directory "/home/dgm/Dropbox/gtd")
    ;; Set to <your Dropbox root directory>/MobileOrg.

    (setq org-mobile-directory "~/documents/dropbox/mobileorg")
    ;; Set to the files (or directory of files) you want sync'd
    ;;   (setq org-agenda-files (quote ("/home/dgm/Dropbox/gtd")))  ;; this is the original line by kieran healy.

    ;; organization by: https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html
    ;; Org agenda view scans these files and collects all the heading with a TODO (or related) keyword
    ;; setq org-agenda-files
    (custom-set-variables
     '(org-agenda-files (list "/home/dgm/Dropbox/gtd/inbox.org"
                              "/home/dgm/Dropbox/gtd/gtd.org"
                              "/home/dgm/Dropbox/gtd/journal.org"
                              "/home/dgm/Dropbox/gtd/habits.org"
                              "/home/dgm/Dropbox/gtd/tickler.org"
                              "/home/dgm/Dropbox/gtd/calendar.org"
                              "/home/dgm/Dropbox/gtd/divorcio_gtd.org"
                              "/home/dgm/documents/proyectos/mutual-stata/gtd/mutual_gtd.org"
                              "/home/dgm/documents/proyectos/tiec/gtd/tiec-gtd.org"
                              "/home/dgm/documents/proyectos/caixa2019-bartik/gtd/bartik-gtd.org"
                              "/home/dgm/documents/proyectos/iat_methods/iat_methods.org"
                       "/home/dgm/documents/proyectos/curso-ayuntamiento-madrid/gtd/curso-disenoInvestigacionI.org"
                              "/home/dgm/documents/My-Academic-Stuff/acreditacion-titular/gtd/titularidad-gtd.org"
                              "/home/dgm/documents/proyectos/laBussola/laBussola_gtd.org")))

    (setcdr (assoc "\\.pdf\\'" org-file-apps) 'emacs)

    (custom-set-variables
     '(org-refile-targets '(("/home/dgm/Dropbox/gtd/gtd.org" :maxlevel . 2)
                            ("/home/dgm/documents/proyectos/mtj/mtj_gtd.org" :level . 2)
                            ("/home/dgm/documents/proyectos/tiec/gtd/tiec-gtd.org" :level . 2)
                            ("/home/dgm/documents/proyectos/laBussola/laBussola_gtd.org" :level . 2)
                            ("/home/dgm/documents/proyectos/iat_methods/iat_methods.org" :level . 2)
                            ("/home/dgm/documents/proyectos/mutual-stata/gtd/mutual_gtd.org" :maxlevel . 2)
                            ("/home/dgm/documents/proyectos/caixa2019-bartik/gtd/bartik-gtd.org" :maxlevel . 2)
      ("/home/dgm/documents/proyectos/curso-ayuntamiento-madrid/gtd/curso-disenoInvestigacionI.org" :maxlevel . 2)
      ("/home/dgm/documents/My-Academic-Stuff/acreditacion-titular/gtd/titularidad-gtd.org" :maxlevel . 2)
                            ("/home/dgm/Dropbox/gtd/divorcio_gtd.org" :level . 2)
                            ("/home/dgm/Dropbox/gtd/someday.org" :maxlevel . 2)
                            ("/home/dgm/Dropbox/gtd/inbox.org" :maxlevel . 1)
                            ("/home/dgm/Dropbox/gtd/notes.org" :maxlevel . 2)
                            ("/home/dgm/Dropbox/gtd/habits.org" :maxlevel . 2)
                            ("/home/dgm/Dropbox/gtd/tickler.org" :maxlevel . 2))))

    (setq org-agenda-clockreport-parameter-plist
          '(:link t :maxlevel 6 :fileskip0 t :compact t :narrow 80 :score 0))


    (setq org-global-properties (quote (("Effort_ALL" . "0:05 0:10 0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                        ("STYLE_ALL" . "habit"))))

    ;; Set default column view headings: Task Priority Effort Clock_Summary
    (setq org-columns-default-format "%50ITEM(Task) %15TAGS(Context) %7TODO(State) %20SCHEDULED(Scheduled) %6Effort(Effort){:} %CLOCKSUM_T(Tday'sHrs){:} %CLOCKSUM(TotalHrs){:}")

    ;; Show lot of clocking history so it's easy to pick items off the `C-c I` list
    (setq org-clock-history-length 23)

    (defun eos/org-clock-in ()
      (interactive)
      (org-clock-in '(4)))

    ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks
    ;; with 0:00 duration
    (setq org-clock-out-remove-zero-time-clocks t)
    ;; Clock out when moving task to a done state
    (setq org-clock-out-when-done t)
    ;; Enable auto clock resolution for finding open clocks
    (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
    ;; use pretty things for the clocktable
    (setq org-pretty-entities t)

    (setq org-use-effective-time t)

    (defun my/org-use-speed-commands-for-headings-and-lists ()
      "Activate speed commands on list items too."
      (or (and (looking-at org-outline-regexp) (looking-back "^\**"))
          (save-excursion (and (looking-at (org-item-re)) (looking-back "^[ \t]*")))))

    (setq org-use-speed-commands 'my/org-use-speed-commands-for-headings-and-lists)

    (setq org-agenda-clock-consistency-checks
          (quote (:max-duration "4:00"
                                :min-duration 0
                                :max-gap 0
                                :gap-ok-around ("4:00"))))

    (setq org-modules '(org-drill
                        org-protocol
                        org-eww
                        org-habit
                        org-clock))

    (eval-after-load 'org
      '(org-load-modules-maybe t))

    (setq org-drill-add-random-noise-to-intervals-p t)
    (setq org-drill-cram-hours 0) ;; by default 12

    (setq org-habit-preceding-days 30
          org-habit-following-days 7
          org-habit-graph-column 70)
    (setq org-habit-show-habits nil)
    (setq org-habit-show-habits-only-for-today t) ;; so that when I call it, I get it only for today
    (setq org-habit-show-all-today nil)

    (setq org-track-ordered-property-with-tag t)
    (setq org-agenda-dim-blocked-tasks nil) ; t originally

    (setq org-stuck-projects
          '("+PROJECT-MAYBE-DONE"
            ("TODO")
            nil
            "\\<IGNORE\\>"))

    (setq org-agenda-span 'week) ;; today's date is shown by default
    (setq org-agenda-tags-column -100) ; take advantage of the screen width
    (setq org-agenda-inhibit-startup t)
    (setq org-agenda-use-tag-inheritance t)
    (setq org-agenda-show-log t)

    (add-to-list 'org-speed-commands-user '("a" call-interactively 'org-archive-subtree-default))


    (setq org-list-demote-modify-bullet (quote (("-" . "+")
                                                ("+" . "*")
                                                ("*" . "-")
                                                ("1." . "-")
                                                ("1)" . "-")
                                                ("A)" . "-")
                                                ("B)" . "-")
                                                ("a)" . "-")
                                                ("b)" . "-")
                                                ("A." . "-")
                                                ("B." . "-")
                                                ("a." . "-")
                                                ("b." . "-"))))

    (setq org-time-clocksum-format
          '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))

    (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

    (run-at-time nil (* 15 60) 'org-save-all-org-buffers)

    (setq org-log-note-headings '((done        . "CLOSING NOTE %t")
                                  (state       . "State %-12s from %-12S %t")
                                  (note        . "Note taken on %t")
                                  (reschedule  . "Schedule changed on %t: %S -> %s")
                                  (delschedule . "Not scheduled, was %S on %t")
                                  (redeadline  . "Deadline changed on %t: %S -> %s")
                                  (deldeadline . "Removed deadline, was %S on %t")
                                  (refile      . "Refiled on %t")
                                  (clock-out   . "")))

    ;; Add LaTeX to a list of languages that raise noweb-type errors.
    (add-to-list 'org-babel-noweb-error-langs "latex")

    ;; Don't ask for confirmation on every =C-c C-c= code-block compile. 
    (setq org-confirm-babel-evaluate nil)

    (setq org-latex-format-toc-function 'org-latex-no-toc)

    (setq org-latex-default-packages-alist nil)     

    (add-to-list 'org-latex-classes
                 '("memarticle"
                   "\\documentclass{memoir}\n"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes
                 '("membook"
                   "\\documentclass{memoir}\n"
                   ("\\chapter{%s}" . "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

    (setq org-latex-default-packages-alist nil)     

    ;; fix color handling in org-preview-latex-fragment
    (let ((dvipng--plist (alist-get 'dvipng org-preview-latex-process-alist)))
      (plist-put dvipng--plist :use-xcolor t)
      (plist-put dvipng--plist :image-converter '("dvipng -D %D -T tight -o %O %f")))

    ;; bigger latex fragment
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 4))
    (setq org-format-latex-options (plist-put org-format-latex-options :foreground "grey"))
    ;;(setq org-format-latex-options (plist-put org-format-latex-options :html-foreground "grey"))
    ;;(setq org-format-latex-options (plist-put org-format-latex-options :background "grey"))

    (customize-set-value 'org-latex-with-hyperref nil)
    )

#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24690 52729 567075 571000) :init (24690 52729 566626 674000) :config (24690 52729 566609 259000) :config-secs (0 0 60989 602000) :init-secs (0 0 95120 619000) :use-package-secs (0 0 95764 786000)))


** Export Settings and Helpful Packages
*** Pandoc 

Following Daniel Mai we add the exporter for Pandoc as well (remember to install Pandoc on your system!). Pandoc converts between a huge number of different file formats.

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package ox-pandoc
    :after org)

#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23561 372 145757 865000) :init (23561 372 145716 931000) :init-secs (0 0 1074 531000) :use-package-secs (0 0 1398 100000) :config (23561 372 145174 215000) :config-secs (0 0 33 101000)))

*** =twbs= or html made cool 

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package ox-twbs
    :after org)

#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23561 790 48242 633000) :init (23561 790 48205 768000) :config (23561 790 47836 935000) :config-secs (0 0 26 942000) :init-secs (0 0 707 567000) :use-package-secs (0 0 940 130000)))

*** =ox-tufte=: exporter to HTML
This is an export backend for Org-mode that exports buffers to HTML that
is compatible with Tufte CSS - https://edwardtufte.github.io/tufte-css/ out of
the box (meaning no CSS modifications needed).

URL: 
https://github.com/janruehling/ox-tufte

It’s important that you download =tufte css= and place it on your server (with the fonts) and then reference it from your org-mode document by adding a header such as:

#+BEGIN_EXAMPLE
#+HTML_HEAD: <link rel="stylesheet" href="/css/tufte.css" type="text/css" />
#+END_EXAMPLE


#+begin_src emacs-lisp :tangle yes

  ;; (if (file-exists-p "/home/dgm/.emacs.d/src/ox-tufte")
  ;;     (progn
  ;;       (add-to-list 'load-path "/home/dgm/.emacs.d/src/ox-tufte")
  ;;       (require 'ox-tufte))

    (use-package ox-tufte
      :after org
      :init (require 'ox-tufte))

   ;; (require 'ox-tufte)

#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24610 64083 998640 754000) :init (24610 64083 998595 634000) :config (24610 64083 998261 649000) :config-secs (0 0 14 995000) :init-secs (0 0 672 477000) :use-package-secs (0 0 856 314000)))


*** Org-protocol

Org-protocol from https://caolan.org/dotfiles/emacs.html#orgd96aeb0
Use org-protocol to trigger org-mode interactions from external programs. Useful for capturing links from Firefox using the org-mode-capture add-on.

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package org-protocol
    :after org
    :ensure nil)

#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24608 7033 37458 737000) :init (24608 7033 37418 37000) :config (24608 7033 36989 75000) :config-secs (0 0 15 171000) :init-secs (0 0 989 945000) :use-package-secs (0 0 1126 656000)))


** More on syntax highlighting 

We'll need the =htmlize= package for syntax highlighting of code blocks (in Caolan's and Uncle Dave's dot files).

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package htmlize
    :after org)

#+END_SRC

#+RESULTS:


** =org-ref= 

=org-ref= from https://github.com/jkitchin/org-ref and the Reddit workflow from https://www.reddit.com/r/emacs/comments/4gudyw/help_me_with_my_orgmode_workflow_for_notetaking/

  (require 'org-id)
  (require 'org-ref-wos)
  (require 'org-ref-scopus)
  (require 'org-ref-pubmed)
;; (reftex-default-bibliography '("~/documents/bibs/socbib.bib"))


#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-ref
    :after org
    :custom
    (org-ref-bibliography-notes "~/documents/elibrary/org/references/notes.org")
    (org-ref-default-bibliography '("~/documents/bibs/socbib.bib"))
    (org-ref-pdf-directory "~/documents/elibrary/org/references/pdfs") ;; keep the final slash off
    (org-ref-notes-directory "~/documents/elibrary/org/references")
    :init
    (defun my/org-ref-open-pdf-at-point ()
      "Open the pdf for bibtex key under point if it exists."
      (interactive)
      (let* ((results (org-ref-get-bibtex-key-and-file))
             (key (car results))
             (pdf-file (concat org-ref-pdf-directory
                               (org-ref-get-pdf-filename
                                (org-ref-get-mendeley-filename key)))))
        (if (file-exists-p pdf-file)
            (find-file pdf-file)
          (message "No pdf found for %s" pdf-file))))
    :config
    (setq org-ref-completion-library 'org-ref-helm-bibtex)
    (setq org-ref-default-citation-link "autocite")

    ;; If you use helm-bibtex and would like pre/post text support enabled, you can add org-ref-format-citation to bibtex-completion-format-citation-functions:
    (setf (cdr (assoc 'org-mode bibtex-completion-format-citation-functions)) 'org-ref-format-citation))

  (with-eval-after-load 'org
    (require 'org-ref)
    ;; (require 'ox-bibtex)
    )

  ;; (add-to-list 'org-ref-bibtex-completion-actions '("Edit notes" . helm-bibtex-edit-notes))
#+END_SRC

#+RESULTS:
: org-ref

*** DEFERRED Pending issues
CLOSED: [2021-01-11 Mon 12:04]
:LOGBOOK:
- State "DEFERRED"   from              [2021-01-11 Mon 12:04] \\
  Only autocite work in an org-ref way.
  
  Also, to make biblatex links work, I need to C-c C-c on the final bit of code on this file, the one related to =org-link-set-parameters= (heading <Export Org-ref citations to Latex>).
:END:


** Pre/post text support from Kitchin
- From: https://github.com/jkitchin/org-ref/blob/master/org-ref.org
org-ref has basic and limited support for pre/post text in citations. You can get pre/post text by using a description in a cite link, with pre/post text separated by ::. For example, See page 20::, for example. It is not easy (maybe not possible) to extend this for the humanities style of citations (e.g. harvard) with nested pre/post text on multiple citations. If anyone knows how to do it, pull requests are welcome! There is an ongoing effort in org-mode for a new citation syntax that may make this more feasible.

If you use helm-bibtex and would like pre/post text support enabled, you can add org-ref-format-citation to bibtex-completion-format-citation-functions:

Tangled to no until I understand what is this Pre/Post thingy.

#+BEGIN_SRC emacs-lisp :tangle no
  ;;(setf (cdr (assoc 'org-mode bibtex-completion-format-citation-functions)) 'org-ref-format-citation)
#+END_SRC

#+RESULTS:
: org-ref-format-citation

*** My (DGM) org-agenda-custom-commands customization
:PROPERTIES:
:ID:       9b247ff5-7e32-4c1c-9a9b-d0f46761f52f
:END:

This I don't really use but could be useful in future:

#+BEGIN_EXAMPLE
          ("ps" "All Tasks in Some Project by TODO State "
           ((agenda)
            ;;(tags-todo "project")
            (tags "project" ((org-tags-match-list-sublevels nil)))
            (tags "+project+TODO=\"WAITING\"")
            (tags "+project+TODO=\"NEXT\"")
            (tags "+project+TODO=\"TODO\"")
            ;;(tags "+project+TODO=\"DONE\"")
            ))
#+END_EXAMPLE


#+BEGIN_SRC emacs-lisp :tangle yes
    (setq org-agenda-block-separator "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")

    (setq org-agenda-custom-commands
          '(("x" "Export Day Agenda" agenda ""
             ((ps-number-of-columns 2)
              (ps-landscape-mode t)
              (org-agenda-prefix-format " [ ] ")
              (org-agenda-with-colors nil)
              (org-agenda-remove-tags t))
             nil
             ("~/Dropbox/gtd/theDayAgenda.pdf"))   ;; no se' por qu'e no se graba automaticamente este file. Da igual poner NIl antes que no (ver abajo)
            ("X" "Export Week Agenda" agenda ""
             ((ps-number-of-columns 2)
              (ps-landscape-mode t)
              (org-agenda-prefix-format " [ ] ")
              (org-agenda-with-colors nil)
              (org-agenda-remove-tags t)
              (org-agenda-start-on-weekday nil)
              (org-agenda-span 7))
             ("~/Dropbox/gtd/theWeekAgenda.pdf")) ;; no se' por qu'e no se graba automaticamente este file
            ("d" "Daily Review"
             ((agenda "" ((org-agenda-span 1))) ;; review upcoming deadlines and appointments
              ;; type "l" in the agenda to review logged items
              ;;            (stuck "") ;; review stuck projects as designated by org-stuck-projects
              ;;(todo "STARTED") ;; review  actions that have started
              (todo "WAITING" ((org-agenda-sorting-strategy '(category-up)))) ;;This way tasks of the same category are together and sorted alphabetically
              (todo "NEXT" ((org-agenda-sorting-strategy '(category-up)))) ;; review next actions
              (todo "TODO" ((org-agenda-sorting-strategy '(category-up)))) ;; review pending actions waiting for "next actiosn" to be fulfilled
              )) ;;
            ("w" "Weekly Review"
             ((agenda "" ((org-agenda-span 7)))  ;; review upcoming deadlines and appointments
              ;; old code ((org-agenda-fortnight-view)))
              ;; type "l" in the agenda to review logged items
              ;;            (stuck "") ;; review stuck projects as designated by org-stuck-projects
              ;;(todo "STARTED") ;; review  actions that have started
              (todo "WAITING" ((org-agenda-sorting-strategy '(category-up)))) ;; review waiting items
              (todo "NEXT" ((org-agenda-sorting-strategy '(category-up)))) ;; review next actions
              (todo "TODO" ((org-agenda-sorting-strategy '(category-up)))) ;; review pending actions waiting for "next actiosn" to be fulfilled
              ))
            ("f" "Fortnight Review"
             ((agenda "" ((org-agenda-span 14))) ;; review upcoming deadlines and appointments
              ;; type "l" in the agenda to review logged items
              ;;            (stuck "") ;; review stuck projects as designated by org-stuck-projects
              ;;(todo "STARTED") ;; review  actions that have started
              (todo "WAITING" ((org-agenda-sorting-strategy '(category-up))))    ;; review waiting items
              (todo "NEXT" ((org-agenda-sorting-strategy '(category-up)))) ;; review next actions
              (todo "TODO" ((org-agenda-sorting-strategy '(category-up)))) ;; review pending actions waiting for "next actiosn" to be fulfilled
              ))
            ("r" "Monthly Review"
             ((agenda "" ((org-agenda-span 31))) ;; review upcoming deadlines and appointments
              ;; type "l" in the agenda to review logged items
              ;;            (stuck "") ;; review stuck projects as designated by org-stuck-projects
              ;;(todo "STARTED") ;; review  actions that have started
              (todo "WAITING" ((org-agenda-sorting-strategy '(category-up))))      ;; review waiting items
              (todo "NEXT" ((org-agenda-sorting-strategy '(category-up)))) ;; review next actions
              (todo "TODO" ((org-agenda-sorting-strategy '(category-up)))) ;; review pending actions waiting for "next actiosn" to be fulfilled
              ))
            ("y" "Yearly Review"
             ((agenda "" ((org-agenda-span (quote year))))))
            ("p" "Tasks Grouped by Project"
             ((agenda "" (
                          (org-agenda-span 7)
                          (org-agenda-start-on-weekday nil)
                          ))
  ;;            (tags "project"
  ;;                  ((org-tags-match-list-sublevels nil)
  ;;                   (org-agenda-overriding-header "                                          LIST OF PROJECTS                                          "))
  ;;                  ) ;; TODO include condition: when TODO state changed from PROJECT to DONE, do not list here
              (tags-todo "+project+CATEGORY=\"uned\""
                         ((org-agenda-overriding-header "                                                UNED                                                ")
                          (org-agenda-cmp-user-defined 'org-sort-agenda-items-todo)))
              (tags-todo "+project+CATEGORY=\"research\""
                         ((org-agenda-overriding-header "                                               RESEARCH                                             ")
                          (org-agenda-cmp-user-defined 'org-sort-agenda-items-todo)))
              (tags-todo "+project+CATEGORY=\"academico\""
                         ((org-agenda-overriding-header "                                               ACADEMICO                                            ")
                          (org-agenda-cmp-user-defined 'org-sort-agenda-items-todo)))
              (tags-todo "+project+CATEGORY=\"work-hunt\""
                         ((org-agenda-overriding-header "                                               WORK-HUNT                                            ")
                          (org-agenda-cmp-user-defined 'org-sort-agenda-items-todo)))
              (tags-todo "+project+CATEGORY=\"computing\""
                         ((org-agenda-overriding-header "                                               COMPUTING                                            ")
                          (org-agenda-cmp-user-defined 'org-sort-agenda-items-todo)))
              (tags-todo "+project+CATEGORY=\"personal\""
                         ((org-agenda-overriding-header "                                               PERSONAL                                             ")
                          (org-agenda-cmp-user-defined 'org-sort-agenda-items-todo)))
              (tags-todo "+project+CATEGORY=\"git\"|+project+CATEGORY=\"linux\"|+project+CATEGORY=\"learning\""
                         ((org-agenda-overriding-header "                                               LEARNING                                             ")
                          (org-agenda-cmp-user-defined 'org-sort-agenda-items-todo)))
              (tags-todo "-project+TODO=\"TODO\""
                         ((org-agenda-overriding-header "                                               ORPHAN TODOs                                         ")
                          ))
              (tags-todo "+project+CATEGORY=\"emacs\""
                         ((org-agenda-overriding-header "                                               EMACS                                                ")
                          (org-agenda-cmp-user-defined 'org-sort-agenda-items-todo)))
              ))
             ("o" "Office and home agenda"
             ((agenda "" ((org-agenda-span 1))) 
              (tags-todo "@home|@uned")
              ;;            (tags "project+CATEGORY=\"elephants\"")
              ;;            (tags "review" ((org-agenda-files '("~/org/circuspeanuts.org"))))
              ;; limits the tag search to the file circuspeanuts.org
              ;;            (todo "WAITING")
              )
             ((org-agenda-compact-blocks t))) ;; options set here apply to the entire block
            ;; ...other commands here
            ("l" "Timeline"
             ((agenda
               ""
               (;; (org-agenda-overriding-header "========================================== Scheduled Tasks ==========================================")
                (org-agenda-span 90)
                (org-agenda-prefix-format '((agenda . " %1c %?-12t% s")))
                ;;(org-agenda-skip-function '(lambda()
                ;;                  ((bh/skip-habits))))
                ))
              (todo
               "TODO"
               ((org-agenda-overriding-header "                                         UNSCHEDULED TODOs                                          ")
                (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                (org-agenda-prefix-format '((todo . " %1c ")))
                (org-agenda-sorting-strategy '(category-up))
                )
               ))
             )
             ("z" "Done or Canceled Tasks to Be Archived"
             ((todo "DONE|CANCELED"))
             ((org-agenda-compact-blocks t)))))

    (defun my-org-agenda-skip-all-siblings-but-first ()
      "Skip all but the first non-done entry."
      (let (should-skip-entry)
        (unless (org-current-is-todo)
          (setq should-skip-entry t))
        (save-excursion
          (while (and (not should-skip-entry) (org-goto-sibling t))
            (when (org-current-is-todo)
              (setq should-skip-entry t))))
        (when should-skip-entry
          (or (outline-next-heading)
              (goto-char (point-max))))))

    (defun org-current-is-todo ()
      (string= "TODO" (org-get-todo-state)))

    ;; from https://emacs.stackexchange.com/questions/9585/org-how-to-sort-headings-by-todo-and-then-by-priority
    ;;  (setq org-todo-sort-order '("PROJECT" "WAITING" "NEXT" "TODO" "CANCELED" "DONE"))
    ;; commented as it doesn't work for me
    ;; (require 'cl)
    ;; (require 'dash)

    ;; (defun todo-to-int (todo)
    ;;    (first (-non-nil
    ;;            (mapcar (lambda (keywords)
    ;;                      (let ((todo-seq
    ;;                             (-map (lambda (x) (first (split-string  x "(")))
    ;;                                   (rest keywords)))) 
    ;;                        (cl-position-if (lambda (x) (string= x todo)) todo-seq)))
    ;;                    org-todo-keywords))))

    ;;(defun my/org-sort-key ()
    ;;  (let* ((todo-max (apply #'max (mapcar #'length org-todo-keywords)))
    ;;         (todo (org-entry-get (point) "TODO"))
    ;;         (todo-int (if todo (todo-to-int todo) todo-max))
    ;;         )
    ;;    (format "%03d %03d" todo-int priority-int)
    ;;    ))

    ;;(defun my/org-sort-entries ()
    ;;  (interactive)
    ;;  (org-sort-entries nil ?f #'my/org-sort-key))

    ;; from https://github.com/arcthur/.emacs.d/blob/master/modes/init-org-mode.el

    (defun org-sort-agenda-items-todo (a b)
      (or
       ;;(org-cmp-todo-state a b)
       ;; (org-cmp-todo-state "PROJECT") ;; first list project heading
       (org-cmp-todo-state a b)
       ;;(org-cmp-time a b)
       ;;(org-date-cmp a b)
       ;;(org-cmp-priority a b)
       ;;(org-cmp-effort a b)
       ))

#+END_SRC

#+RESULTS:
: org-sort-agenda-items-todo


From: https://stackoverflow.com/questions/31639086/emacs-org-mode-how-can-i-filter-on-tags-and-todo-status-simultaneously

The tag search view is poorly named. It actually searches tags and properties. tag-todo adds an extra condition that only matches todo headlines. Use "+" to ndicated that a condition is required (and "-" that it's forbidden). So +PROJECT+TODO=\"TODO\" will match headlines with the tag :PROJECT: and a todo keyword of TODO. Putting into a custom command looks like-

#+BEGIN_EXAMPLE
(setq org-agenda-custom-commands
      '((p" "List Non-done projects"
         tags "+PROJECT+TODO=\"TODO\"")))
#+END_EXAMPLE


**** More 
As Carsten Dominik says here: http://thread.gmane.org/gmane.emacs.orgmode/523, with the project list You may run into problems with this approach if you have set =org-tags-match-list-sublevels= to a non-nil value, because then, due to tag inheritance, every headline *inside* each project will also showup in the resulting list.  To work around this, you may define your own special command like this:

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-org-project-list ()
    "Get me a list of projecs."
    (interactive)-    (let ((org-tags-match-list-sublevels nil))
      (org-ags-view nil "project")))
#+END_SRC

#+RESULTS:
: my-org-project-list

And guess what?? It works!!!


** Customization

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq
   org-deadline-warning-days 14
   org-agenda-default-appointment-duration 60
   org-agenda-columns-add-appointments-to-effort-sum t
   ;; Add keywords.
                                          ; org-todo-keywords '((sequence "TODO" "REVIEW" "DONE"))  ;; commented
                                          ; out by dgm
                                          ; Customizations in:
                                          ; http://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html added
                                          ; by dgm
   ;; org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "WAITING(w)"  "|" "DONE(d)" "CANCELED(c)"))
                                          ; comments out
   ;; org-todo-keyword-faces '(("REVIEW" :inherit org-done))
   ;; Priorities.
   org-priority-start-cycle-with-default nil
   org-default-priority 67)
  ;; Org-mode aligns text. But already defined elsewhere (in starter-misc.)
  ;; indent-tabs-mode nil)
#+END_SRC

#+RESULTS:
: 67

*** Projects

Projects are headings with the =:project:= tag, so we generally don't
want that tag inherited, except when we display unscheduled tasks that
don't belong to any projects.

- DGM comments this out to try and get a nice overview of projects and their actions

#+begin_src emacs-lisp :tangle no
  ;;(setq org-tags-exclude-from-inheritance '("project"))
#+end_src

This code makes it easy for me to focus on one project and its tasks.

#+begin_src emacs-lisp :tangle yes

  (add-to-list 'org-speed-commands-user '("N" org-narrow-to-subtree))
  (add-to-list 'org-speed-commands-user '("W" widen))

  ;; (defun my/org-agenda-for-subtree ()
  ;;   (interactive)
  ;;   (when (derived-mode-p 'org-agenda-mode) (org-agenda-switch-to))
  ;;   (my/org-with-current-task
  ;;    (let ((org-agenda-view-columns-initially t))
  ;;      (org-agenda nil "t" 'subtree))))
  (add-to-list 'org-speed-commands-user '("T" my/org-agenda-for-subtree))

#+end_src

#+RESULTS:
: ((S call-interactively 'org-sort) (W widen) (N org-narrow-to-subtree) (T my/org-agenda-for-subtree) (a call-interactively 'org-archive-subtree-default) (q . bh/show-org-agenda) (h . bh/hide-other) (P . bh/narrow-to-org-project))

There's probably a proper way to do this, maybe with =<=. Oh, that would work nicely. =< C-c a t= too.

And sorting:

#+begin_src emacs-lisp :tangle yes

  (add-to-list 'org-speed-commands-user '("S" call-interactively 'org-sort))

#+end_src

#+RESULTS:
: ((S call-interactively 'org-sort) (W widen) (N org-narrow-to-subtree) (T my/org-agenda-for-subtree) (a call-interactively 'org-archive-subtree-default) (q . bh/show-org-agenda) (h . bh/hide-other) (P . bh/narrow-to-org-project))

** Org-drill

On the other hand, https://www.youtube.com/watch?v=wwW_1BQKGZ0 recommends using =use-package= for =org-drill= but if I try to download it, it doesn't exist!

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package org-drill
    :after org)

#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24483 60905 183206 789000) :init (24483 60905 183198 834000) :init-secs (0 0 92 493000) :use-package-secs (0 17 178623 784000)))

**** Org-drill customization

Enable random "noise" for item itervals.

#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-drill-add-random-noise-to-intervals-p t)
  (setq org-drill-cram-hours 0) ;; by default 12
#+END_SRC

#+RESULTS:
: 0

***** TODO Read this webpage on org-drill
- https://orgmode.org/worg/org-contrib/org-drill.html


* Org-web-tools

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-web-tools
    :after org)
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23755 232 222653 744000) :init (23755 232 222644 807000) :config (23755 232 222456 56000) :config-secs (0 0 4 907000) :init-secs (0 0 10147 497000) :use-package-secs (0 6 598165 48000)))


** Mail links open compose-mail
:PROPERTIES:
:CUSTOM_ID: MailLinksOpenComposeMail
:END:

The following setting makes org-mode open =mailto:= links
using compose-mail.

#+begin_src emacs-lisp :tangle yes
  (setq org-link-mailto-program (quote (mu4e-compose "%a" "%s")))
#+end_src

#+RESULTS:
| mu4e-compose | %a | %s |

Test with mailto:daniel.guinea.uned@gmail.com
It works! Note the original had =compose-mail= and it worked too!



* Settings from the great Alphapapa 

** org-sideline

- https://github.com/alphapapa/org-sidebar

#+begin_src emacs-lisp :tangle yes
  (use-package org-sidebar
    :after org)
  ;;  :quelpa (org-sidebar :fetcher github :repo "alphapapa/org-sidebar"))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24467 62087 64741 207000) :init (24467 62087 64730 863000) :config (24467 62087 64708 964000) :config-secs (0 0 9 86000) :init-secs (0 0 70 0) :use-package-secs (0 0 170 998000)))

* org-super-agenda

        (bind-keys ("C-c 1" . my-projects-agenda)
                   ("C-c 0" . my-org-super-agenda))

- Read: https://github.com/mwfogleman/.emacs.d/blob/master/michael.org
#+begin_src emacs-lisp :tangle yes

  (use-package org-super-agenda
    :after org
    :bind (("C-c 1" . my-projects-agenda)
           ("C-c 0" . my-org-super-agenda))
    :config
    (org-super-agenda-mode)

    (defun my-org-super-agenda ()
      (interactive)
      (let ((org-super-agenda-groups
             '(
               (:name "Scheduled"
                      :time-grid t
                      :scheduled today)
               (:name "Flagged" ;; Not to forget stuff
                      :tag "FLAGGED")
               ;; After the last group, the agenda will display items that didn't
               ;; match any of these groups, with the default order position of 99
               ;; To prevent this, add this code:
               ;; (:discard (:anything t))
               (:discard (:not
                          (:and
                           (:todo "PROJECT"))))
             )
            ))
            (org-todo-list))
            (org-agenda nil "a"))

        (defun my-projects-agenda ()
          (interactive)
          (let ((org-super-agenda-groups
                 '((:name "Projects" ;; monastery work
                          :todo "PROJECT"
                          :children t)
                   ;; After the last group, the agenda will display items that didn't
                   ;; match any of these groups, with the default order position of 99
                   ;; To prevent this, add this code:
                   (:discard (:anything t)))))
            (org-todo-list)
            (org-agenda nil "a")
            )))

        ;; :config ;; I don't use it
        ;; Enable folding
        ;; (use-package origami
        ;;  :bind (:map org-super-agenda-header-map
        ;;              ("TAB" . origami-toggle-node))
        ;;  :hook ((org-agenda-mode . origami-mode))))

#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24608 8981 923830 451000) :init (24608 8981 923322 19000) :init-secs (0 0 81 659000) :use-package-secs (0 0 779 540000)))


* org-pdftools: links to PDF documents
- https://github.com/fuxialexander/org-pdftools
- https://www.reddit.com/r/emacs/comments/clxa9p/orgpdftools_a_custom_org_link_type_for_pdftools/

#+begin_src emacs-lisp :tangle yes

  (use-package org-pdftools
    :after org
    :hook (org-mode . org-pdftools-setup-link)
    :config
    (add-to-list 'org-file-apps 
                 '("\\.pdf\\'" . (lambda (file link)
                                   (org-pdfview-open link)))))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24608 9004 484565 613000) :init (24608 9004 484512 89000) :init-secs (0 0 1098 298000) :use-package-secs (0 0 1390 265000) :config (24608 9004 484478 551000) :config-secs (0 0 1029 599000)))

* org-noter
- https://write.as/dani/notes-on-org-noter

** How it works
- On any Org file, under a heading, running =M-x org-noter= will prompt for a path to the document one wishes to annotate, or open the document associated to a pdf with an existing annotation.
- On any PDF document, running =M-x org-noter= will search for possible Org files that are already tracking the document and then either jump to existing notes, or prompt for a file.
- Once we call =M-x org-noter=, we start a “annotation session”  in a new frame. What this means is that document and org file are opened side-by-side, both in indirect buffers.
   + In the org-file, you will be narrowed to the heading from which you've called org-noter.
      * Org-noter narrows down to its heading with notes but doesn't delete anything.
   + Downside: =SPC= and =BKSPC= on the pdf will move you to the section with the notes (precisely to the point were you were last in the notes), so you loose the location where you were writing any other stuff that were not notes. 
      * Solución 1: Hacer =C-.= (=push-mark-no-activate=) para poder volver luego a donde estaba con =<s-return>=  (=helm-all-mark-rings=).
      * Solución 2: Tomar notas con org-noter en un documento exclusivo para esta tarea. Es mejor trabajar con un docuento aparte para cualquier otra cosa.
- Killing any of the indirect buffers will cause the org-noter “session” to terminate, i.e., the new frame is deleted. (NB: =q= in =pdf-tools= only buries the pdf but doesn't kill it.)
   + The org-noter session is terminated, and the workspace finished, but the pdf itself is still opened. (NB: =q= in =pdf-tools= only buries the pdf but doesn't kill it.)
- To navigate between document pages, org-noter binds =M-p= and =M-n=, also in
both document and file buffers.
   + It's recommended to use these keybindings instead of the default ones so that org-noter can keep locations in the document and file synced.
   
** More on Org-noter
Org-noter keeps notes and documents in sync. 

We can call org-noter from either notes and documents, and the package will initiate the “sync”. 

Once we call =M-x org-noter=, we start a “annotation session”. 
What this means is that document and org file are opened side-by-side, both in indirect buffers, and the indirect org file buffer is narrowed down to a heading specific to the document. 
    - NB: If you open the =.org= document and do =C-u M-x org-noter=, the pdf will start in your =n+1= workspace (I have 9 by default, so it will start in a new, 10th workspace) 
       + If I do =M-x org-noter=, it will open the pdf to the left of the =.org= file *in a new frame* that is the nth+1 frame (so the tenth in my case). You also see the =.org= file in the workspace you opened it from but now you work in the nth+1 frame.

The heading is tagged with a property =NOTER_DOCUMENT=, specifying the path to the document.

Killing any of these indirect buffers will cause the org-noter “session” to terminate. (=q= in the document buffer, aka the indirect buffer that corresponds to the pdf.)

Within a session, we may at any given time press =i= within the document buffer (the pdf) to create a new subheading in the note file and jump to it. This note applies to the whole pdf page under view now. To do a more precise note, do =M-i=.

When done, we jump back to the document and continue reading, or quit the session with =q=. 

Still, killing the session, you still have to be careful to save your =.org= file with the notes and kill it.

To navigate between notes within the same document, org-noter binds =C-M-p= and =C-M-n= in both buffers of a session.

To navigate between document pages, org-noter binds =M-p= and =M-n=, also in both document and file buffers. 

Es decir, ambos conjuntos de keybindings funcionan igual en el document/pdf y en el org file con las notas. La diferencia es que los =M-= van de page en page, y los =C-M-= van de nota en nota.

To move forth and backwards in the document, use =SPC= y =Shift-SPC=

To sync current note and document/pdf, =C-M-.= So if I am with cursor on a note, and I want to jump in the docu/pdf view to where this note was made, I do =C-M-.= =M-.= should sync current page, but Helm has it assigned to something else (=etags=).

It's recommended to use these keybindings instead of the default ones so that org-noter can keep locations in the document and file synced.

When calling org-noter from a document that does not have notes associated with it yet, org-noter will either create a new note at the default document =notes.org= or prompts for a filename (if called with an universal argument).

I prefer to keep notes separately in different documents, so I call =C-u M-x org-noter= and  accept the default suggestion, which is a file with the same name as the pdf but with =.org= extension. 

As a warning about managing multiple documents, it is important to keep in mind is that the org-noter sync is based on filenames, and although changing names of the org files is OK as long as they are situated within the search directory, changing the name of the pdf document will break the sync.

In Mendeley, I organise pdf filenames as =FirstAuthorLastName_Year.pdf=, so I've committed to sticking to this personal convention.

NB: If you use an .org mode template, be aware that =org-noter= deletes by default all that lies below its notes, which are under a heading two (two stars). So you can only use it with notes at the end and with your template contents under level one headings (one star).

Old Note (this doesn't happen anymore to me): the original document/pdf from which you call =org-noter= either with =M-x org-noter= or =C-u M-x org-noter=, stays in the original workspace where you open it. But the =org-noter= session with two indirect buffers goes to workspace 9, because the process creates a new frame, and when a new frame is created, it goes to workspace 9. It occurs likewise with =pass=.

From: https://www.reddit.com/r/emacs/comments/7tvz89/orgnoter_a_synchronized_orgmode_document_annotator/
 
Comparison with =interleave=:
It fixes some of my major complaints with interleave.
-  Seems to look for the property in the enclosing subtree --- don't have to have mark on the heading!
-  The indirect buffer solution is magnificent. The narrowing was getting on my nerves.
-  Opening in a new frame is actually delightful, now I just have my notes and reading frame!
-  Having multiple pages of notes visible at once is great!

Other nice features:
- auto-saving the last page you visited so it can resume there
- different behaviors for the notes window (like, not showing up when you go to a page with notes),
- and now you can also group notes however you want, even inside other notes.
- you should be able to have multiple PDFs in the same file, and even edit them all simultaneously!
- I even put headings with PDFs inside others with PDFs too; I use that when, eg. the parent heading is associated with the PDF of a book or an exam and the heading inside it is associated with the solutions



#+begin_src emacs-lisp :tangle yes
  (use-package org-noter
    :after org
    :config
    (defun org-ref-noter-at-point ()
      "Open the pdf for bibtex key under point if it exists."
      (interactive)
      (let* ((results (org-ref-get-bibtex-key-and-file))
             (key (car results))
             (pdf-file (funcall org-ref-get-pdf-filename-function key)))
        (if (file-exists-p pdf-file)
            (progn
              (find-file-other-window pdf-file)
              (org-noter))
          (message "no pdf found for %s" key))))

    (setq org-noter-separate-notes-from-heading nil
          org-noter-auto-save-last-location t)
    (setq org-noter-default-notes-file-names '("notes.org"))
    (setq org-noter-separate-notes-from-heading t))

#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24660 60242 625088 383000) :init (24660 60242 625023 23000) :config (24660 60242 624624 164000) :config-secs (0 0 593 641000) :init-secs (0 0 1310 333000) :use-package-secs (0 0 1470 92000)))


* Export Org-ref citations to Latex
:PROPERTIES:
:ID:       d37dc997-5921-4c5b-9b3b-cadd69b9c69a
:END:

Formatting bibliography entries that I enter with org-ref in Org files. For some mysterious reason, exporting doesn't work until I evaluate the following piece of code.


#+begin_src emacs-lisp :tangle yes

  (org-ref-link-set-parameters "cite"
    :export
    (lambda (path desc format)
      (cond
       ((eq format 'latex)
        (if (or (not desc) (equal 0 (search "cite:" desc)))
            (format "\\cite{%s}" path)
          (format "\\cite[%s]{%s}" desc path)
          )))))

  (org-ref-link-set-parameters "parencite"
    :export
    (lambda (path desc format)
      (cond
       ((eq format 'latex)
        (if (or (not desc) (equal 0 (search "parencite:" desc)))
            (format "\\parencite{%s}" path)
          (format "\\parencite[%s]{%s}" desc path)
          )))))

  (org-ref-link-set-parameters "textcite"
    :export
    (lambda (path desc format)
      (cond
       ((eq format 'latex)
        (if (or (not desc) (equal 0 (search "textcite:" desc)))
            (format "\\textcite{%s}" path)
          (format "\\textcite[%s]{%s}" desc path)
          )))))

  (org-ref-link-set-parameters "autocite"
    :export
    (lambda (path desc format)
      (cond
       ((eq format 'latex)
        (if (or (not desc) (equal 0 (search "autocite:" desc)))
            (format "\\autocite{%s}" path)
          (format "\\autocite[%s]{%s}" desc path)
          )))))

  (org-ref-link-set-parameters "footcite"
    :export
    (lambda (path desc format)
      (cond
       ((eq format 'latex)
        (if (or (not desc) (equal 0 (search "footcite:" desc)))
            (format "\\footcite{%s}" path)
          (format "\\footcite[%s]{%s}" desc path)
          )))))

  (org-ref-link-set-parameters "fullcite"
    :export
    (lambda (path desc format)
      (cond
       ((eq format 'latex)
        (if (or (not desc) (equal 0 (search "fullcite:" desc)))
            (format "\\fullcite{%s}" path)
          (format "\\fullcite[%s]{%s}" desc path)
          )))))

  (org-ref-link-set-parameters "citetitle"
    :export
    (lambda (path desc format)
      (cond
       ((eq format 'latex)
        (if (or (not desc) (equal 0 (search "citetitle:" desc)))
            (format "\\citetitle{%s}" path)
          (format "\\citetitle[%s]{%s}" desc path)
          )))))

  (org-ref-link-set-parameters "citetitles"
    :export
    (lambda (path desc format)
      (cond
       ((eq format 'latex)
        (if (or (not desc) (equal 0 (search "citetitles:" desc)))
            (format "\\citetitles{%s}" path)
          (format "\\citetitles[%s]{%s}" desc path)
          )))))

  (org-ref-link-set-parameters "headlessfullcite"
    :export
    (lambda (path desc format)
      (cond
       ((eq format 'latex)
        (if (or (not desc) (equal 0 (search "headlessfullcite:" desc)))
            (format "\\headlessfullcite{%s}" path)
          (format "\\headlessfullcite[%s]{%s}" desc path)
          )))))

#+end_src

#+RESULTS:
| :export | (lambda (path desc format) (cond ((eq format 'latex) (if (or (not desc) (equal 0 (search headlessfullcite: desc))) (format \headlessfullcite{%s} path) (format \headlessfullcite[%s]{%s} desc path))))) |


* Provide

#+BEGIN_SRC emacs-lisp :tangle yes
  (provide 'starter-kit-org)
#+END_SRC

#+RESULTS:
: starter-kit-org

* Final message
#+source: message-line
#+begin_src emacs-lisp :tangle yes
  (message "Starter Kit Org loaded.")
#+end_src
