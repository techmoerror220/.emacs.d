#+TITLE: Starter Kit Org
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Org
Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also implemented using Org-mode and [[http://git-scm.com/][git]].

** Exporter Settings and Helpful Packages
HTML and LaTeX exporters are shown by default. We add the Markdown exporter to the menu.
#+begin_src emacs-lisp

  ;; Autocomplete for orgmode
  ;; (require 'org-ac)
  ;; (org-ac/config-default)

  ;; Markdown exporter
  (require 'ox-md)

  (setq org-completion-use-ido t)
  ;; (require 'org-special-blocks)
  ;; (if window-system (require 'org-mouse))

  ;; Compatibility with WindMove
  ;; Make windmove work in org-mode:
;;  (add-hook 'org-shiftup-final-hook 'windmove-up)
;;  (add-hook 'org-shiftleft-final-hook 'windmove-left)
;;  (add-hook 'org-shiftdown-final-hook 'windmove-down)
;;  (add-hook 'org-shiftright-final-hook 'windmove-right)
  ;; (if window-system (require 'org-mouse))
#+end_src

** Org-Mode Hooks
Make yasnippet work properly with org-mode.

#+begin_src emacs-lisp
;;  (defun yas/org-very-safe-expand ()
;;    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

(defun yas-org-very-safe-expand ()
  (let ((yas-fallback-behavior 'return-nil))
    (and (fboundp 'yas-expand) (yas-expand))))

(add-hook 'org-mode-hook
          (lambda ()
            (add-to-list 'org-tab-first-hook
                         'yas-org-very-safe-expand)
            ))

#+end_src

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\M-\C-n" 'outline-next-visible-heading)
              (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
              (local-set-key "\M-\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-iimage-in-org)
              ;; yasnippet (using the new org-cycle hooks)
              ;;(make-variable-buffer-local 'yas/trigger-key)
              ;;(setq yas/trigger-key [tab])
              ;;(add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
              ;;(define-key yas/keymap [tab] 'yas/next-field)
              ))
#+end_src

** Speed keys
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

Speed commands are a nice and quick way to perform certain actions while at the beginning of a heading. It’s not activated by default.

See the =org-speed-commands-default= variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to =org-babel-describe-bindings=) will
display a list of the code blocks commands and their related keys.

#+begin_src emacs-lisp
  (setq org-use-speed-commands t)
#+end_src

** Code blocks
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
=org-babel-load-languages= variable, or with an elisp form like the
one below.  The customize interface of =org-babel-load-languages=
contains an up to date list of the currently supported languages.

#+begin_src emacs-lisp
(require 'ess) 
(require 'ob-stata)

  (org-babel-do-load-languages
   'org-babel-load-languages
  '((emacs-lisp . t)
;;    (sh . t)
    (R . t)
    (perl . t)
    (ruby . t)
    (python . t)
    (js . t)
    (haskell . t)
    (stata . t)
    (shell . t)
    (latex . t)
    ))


;; I am following Ista Zahn here: don't include (stata . t) but do (require 'ob-stata) afterwards. Stil, when I do so, I get the Debugger entered--Lisp error: (void-variable inferior-STA-program-name)
;; eval(inferior-STA-program-name) so the problem comes from =ob-stata=.


#+end_src

#+RESULTS:

The next block makes org-babel aware that a lower-case 'r' in a =src= block header should be processed as R. 

#+source: add-r
#+begin_src emacs-lisp
    (add-to-list 'org-src-lang-modes
                 '("r" . ess-mode))

    (add-to-list 'org-src-lang-modes
                 '("stata" . ess-mode))
#+end_src

#+RESULTS: add-r
: ((stata . ess-mode) (r . ess-mode) (ocaml . tuareg) (elisp . emacs-lisp) (ditaa . artist) (asymptote . asy) (dot . fundamental) (sqlite . sql) (calc . fundamental) (C . c) (cpp . c++) (C++ . c++) (screen . shell-script) (shell . sh) (bash . sh))

** Code block fontification
   :PROPERTIES:
   :CUSTOM_ID: code-block-fontification
   :END:

The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.

Added from Daniel Mai at https://github.com/danielmai/.emacs.d/blob/master/config.org as well

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src

#+RESULTS:
: t

Don't ask for confirmation on every =C-c C-c= code-block compile. 

#+source: turn-off-code-block-confirm
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

** Ensure the Latest Org-mode manual is in the info directory
By placing the =doc/= directory in Org-mode at the front of the
=Info-directory-list= we can be sure that the latest version of the
Org-mode manual is available to the =info= command (bound to =C-h i=).
#+begin_src emacs-lisp
  (unless (boundp 'Info-directory-list)
    (setq Info-directory-list Info-default-directory-list))
  (setq Info-directory-list
        (cons (expand-file-name
               "doc"
               (expand-file-name
                "org"
                (expand-file-name "src" dotfiles-dir)))
              Info-directory-list))
#+end_src

** Nice Bulleted Lists
#+name: org-bullets
#+begin_src emacs-lisp :tangle no
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Local Org-mode Settings
*** COMMENT Smart-quote binding
When in an org-mode buffer, bind TeX-insert-quote to =C-c "=. Turned off by default.

#+source: org-mode-smartquote-key
#+begin_src emacs-lisp :tangle no
  (add-hook 'org-mode-hook 'smart-quote-keys)

;;  (defun smart-quote-keys ()
;;    (require 'typopunct)
;;    (typopunct-change-language 'english)
;;    (local-set-key (kbd "\C-c \'") 'typopunct-insert-single-quotation-mark)
;;    (local-set-key (kbd "\C-c \"") 'typopunct-insert-quotation-mark)
;;    )
#+end_src

*** Archive Settings
    Where archived projects and tasks go.
#+source: orgmode-archive
#+begin_src emacs-lisp :tangle yes
  (setq org-archive-location "/home/dgm/Dropbox/gtd/archive.org::From %s")
#+end_src

** Daniel Mai's costumization

From https://github.com/danielmai/.emacs.d/blob/master/config.org

#+BEGIN_SRC emacs-lisp 
(setq org-image-actual-width 550)
(setq org-highlight-latex-and-related '(latex script entities))
#+END_SRC

*** SRC block exectuation, watch out!

On Org mode version 9 I wasn’t able to execute source blocks out of the box. Others have ran into the same issue too. The solution is to remove the .elc files from the package directory: =rm ${ORG_DIR}/*.elc=.
*** Org tags

The default value is -77, which is weird for smaller width windows. I’d rather have the tags align horizontally with the header. 45 is a good column number to do that.

#+BEGIN_SRC emacs-lisp
(setq org-tags-column 45)
#+END_SRC

** =org-ref=

From https://github.com/jkitchin/org-ref

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'org-ref)
  (setq reftex-default-bibliography '("/media/dgm/blue/documents/bibs/socbib.bib"))
  (setq org-ref-default-bibliography '("/media/dgm/blue/documents/bibs/socbib.bib"))
  (setq bibtex-completion-bibliography "/media/dgm/blue/documents/bibs/socbib.bib")
  (setq org-latex-pdf-process '("latexmk -pdflatex='xelatex -synctex=1 --shell-escape' -pdf %f"))
;; LaTeX compilation command. For orgmode docs we just always use xelatex for convenience.
;; You can change it to pdflatex if you like, just remember to make the adjustments to the packages-alist below.
;; (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
;; the alternative, if you want a regular pdflatex would be, I think
;; (setq org-latex-pdf-process '("latexmk -pdf %f"))
;; (setq org-latex-pdf-process '("latexmk -pdflatex='pdflatex --shell-escape -bibtex -f'  -pdf %f"))
#+END_SRC

#+RESULTS:
| latexmk -pdflatex='xelatex -synctex=1 --shell-escape' -pdf %f |




* Final message
#+source: message-line
#+begin_src emacs-lisp :tangle yes
  (message "Starter Kit Org loaded.")
#+end_src

