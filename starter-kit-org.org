# -*- coding: utf-8 -*-
# -*- find-file-hook: org-babel-execute-buffer -*-

#+TITLE: Starter Kit Org
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Org
Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also implemented using Org-mode and [[http://git-scm.com/][git]].

The [Local Org-mode XeLaTeX Export Settings] section has
references to fonts that you may not have available on your
system. Change the references as appropriate, or comment out or
delete the lines.

** Overview
Here are the Org files I use. I should probably organize them better.  Inspired by Sacha Chua.

| archive.org      | Archived subtrees                                                        |
| articles.org     | Huge file with artilce notes                                             |
| bibliography.org | Needed for =org-ref= workflow, I think.                                  |
| business.org     | Business-related notes and TODOs                                         |
| compras.org      |                                                                          |
| contacts.org     | Contact information and people-related tasks                             |
| gtd.org          | Main document for outlining projects                                     |
| inbox.org        | My main Org file. Inbox for M-x org-capture, tasks, weekly reviews, etc. |
| journal.org      | Stoic journal                                                            |
| learning.org     | Learning plan                                                            |
| math.org         | Math notes                                                               |
| medidas.org      |                                                                          |
| notes.org        | Notes without a TODO flag                                                |
| programming.org  | Programming projects, fabric tracking, etc.                              |
| tickler.org      | TODOs and events with a date                                             |
| someday.org      | Plans without due date                                                   |

** Export Settings and Helpful Packages
*** Markdown 
HTML and LaTeX exporters are shown by default. We add the Markdown exporter to the menu.

#+begin_src emacs-lisp :tangle yes
  ;; Autocomplete for orgmode
  ;; (require 'org-ac)
  ;; (org-ac/config-default)

  ;; Markdown exporter
  (require 'ox-md)

  ;; (setq org-completion-use-ido t)  ;; dgm disables in case it interferes with helm
  ;; (require 'org-special-blocks)
  ;; (if window-system (require 'org-mouse))

  ;; Compatibility with WindMove
  ;; Make windmove work in org-mode:
  ;;  (add-hook 'org-shiftup-final-hook 'windmove-up)
  ;;  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  ;;  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  ;;  (add-hook 'org-shiftright-final-hook 'windmove-right)
  ;; (if window-system (require 'org-mouse))
#+end_src

*** Pandoc 

Following Daniel Mai we add the exporter for Pandoc as well (remember to install Pandoc on your system!). Pandoc converts between a huge number of different file formats.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ox-pandoc
    :ensure t)
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23561 372 145757 865000) :init (23561 372 145716 931000) :init-secs (0 0 1074 531000) :use-package-secs (0 0 1398 100000) :config (23561 372 145174 215000) :config-secs (0 0 33 101000)))

*** Local Pandoc Support

A pandoc menu for markdown and tex files.

#+src-name: pandoc_mode
#+begin_src emacs-lisp :tangle yes
  (use-package pandoc-mode
    :ensure t
    :config
    (add-hook 'markdown-mode-hook 'pandoc-mode)
    (add-hook 'TeX-mode-hook 'pandoc-mode)  
    (add-hook 'org-mode-hook 'pandoc-mode)
    (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings))
  ;; (global-set-key (kbd "C-c C-p") 'pandoc-main-hydra/body) ;; not sure it is taken
#+end_src

gg#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23561 617 539596 896000) :init (23561 617 539564 637000) :config (23561 617 539347 779000) :config-secs (0 0 432 56000) :init-secs (0 0 824 478000) :use-package-secs (0 0 1011 280000)))

*** Export options 

Taken from Caolan on Publishing (https://caolan.org/dotfiles/emacs.html)
Remove section numbers, table of contents etc. from =HTML= output plus some other sensible defaults. These can be overridden in =org-publish-project-alist=.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-export-with-section-numbers nil)
  (setq org-html-include-timestamps nil)
  (setq org-export-with-sub-superscripts nil)
  (setq org-export-with-toc nil)
  (setq org-html-toplevel-hlevel 2)
  (setq org-export-htmlize-output-type 'css)
  (setq org-export-html-coding-system 'utf-8-unix)
  (setq org-html-viewport nil)
  (setq org-export-with-smart-quotes t)
#+END_SRC

And from https://stackoverflow.com/questions/24904208/emacs-windows-org-mode-encoding this tip to avoid problems with utf-8 encoding in org, though someone says it doesn't do anything.

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list
   'file-coding-system-alist '("\\.org" . utf-8-unix))
#+END_SRC

*** Html export settings

Create =html= files form the =org= sources, to help with documentation. To set up org-mode for publishing projects to HTML you will need to change these settings, as they apply only to the Starter Kit.

#+source: html-export-settings
#+begin_src emacs-lisp :tangle yes
  (setq org-publish-project-alist
        '(("org"
           :base-directory "~/.emacs.d/"
           :publishing-directory "/media/dgm/blue/documents/websites/esk/"
           :publishing-function org-html-publish-to-html
           :auto-sitemap t
           :sitemap-filename "index.org"
           :sitemap-title "Emacs Starter Kit for the Social Sciences: Documentation"
           :section-numbers t
           ;;:table-of-contents t
           :html-head "<link rel=\"stylesheet\"
                     href=\"http://kieranhealy.org/css/org.css\"
                     type=\"text/css\"/>"            )))

  (setq org-html-postamble nil)
#+end_src

#+RESULTS: html-export-settings

*** =twbs= or html made cool 

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ox-twbs
    :ensure t)
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23561 790 48242 633000) :init (23561 790 48205 768000) :config (23561 790 47836 935000) :config-secs (0 0 26 942000) :init-secs (0 0 707 567000) :use-package-secs (0 0 940 130000)))

***  Configure Org-babel
- Add LaTeX to the list of languages Org-babel will recognize.
#+srcname: add-latex
#+begin_src emacs-lisp :tangle yes
  (require 'ob-latex)
  ;; (org-babel-add-interpreter "latex")
  ;; (add-to-list 'org-babel-tangle-langs '("latex" "tex"))
#+end_src
- Add LaTeX to a list of languages that raise noweb-type errors.
#+srcname: noweb-error
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'org-babel-noweb-error-langs "latex")
#+end_src

*** Links in Org mode
A global binding for Org-mode (see [[file:starter-kit-org.org][starter-kit-org]])

Org-mode supports [[http://orgmode.org/manual/Hyperlinks.html#Hyperlinks][links]], this command allows you to store links
globally for later insertion into an Org-mode buffer.  See
[[http://orgmode.org/manual/Handling-links.html#Handling-links][Handling-links]] in the Org-mode manual.

#+begin_src emacs-lisp :tangle yes
  (define-key global-map "\C-cl" 'org-store-link)
#+end_src

#+RESULTS:
: org-store-link
*** ebib and citation settings
ebib is a bibtex database manager that works inside emacs. It can
talk to org-mode. See [[http://orgmode.org/worg/org-tutorials/org-latex-export.html#sec-17_2][this Worg tutorial]] for details.
#+source: ebib-setup
#+begin_src emacs-lisp :tangle yes
  (org-add-link-type "ebib" 'ebib)

  (org-add-link-type
   "cite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "cite:" desc)))
           (format "\\cite{%s}" path)
         (format "\\cite[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "parencite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "parencite:" desc)))
           (format "\\parencite{%s}" path)
         (format "\\parencite[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "textcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "textcite:" desc)))
           (format "\\textcite{%s}" path)
         (format "\\textcite[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "autocite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "autocite:" desc)))
           (format "\\autocite{%s}" path)
         (format "\\autocite[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "footcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "footcite:" desc)))
           (format "\\footcite{%s}" path)
         (format "\\footcite[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "fullcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "fullcite:" desc)))
           (format "\\fullcite{%s}" path)
         (format "\\fullcite[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "citetitle" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "citetitle:" desc)))
           (format "\\citetitle{%s}" path)
         (format "\\citetitle[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "citetitles" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "citetitles:" desc)))
           (format "\\citetitles{%s}" path)
         (format "\\citetitles[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "headlessfullcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "headlessfullcite:" desc)))
           (format "\\headlessfullcite{%s}" path)
         (format "\\headlessfullcite[%s]{%s}" desc path)
         )))))
#+end_src

#+RESULTS: ebib-setup
: Created headlessfullcite link.

*** Org-protocol

Org-protocol from https://caolan.org/dotfiles/emacs.html#orgd96aeb0
Use org-protocol to trigger org-mode interactions from external programs. Useful for capturing links from Firefox using the org-mode-capture add-on.

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'org-protocol)
#+END_SRC

#+RESULTS:
: org-protocol

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-protocol
    :ensure nil)
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23753 63985 355912 309000) :init (23753 63985 355860 329000) :config (23753 63985 354999 573000) :config-secs (0 0 25 970000) :init-secs (0 0 1586 604000) :use-package-secs (0 0 1654 354000)))

** Org-Mode Hooks
Make yasnippet work properly with org-mode.

#+begin_src emacs-lisp :tangle yes
  ;;  (defun yas/org-very-safe-expand ()
  ;;    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

  (defun yas-org-very-safe-expand ()
    (let ((yas-fallback-behavior 'return-nil))
      (and (fboundp 'yas-expand) (yas-expand))))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-to-list 'org-tab-first-hook
                           'yas-org-very-safe-expand)
              ))
#+end_src

#+RESULTS:
| (lambda nil (highlight-symbol-mode)) | org-table-stripes-enable | org-mode-reftex-setup | org-ref-org-menu | (lambda nil (org-bullets-mode)) | turn-off-auto-fill | ambrevar/turn-off-indent-tabs | ambrevar/turn-off-linum | (lambda nil (visual-line-mode 1)) | org-indent-mode | (lambda nil (set-face-attribute 'org-level-1 nil :height 1.5) (set-face-attribute 'org-level-2 nil :height 1.2) (set-face-attribute 'org-level-3 nil :height 1.1) (set-face-attribute 'org-level-4 nil :height 1.1) (set-face-attribute 'org-level-5 nil :height 1.1)) | (lambda nil (local-set-key \216 'outline-next-visible-heading) (local-set-key \220 'outline-previous-visible-heading) (local-set-key \225 'outline-up-heading) (local-set-key \227 'org-table-copy-region) (local-set-key \231 'org-table-paste-rectangle) (local-set-key \214 'org-table-sort-lines) (local-set-key \311 'org-toggle-iimage-in-org)) | (lambda nil (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |

#+begin_src emacs-lisp :tangle yes
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\M-\C-n" 'outline-next-visible-heading)
              (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
              (local-set-key "\M-\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-iimage-in-org)
              ;;(local-set-key "<M-up>" 'org-move-item-up)
              ;;(local-set-key "<M-down>" 'org-move-item-down)
              ;; yasnippet (using the new org-cycle hooks)
              ;;(make-variable-buffer-local 'yas/trigger-key)
              ;;(setq yas/trigger-key [tab])
              ;;(add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
              ;;(define-key yas/keymap [tab] 'yas/next-field)
              ))
#+end_src

#+RESULTS:
| (lambda nil (local-set-key \216 'outline-next-visible-heading) (local-set-key \220 'outline-previous-visible-heading) (local-set-key \225 'outline-up-heading) (local-set-key \227 'org-table-copy-region) (local-set-key \231 'org-table-paste-rectangle) (local-set-key \214 'org-table-sort-lines) (local-set-key \311 'org-toggle-iimage-in-org) (local-set-key <M-up> 'org-move-item-up) (local-set-key <M-down> 'org-move-item-down)) | (lambda nil (highlight-symbol-mode)) | org-table-stripes-enable | org-mode-reftex-setup | org-display-inline-images | org-ref-org-menu | (lambda nil (org-bullets-mode)) | turn-off-auto-fill | ambrevar/turn-off-indent-tabs | ambrevar/turn-off-linum | (lambda nil (visual-line-mode 1)) | org-indent-mode | (lambda nil (set-face-attribute 'org-level-1 nil :height 1.5) (set-face-attribute 'org-level-2 nil :height 1.2) (set-face-attribute 'org-level-3 nil :height 1.1) (set-face-attribute 'org-level-4 nil :height 1.1) (set-face-attribute 'org-level-5 nil :height 1.1)) | (lambda nil (local-set-key \216 'outline-next-visible-heading) (local-set-key \220 'outline-previous-visible-heading) (local-set-key \225 'outline-up-heading) (local-set-key \227 'org-table-copy-region) (local-set-key \231 'org-table-paste-rectangle) (local-set-key \214 'org-table-sort-lines) (local-set-key \311 'org-toggle-iimage-in-org)) | (lambda nil (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)) | pandoc-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |


Original hook from =dgm.org=

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'org-mode-hook
            (lambda ()
              (set-face-attribute 'org-level-1 nil :height 1.5)
              (set-face-attribute 'org-level-2 nil :height 1.2)
              (set-face-attribute 'org-level-3 nil :height 1.1)
              (set-face-attribute 'org-level-4 nil :height 1.1)
              (set-face-attribute 'org-level-5 nil :height 1.1)))
#+END_SRC

#+RESULTS:
| (lambda nil (highlight-symbol-mode)) | org-table-stripes-enable | org-mode-reftex-setup | org-ref-org-menu | (lambda nil (org-bullets-mode)) | turn-off-auto-fill | ambrevar/turn-off-indent-tabs | ambrevar/turn-off-linum | (lambda nil (visual-line-mode 1)) | org-indent-mode | (lambda nil (set-face-attribute 'org-level-1 nil :height 1.5) (set-face-attribute 'org-level-2 nil :height 1.2) (set-face-attribute 'org-level-3 nil :height 1.1) (set-face-attribute 'org-level-4 nil :height 1.1) (set-face-attribute 'org-level-5 nil :height 1.1)) | (lambda nil (local-set-key \216 'outline-next-visible-heading) (local-set-key \220 'outline-previous-visible-heading) (local-set-key \225 'outline-up-heading) (local-set-key \227 'org-table-copy-region) (local-set-key \231 'org-table-paste-rectangle) (local-set-key \214 'org-table-sort-lines) (local-set-key \311 'org-toggle-iimage-in-org)) | (lambda nil (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |

*** Hooks by Uncle David

Hook from Uncle Dave at https://github.com/daedreth/UncleDavesEmacs

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

#+RESULTS:
| er/add-org-mode-expansions | (lambda nil (org-bullets-mode)) | turn-off-auto-fill | ambrevar/turn-off-indent-tabs | ambrevar/turn-off-linum | (lambda nil (visual-line-mode 1)) | org-indent-mode | (lambda nil (highlight-symbol-mode)) | org-table-stripes-enable | (lambda nil (set-face-attribute 'org-level-1 nil :height 1.5) (set-face-attribute 'org-level-2 nil :height 1.2) (set-face-attribute 'org-level-3 nil :height 1.1) (set-face-attribute 'org-level-4 nil :height 1.1) (set-face-attribute 'org-level-5 nil :height 1.1)) | org-mode-reftex-setup | org-ref-org-menu | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |


Line wrapping from Uncle Dave at https://github.com/daedreth/UncleDavesEmacs.

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'org-mode-hook
            '(lambda ()
               (visual-line-mode 1)))
#+END_SRC

#+RESULTS:
| (lambda nil (highlight-symbol-mode)) | org-table-stripes-enable | org-mode-reftex-setup | org-ref-org-menu | (lambda nil (org-bullets-mode)) | turn-off-auto-fill | ambrevar/turn-off-indent-tabs | ambrevar/turn-off-linum | (lambda nil (visual-line-mode 1)) | org-indent-mode | (lambda nil (set-face-attribute 'org-level-1 nil :height 1.5) (set-face-attribute 'org-level-2 nil :height 1.2) (set-face-attribute 'org-level-3 nil :height 1.1) (set-face-attribute 'org-level-4 nil :height 1.1) (set-face-attribute 'org-level-5 nil :height 1.1)) | (lambda nil (local-set-key \216 'outline-next-visible-heading) (local-set-key \220 'outline-previous-visible-heading) (local-set-key \225 'outline-up-heading) (local-set-key \227 'org-table-copy-region) (local-set-key \231 'org-table-paste-rectangle) (local-set-key \214 'org-table-sort-lines) (local-set-key \311 'org-toggle-iimage-in-org)) | (lambda nil (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |

*** Hooks by Ambrevar

#+BEGIN_SRC emacs-lisp :tangle yes
  (dolist (fun '(ambrevar/turn-off-linum ambrevar/turn-off-indent-tabs turn-off-auto-fill))
    (add-hook 'org-mode-hook fun))

  (when (require 'org-contacts nil t)
    ;;  (let ((contacts "~/personal/contacts/contacts.org.gpg"))
    (let ((contacts "/home/dgm/Dropbox/gtd/contacts.org"))
      (when (file-exists-p contacts)
        ;; When used to auto-complete e-mail addresses, the file is automatically
        ;; loaded.  The buffer usually need not be restored by a desktop session.
        (when desktop-save-mode
          (setq desktop-files-not-to-save
                (concat (substring desktop-files-not-to-save 0 -2) "\\|" (regexp-quote (expand-file-name contacts)) "\\)")))
        (setq org-contacts-files (list contacts)))))
#+END_SRC

#+RESULTS:

** Speed keys
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

Speed commands are a nice and quick way to perform certain actions while at the beginning of a heading. It’s not activated by default.

See the =org-speed-commands-default= variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to =org-babel-describe-bindings=) will
display a list of the code blocks commands and their related keys.

#+begin_src emacs-lisp :tangle yes
  (setq org-use-speed-commands t)
  (setq org-speed-commands-user (quote
                                 (("q" . bh/show-org-agenda)
                                  ("h" . bh/hide-other)
                                  ("P" . bh/narrow-to-org-project))))

  (defun bh/show-org-agenda ()
    (interactive)
    (if org-agenda-sticky
        (switch-to-buffer "*Org Agenda( )*")
      (switch-to-buffer "*Org Agenda*"))
    (delete-other-windows))

  (defun bh/hide-other ()
    (interactive)
    (save-excursion
      (org-back-to-heading 'invisible-ok)
      (hide-other)
      (org-cycle)
      (org-cycle)
      (org-cycle)))

  (defun bh/narrow-to-org-subtree ()
    (widen)
    (org-narrow-to-subtree)
    (save-restriction
      (org-agenda-set-restriction-lock)))

  (defun bh/narrow-to-org-project ()
    (widen)
    (save-excursion
      (bh/find-project-task)
      (bh/narrow-to-org-subtree)))

#+end_src

#+RESULTS:
: bh/narrow-to-org-project

*** Recall org-agenda commands
- https://orgmode.org/worg/doc.html

#+BEGIN_EXAMPLE
Mode for time-sorted view on action items in Org files.

The following commands are available:

key             binding
---             -------

C-c		Prefix Command
TAB		org-agenda-goto
C-k		org-agenda-kill
RET		org-agenda-switch-to
C-n		org-agenda-next-line
C-p		org-agenda-previous-line
C-x		Prefix Command
ESC		Prefix Command
C-_		org-agenda-undo
SPC		org-agenda-show-and-scroll-up
!		org-agenda-toggle-deadlines
#		org-agenda-dim-blocked-tasks
$		org-agenda-archive
%		org-agenda-bulk-mark-regexp
*		org-agenda-bulk-mark-all
+		org-agenda-priority-up
,		org-agenda-priority
-		org-agenda-priority-down
.		org-agenda-goto-today
/		org-agenda-filter-by-tag
0 .. 9		digit-argument
:		org-agenda-set-tags
;		org-timer-set-timer
<		org-agenda-filter-by-category
=		org-agenda-filter-by-regexp
>		org-agenda-date-prompt
?		org-agenda-show-the-flagging-note
A		org-agenda-append-agenda
B		org-agenda-bulk-action
C		org-agenda-convert-date
D		org-agenda-toggle-diary
E		org-agenda-entry-text-mode
F		org-agenda-follow-mode
G		org-agenda-toggle-time-grid
H		org-agenda-holidays
I		org-agenda-clock-in
J		org-agenda-clock-goto
K		org-habit-toggle-habits
L		org-agenda-recenter
M		org-agenda-phases-of-moon
N		org-agenda-next-item
O		org-agenda-clock-out
P		org-agenda-previous-item
Q		org-agenda-Quit
R		org-agenda-clockreport-mode
S		org-agenda-sunrise-sunset
T		org-agenda-show-tags
U		org-agenda-bulk-unmark-all
X		org-agenda-clock-cancel
[		org-agenda-manipulate-query-add
]		org-agenda-manipulate-query-subtract
^		org-agenda-filter-by-top-headline
_		org-agenda-filter-by-effort
a		org-agenda-archive-default-with-confirmation
b		org-agenda-earlier
c		org-agenda-goto-calendar
d		org-agenda-day-view
e		org-agenda-set-effort
f		org-agenda-later
g		org-agenda-redo-all
h		org-agenda-holidays
i		org-agenda-diary-entry
j		org-agenda-goto-date
k		org-agenda-capture
l		org-agenda-log-mode
m		org-agenda-bulk-mark
n		org-agenda-next-line
o		delete-other-windows
p		org-agenda-previous-line
q		org-agenda-quit
r		org-agenda-redo
s		org-save-all-org-buffers
t		org-agenda-todo
u		org-agenda-bulk-unmark
v		org-agenda-view-mode-dispatch
w		org-agenda-week-view
x		org-agenda-exit
y		org-agenda-year-view
z		org-agenda-add-note
{		org-agenda-manipulate-query-add-re
|		org-agenda-filter-remove-all
}		org-agenda-manipulate-query-subtract-re
~		org-agenda-limit-interactively
DEL		org-agenda-show-scroll-down
C-/		org-agenda-undo
<C-S-left>	org-agenda-todo-previousset
<C-S-right>	org-agenda-todo-nextset
<M-down>	org-agenda-drag-line-forward
<M-up>		org-agenda-drag-line-backward
<S-down>	org-agenda-priority-down
<S-left>	org-agenda-do-date-earlier
<S-right>	org-agenda-do-date-later
<S-up>		org-agenda-priority-up
<backspace>	org-agenda-show-scroll-down
<down>		org-agenda-next-line
<mouse-2>	org-agenda-goto-mouse
<mouse-3>	org-agenda-show-mouse
<remap>		Prefix Command
<tab>		org-agenda-goto
<undo>		org-agenda-undo
<up>		org-agenda-previous-line

<remap> <backward-paragraph>	org-agenda-backward-block
<remap> <forward-paragraph>	org-agenda-forward-block

M-*		org-agenda-bulk-toggle-all
M-m		org-agenda-bulk-toggle
#+END_EXAMPLE




** Code blocks
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
=org-babel-load-languages= variable, or with an elisp form like the
one below.  The customize interface of =org-babel-load-languages=
contains an up to date list of the currently supported languages.

DGM 30 dic 2018: tangle no as I've moved this to =-stats.org=.

#+begin_src emacs-lisp :tangle no
  (require 'ob-stata)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (R . t)
     (perl . t)
     (ruby . t)
     (python . t)
     (js . t)
     (haskell . t)
     (stata . t)
     (shell . t)
     (ledger . t)
     (latex . t)
     ))

  ;; (sh . t)
  ;; (scheme . t)


  ;; I am following Ista Zahn here: don't include (stata . t) but do (require 'ob-stata) afterwards. Stil, when I do so, I get the Debugger entered--Lisp error: (void-variable inferior-STA-program-name)
  ;; eval(inferior-STA-program-name) so the problem comes from =ob-stata=.
#+end_src

#+RESULTS:

The next block makes org-babel aware that a lower-case 'r' in a =src= block header should be processed as R. 

#+source: add-r
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'org-src-lang-modes
               '("r" . ess-mode))

  (add-to-list 'org-src-lang-modes
               '("stata" . ess-mode))
#+end_src

#+RESULTS: add-r
: ((stata . ess-mode) (r . ess-mode) (ocaml . tuareg) (elisp . emacs-lisp) (ditaa . artist) (asymptote . asy) (dot . fundamental) (sqlite . sql) (calc . fundamental) (C . c) (cpp . c++) (C++ . c++) (screen . shell-script) (shell . sh) (bash . sh))

** Code block fontification
:PROPERTIES:
:CUSTOM_ID: code-block-fontification
:END:

The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.

Added from Daniel Mai at https://github.com/danielmai/.emacs.d/blob/master/config.org as well

#+begin_src emacs-lisp :tangle yes
  (setq org-src-fontify-natively t   ;; if I set to nil, trying to speed up editing of src code, in large chunks of code i don't get any advantage.
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t  ;; bern hansen changes it to =nil= but Miskatonic says: preserve indentation when tangling source blocks (important for makefiles)
        org-src-tab-acts-natively t)
#+end_src

#+RESULTS:
: t

Don't ask for confirmation on every =C-c C-c= code-block compile. 

#+source: turn-off-code-block-confirm
#+begin_src emacs-lisp :tangle yes
  (setq org-confirm-babel-evaluate nil)
#+end_src

#+RESULTS: turn-off-code-block-confirm

*** More on syntax highlighting 

We'll need the =htmlize= package for syntax highlighting of code blocks (in Caolan's and Uncle Dave's dot files).

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package htmlize
    :ensure t)
#+END_SRC

#+RESULTS:

** Ensure the Latest Org-mode manual is in the info directory

By placing the =doc/= directory in Org-mode at the front of the
=Info-directory-list= we can be sure that the latest version of the
Org-mode manual is available to the =info= command (bound to =C-h i=).

#+begin_src emacs-lisp :tangle yes
  (unless (boundp 'Info-directory-list)
    (setq Info-directory-list Info-default-directory-list))
  (setq Info-directory-list
        (cons (expand-file-name
               "doc"
               (expand-file-name
                "org"
                (expand-file-name "src" dotfiles-dir)))
              Info-directory-list))
#+end_src

#+RESULTS:
| /home/dgm/.emacs.d/src/org/doc | /home/dgm/.emacs.d/src/org/doc | /home/dgm/.emacs.d/elpa/auctex-12.1.1 | /home/dgm/.emacs.d/elpa/ebib-20180817.1024 | /home/dgm/.emacs.d/elpa/editorconfig-20181025.421 | /home/dgm/.emacs.d/elpa/magit-20180915.1359 | /home/dgm/.emacs.d/elpa/ghub-20180914.802 | /home/dgm/.emacs.d/elpa/magit-popup-20180726.2037 | /home/dgm/.emacs.d/elpa/org-plus-contrib-20180910 | /home/dgm/.emacs.d/elpa/pandoc-mode-20180727.2201 | /home/dgm/.emacs.d/elpa/r-autoyas-20140101.1510 | /home/dgm/.emacs.d/elpa/ess-20180911.2135 | /home/dgm/.emacs.d/elpa/slime-20181031.31 | /home/dgm/.emacs.d/elpa/ivy-20180911.1701 | /home/dgm/.emacs.d/elpa/use-package-20180715.1801 | /home/dgm/.emacs.d/elpa/with-editor-20180726.2044 | /usr/local/share/info/ | /usr/share/info/ | /usr/local/share/info/ |

** Nice Bulleted Lists

- From Miskatonic's setup: [[file:/media/dgm/blue/documents/programming/emacs/CoolEmacsGuys/miskatonic/.emacs.d/setup/setup-orgmode.el::;;;;%20org-bullets%20(https://github.com/sabof/org-bullets)][Miskatonic!]]
Possibilities include:  ◉ ○ ✸ ✿ ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶ ► • ★ ▸ or any other Unicode character

Default is '("◉" "○" "✸" "✿")

I've used ("◉" "○ ""►" "•" "•"))

#+name: org-bullets
#+begin_src emacs-lisp :tangle no
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src

#+RESULTS: org-bullets
: t

#+begin_src emacs-lisp :tangle yes
(use-package org-bullets
  :config
  (setq org-bullets-bullet-list '("⊢" "⋮" "⋱" "⋱" "⋱"))
  :init
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  )
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23978 12595 960157 264000) :init (23978 12595 960102 53000) :config (23978 12595 959712 522000) :config-secs (0 0 1000 376000) :init-secs (0 0 2335 74000) :use-package-secs (0 0 2702 479000)))

** More customization

Disable line splitting on M-RET.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-M-RET-may-split-line '((default)))
#+END_SRC

#+RESULTS:
| default |

Replace ellipsis with ellipsis in brackets

#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-ellipsis " […]")
#+END_SRC

#+RESULTS:
:  […]

DGM: now I like Miskatonic's setup better: 
 - Change the ellipsis that indicates hidden content
 - http://endlessparentheses.com/changing-the-org-mode-ellipsis.html

#+begin_src emacs-lisp :tangle yes
(setq org-ellipsis " ⤵") ;; ⤵ ↴ ⬎ ⤷ ⬎
(set-face-attribute 'org-ellipsis nil :underline nil)
#+end_src

#+RESULTS:

Indentation.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-adapt-indentation nil)
#+END_SRC

#+RESULTS:

** Local Org-mode Settings
*** Smart-quote binding

When in an org-mode buffer, bind TeX-insert-quote to =C-c "=. Turned off by default.

DGM: on 27 dic 2018 I disable the smart-quote-keys function as it was causing C-c ' to not work for editing src block editing in org mode.

Commented out on 27 feb 2019 as =makefile= complains it doesnt have this program and, in effect, I don't have it on Elpa, so I don't know how it works! Also, I don't even know what it does. 

#+source: org-mode-smartquote-key
#+begin_src emacs-lisp :tangle no
  ;;;;; (require 'typopunct) ;; I don't have this.
  ;;;;; (typopunct-change-language 'english t)

  ;; (defun smart-quote-keys () 
  ;;  (local-set-key (kbd "\C-c \'") 'typopunct-insert-single-quotation-mark)
  ;;  (local-set-key (kbd "\C \"") 'typopunct-insert-quotation-mark))

  ;; (add-hook 'org-mode-hook 'smart-quote-keys)
#+end_src

#+RESULTS: org-mode-smartquote-key

*** Archive Settings
Where archived projects and tasks go.
#+source: orgmode-archive
#+begin_src emacs-lisp :tangle yes
  (setq org-archive-location "/home/dgm/Dropbox/gtd/archive.org::From %s")
#+end_src

#+RESULTS: orgmode-archive
: /home/dgm/Dropbox/gtd/archive.org::From %s

** Daniel Mai's costumization

From https://github.com/danielmai/.emacs.d/blob/master/config.org

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-image-actual-width 550)
  (setq org-highlight-latex-and-related '(latex script entities))
#+END_SRC

#+RESULTS:
| latex | script | entities |

*** SRC block exectuation, watch out!

On Org mode version 9 I wasn’t able to execute source blocks out of the box. Others have ran into the same issue too. The solution is to remove the .elc files from the package directory: =rm ${ORG_DIR}/*.elc=.
*** Org tags

The default value is -77, which is weird for smaller width windows. I’d rather have the tags align horizontally with the header. 45 is a good column number to do that.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-tags-column 45)
#+END_SRC

#+RESULTS:
: 45

** =org-ref= 

=org-ref= from https://github.com/jkitchin/org-ref and the Reddit workflow from https://www.reddit.com/r/emacs/comments/4gudyw/help_me_with_my_orgmode_workflow_for_notetaking/

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-ref
    :ensure t
    :init
    (setq org-ref-completion-library 'org-ref-helm-bibtex)
    (setq org-ref-notes-directory "/media/dgm/blue/documents/elibrary/org/references"
          org-ref-bibliography-notes "/media/dgm/blue/documents/elibrary/org/references/readings.org"
          org-ref-default-bibliography '("/media/dgm/blue/documents/bibs/socbib.bib")
          org-ref-pdf-directory "/media/dgm/blue/documents/elibrary/org/references/pdfs/"))

  (require 'org-id)
  (require 'org-ref-wos)
  (require 'org-ref-scopus)
  (require 'org-ref-pubmed)

  ;; (add-to-list 'org-ref-bibtex-completion-actions '("Edit notes" . helm-bibtex-edit-notes))
#+END_SRC

#+RESULTS:
: org-ref-pubmed

*** Org-ref default citation type

According to https://emacs.stackexchange.com/questions/36430/cant-choose-citation-types-using-org-ref, if I do =C-u C-c ]= I should be able to choose citation type (cite, citep, etc). But I can't. 

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-ref-default-citation-link "textcite")
#+END_SRC

#+RESULTS:
: textcite

*** Pre/post text support from Kitchin
- From: https://github.com/jkitchin/org-ref/blob/master/org-ref.org
org-ref has basic and limited support for pre/post text in citations. You can get pre/post text by using a description in a cite link, with pre/post text separated by ::. For example, See page 20::, for example. It is not easy (maybe not possible) to extend this for the humanities style of citations (e.g. harvard) with nested pre/post text on multiple citations. If anyone knows how to do it, pull requests are welcome! There is an ongoing effort in org-mode for a new citation syntax that may make this more feasible.

If you use helm-bibtex and would like pre/post text support enabled, you can add org-ref-format-citation to bibtex-completion-format-citation-functions:

Tangled to no until I understand what is this Pre/Post thingy.

#+BEGIN_SRC emacs-lisp :tangle no
  ;;(setf (cdr (assoc 'org-mode bibtex-completion-format-citation-functions)) 'org-ref-format-citation)
#+END_SRC

#+RESULTS:
: org-ref-format-citation

*** For internal citation of labels

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-latex-prefer-user-labels t)
#+END_SRC

#+RESULTS:
: t

** Goodies

Template Lists from Daniel Mai at https://github.com/danielmai/.emacs.d/blob/master/config.org.

I don't know why it doesn't work 

#+BEGIN_SRC emacs-lisp :tangle no
  ;; (add-to-list 'org-structure-template-alist
  ;;             '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
  ;; (add-to-list 'org-structure-template-alist
  ;;             '("py" "#+BEGIN_SRC python\n?\n#+END_SRC" ""))
  ;; (add-to-list 'org-structure-template-alist
  ;;             '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC" ""))
  ;; (add-to-list 'org-structure-template-alist
  ;;             '("md" "#+BEGIN_SRC markdown\n?\n#+END_SRC" ""))
#+END_SRC

#+RESULTS:

* Globally defined tags. 

Tip from: https://orgmode.org/manual/Setting-tags.html

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-tag-alist '((:startgroup)
                        ("@errands"  . ?e)
                        ("@home"     . ?h)
                        ("@uned"     . ?u)
                        (:endgroup)
                        ("project"   . ?p)
                        ("browsing"  . ?b)
                        ("drill"     . ?d)
                        ("laptop"    . ?l)
                        ("mailing"   . ?m)
                        ("ordenador" . ?o)
                        ("reading"   . ?r)
                        ("salud"     . ?s)
                        ("tel"       . ?t)
                        ("writing"   . ?w)
                        ("FLAGGED"   . ??)))
#+END_SRC

#+RESULTS:
: ((:startgroup) (@errands . 101) (@home . 104) (@uned . 117) (:endgroup) (project . 112) (browsing . 98) (drill . 100) (laptop . 108) (mailing . 109) (ordenador . 111) (reading . 114) (salud . 115) (tel . 116) (writing . 119) (FLAGGED . 63))

* Agenda 
** Shortcuts

#+BEGIN_SRC emacs-lisp :tangle yes
  ;;   (setq org-default-notes-file (concat org-directory "/notes.org")) ;; i disable this to see if I can choose between notes and tasks.
  ;;    this is not working for some reason: (define-key global-map "\C-c c" 'org-capture)
  (define-key global-map (kbd "C-c c") 'org-capture)

  ;; other bindings from http://orgmode.org/manual/Activation.html
  ;;     (global-set-key "\C-c l" 'org-store-link)  este binding ya estaba listo
  ;;     (global-set-key "\C-c a" 'org-agenda) ;; este binding puesto así no funcionaba
  ;;    (global-set-key "\C-c b" 'org-iswitch);; este binding puesto así no funcionaba

  (define-key global-map (kbd "C-c a") 'org-agenda)
  ;;(define-key global-map (kbd "C-c b") 'org-iswitch) ;; I need C-c b for ido-switch-buffer
#+END_SRC

#+RESULTS:
: org-agenda

Shortcuts that should work in Org but do not. Besides, they used to be bound to =windmove= but no more because I'd rather use =ace-window=

#+BEGIN_SRC emacs-lisp :tangle yes
  (define-key global-map (kbd "S-<left>") 'org-timestamp-down-day)
  (define-key global-map (kbd "S-<right>") 'org-timestamp-up-day)
  (define-key global-map (kbd "S-<up>") 'org-timestamp-up)
  (define-key global-map (kbd "S-<down>") 'org-timestamp-down)
#+END_SRC

#+RESULTS:
: org-timestamp-down

** Customization

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq
   org-deadline-warning-days 14
   org-agenda-default-appointment-duration 60
   org-agenda-columns-add-appointments-to-effort-sum t
   ;; Add keywords.
                                          ; org-todo-keywords '((sequence "TODO" "REVIEW" "DONE"))  ;; commented
                                          ; out by dgm
                                          ; Customizations in:
                                          ; http://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html added
                                          ; by dgm
   ;; org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "WAITING(w)"  "|" "DONE(d)" "CANCELED(c)"))
                                          ; comments out
   ;; org-todo-keyword-faces '(("REVIEW" :inherit org-done))
   ;; Priorities.
   org-priority-start-cycle-with-default nil
   org-default-priority 67)
  ;; Org-mode aligns text. But already defined elsewhere (in starter-misc.)
  ;; indent-tabs-mode nil)
#+END_SRC

#+RESULTS:
: 67

*** Set to the location of your Org files on your local system.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-directory "/home/dgm/Dropbox/gtd")
  ;; Set to <your Dropbox root directory>/MobileOrg.
  (setq org-mobile-directory "/media/dgm/blue/documents/dropbox/mobileorg")
  ;; Set to the files (or directory of files) you want sync'd
  ;;   (setq org-agenda-files (quote ("/home/dgm/Dropbox/gtd")))  ;; this is the original line by kieran healy.

  ;; organization by: https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html
  ;; Org agenda view scans these files and collects all the heading with a TODO (or related) keyword
  (setq org-agenda-files (list "/home/dgm/Dropbox/gtd/inbox.org"
                               "/home/dgm/Dropbox/gtd/gtd.org"
                               "/home/dgm/Dropbox/gtd/journal.org"
                               "/home/dgm/Dropbox/gtd/habits.org"
                               "/home/dgm/Dropbox/gtd/tickler.org"
                               "/home/dgm/Dropbox/gtd/calendar.org"
                               "/home/dgm/Dropbox/gtd/stata-gtd.org"
                               "/home/dgm/Dropbox/gtd/divorcio_gtd.org"
                               "/media/dgm/blue/documents/proyectos/mtj/mtj_gtd.org" ; i could add it with =C-c [= but that action does not survive across sections
                               "/media/dgm/blue/documents/proyectos/iat_methods/iat_methods.org"
                               "/media/dgm/blue/documents/proyectos/laBussola/laBussola_gtd.org"
                               ))
#+END_SRC

#+RESULTS:
| /home/dgm/Dropbox/gtd/inbox.org | /home/dgm/Dropbox/gtd/gtd.org | /home/dgm/Dropbox/gtd/journal.org | /home/dgm/Dropbox/gtd/habits.org | /home/dgm/Dropbox/gtd/tickler.org | /home/dgm/Dropbox/gtd/calendar.org | /home/dgm/Dropbox/gtd/stata-gtd.org | /home/dgm/Dropbox/gtd/divorcio_gtd.org | /media/dgm/blue/documents/proyectos/mtj/mtj_gtd.org | /media/dgm/blue/documents/proyectos/iat_methods/iat_methods.org | /media/dgm/blue/documents/proyectos/laBussola/laBussola_gtd.org |


From https://stackoverflow.com/questions/10635989/emacs-org-agenda-list-destroy-my-windows-splits. 

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-window-setup 'current-window)
#+END_SRC

#+RESULTS:
: current-window

** Custom agenda commands in overview  
*** Project definition and finding stuck projects (Bernt Hansen)
:PROPERTIES:
:CUSTOM_ID: Projects
:END:

I'm using a new lazy project definition to mark tasks as projects.
This requires zero effort from me.  Any task with a subtask using a
todo keyword is a project.  Period.

Projects are 'stuck' if they have no subtask with a =NEXT= todo
keyword task defined.

The org-mode stuck projects agenda view lists projects that have no
=NEXT= task defined.  Stuck projects show up on my block agenda and I
tend to assign a =NEXT= task so the list remains empty.  This helps to
keep projects moving forward.

I disable the default org-mode stuck projects agenda view with the
following setting.

#+header: :tangle no
#+begin_src emacs-lisp
  (setq org-stuck-projects (quote ("" nil nil "")))
#+end_src

This prevents org-mode from trying to show incorrect data if I select
the default stuck project view with =F12 #= from the agenda menu.  My
customized stuck projects view is part of my block agenda displayed
with =F12 SPC=.

Projectsg can have subprojects - and these subprojects can also be stuck.
Any project that is stuck shows up on the stuck projects list so I can
indicate or create a =NEXT= task to move that project forward.

In the following example =Stuck Project A= is stuck because it has no
subtask which is =NEXT=.  =Project C= is not stuck because it has
=NEXT= tasks =SubTask G= and =Task I=.  =Stuck Sub Project D= is stuck
because =SubTask E= is not =NEXT= and there are no other tasks
available in this project.

#+header: :tangle yes
#+begin_src emacs-lisp
  (defun bh/skip-habits ()
    "Skip habits"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (org-is-habit-p)
            next-headline
          nil))))

  (defun bh/is-project-p ()
    "Any task with a todo keyword subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task has-subtask))))

  (defun bh/is-project-subtree-p ()
    "Any task with a todo keyword that is in a project subtree.
  Callers of this function already widen the buffer view."
    (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                (point))))
      (save-excursion
        (bh/find-project-task)
        (if (equal (point) task)
            nil
          t))))

  (defun bh/is-task-p ()
    "Any task with a todo keyword and no subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task (not has-subtask)))))

  (defun bh/is-subproject-p ()
    "Any task which is a subtask of another project"
    (let ((is-subproject)
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (while (and (not is-subproject) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq is-subproject t))))
      (and is-a-task is-subproject)))

  (defun bh/list-sublevels-for-projects-indented ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels 'indented)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defun bh/list-sublevels-for-projects ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels t)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defvar bh/hide-scheduled-and-waiting-next-tasks t)

  (defun bh/toggle-next-task-display ()
    (interactive)
    (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
    (when  (equal major-mode 'org-agenda-mode)
      (org-agenda-redo))
    (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

  (defun bh/skip-stuck-projects ()
    "Skip trees that are not stuck projects"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (bh/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
                          (if has-next
                              nil
                            next-headline)) ; a stuck project, has subtasks but no next task
          nil))))

  (defun bh/skip-non-stuck-projects ()
    p  "Skip trees that are not stuck projects"
    ;; (bh/list-sublevels-for-projects-indented)
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (bh/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                  next-headline
                nil)) ; a stuck project, has subtasks but no next task
          next-headline))))

  (defun bh/skip-non-projects ()
    "Skip trees that are not projects"
    ;; (bh/list-sublevels-for-projects-indented)
    (if (save-excursion (bh/skip-non-stuck-projects))
        (save-restriction
          (widen)
          (let ((subtree-end (save-excursion (org-end-of-subtree t))))
            (cond
             ((bh/is-project-p)
              nil)
             ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
              nil)
             (t
              subtree-end))))
      (save-excursion (org-end-of-subtree t))))

  (defun bh/skip-non-tasks ()
    "Show non-project tasks.
  Skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((bh/is-task-p)
          nil)
         (t
          next-headline)))))

  (defun bh/skip-project-trees-and-habits ()
    "Skip trees that are projects"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-projects-and-habits-and-single-tasks ()
    "Skip trees that are projects, tasks that are habits, single non-project tasks"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((org-is-habit-p)
          next-headline)
         ((and bh/hide-scheduled-and-waiting-next-tasks
               (member "WAITING" (org-get-tags-at)))
          next-headline)
         ((bh/is-project-p)
          next-headline)
         ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
          next-headline)
         (t
          nil)))))

  (defun bh/skip-project-tasks-maybe ()
    "Show tasks related to the current restriction.
  When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
  When not restricted, skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
             (next-headline (save-excursion (or (outline-next-heading) (point-max))))
             (limit-to-project (marker-buffer org-agenda-restrict-begin)))
        (cond
         ((bh/is-project-p)
          next-headline)
         ((org-is-habit-p)
          subtree-end)
         ((and (not limit-to-project)
               (bh/is-project-subtree-p))
          subtree-end)
         ((and limit-to-project
               (bh/is-project-subtree-p)
               (member (org-get-todo-state) (list "NEXT")))
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-project-tasks ()
    "Show non-project tasks.
  Skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         ((bh/is-project-subtree-p)
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-non-project-tasks ()
    "Show project tasks.
  Skip project and sub-project tasks, habits, and loose non-project tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
             (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((bh/is-project-p)
          next-headline)
         ((org-is-habit-p)
          subtree-end)
         ((and (bh/is-project-subtree-p)
               (member (org-get-todo-state) (list "NEXT")))
          subtree-end)
         ((not (bh/is-project-subtree-p))
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-projects-and-habits ()
    "Skip trees that are projects and tasks that are habits"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-non-subprojects ()
    "Skip trees that are not projects"
    (let ((next-headline (save-excursion (outline-next-heading))))
      (if (bh/is-subproject-p)
          nil
        next-headline)))
#+end_src

#+RESULTS:
: bh/skip-non-subprojects

Tip from https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html.

Useful for using custom agenda commands to get an overview of actions by context or tag. Here's an example custom agenda command that will display all actions for the =@office= context. Following the GTD principle, what I usually want is to only show the first action to be done (or next action) for each project with the =@office= tag. That can be achieved using a skipping condition. I've tweak it so that I can have it work for entries tagged for the context "work" and for th context "home".

HOWEVER I am not 100% sure how useful is all this because I have a nice option in C-c a to choose filtering by tag (/), etc.  Anyways, more info onagenda-custom-commands in http://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html.

On timeline bit, read https://www.reddit.com/r/orgmode/comments/7hps9j/rip_orgtimeline/

Note, very importat: =+project+= refers to the =tag=, not the =TODO= state.

*** My (DGM) org-agenda-custom-commands customization
:PROPERTIES:
:ID:       9b247ff5-7e32-4c1c-9a9b-d0f46761f52f
:END:

This I don't really use but could be useful in future:

#+BEGIN_EXAMPLE
          ("ps" "All Tasks in Some Project by TODO State "
           ((agenda)
            ;;(tags-todo "project")
            (tags "project" ((org-tags-match-list-sublevels nil)))
            (tags "+project+TODO=\"WAITING\"")
            (tags "+project+TODO=\"NEXT\"")
            (tags "+project+TODO=\"TODO\"")
            ;;(tags "+project+TODO=\"DONE\"")
            ))
#+END_EXAMPLE


#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-block-separator "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")

  (setq org-agenda-custom-commands
        '(("x" "Export Day Agenda" agenda ""
           ((ps-number-of-columns 2)
            (ps-landscape-mode t)
            (org-agenda-prefix-format " [ ] ")
            (org-agenda-with-colors nil)
            (org-agenda-remove-tags t))
           nil
           ("~/Dropbox/gtd/theDayAgenda.pdf"))   ;; no se' por qu'e no se graba automaticamente este file. Da igual poner NIl antes que no (ver abajo)
          ("X" "Export Week Agenda" agenda ""
           ((ps-number-of-columns 2)
            (ps-landscape-mode t)
            (org-agenda-prefix-format " [ ] ")
            (org-agenda-with-colors nil)
            (org-agenda-remove-tags t)
            (org-agenda-span 7))
           ("~/Dropbox/gtd/theWeekAgenda.pdf")) ;; no se' por qu'e no se graba automaticamente este file
          ("d" "Daily Review"
           ((agenda "" ((org-agenda-span 1))) ;; review upcoming deadlines and appointments
            ;; type "l" in the agenda to review logged items
            ;;            (stuck "") ;; review stuck projects as designated by org-stuck-projects
            ;;(todo "STARTED") ;; review  actions that have started
            (todo "WAITING" ((org-agenda-sorting-strategy '(category-up)))) ;;This way tasks of the same category are together and sorted alphabetically
            (todo "NEXT" ((org-agenda-sorting-strategy '(category-up)))) ;; review next actions
            (todo "TODO" ((org-agenda-sorting-strategy '(category-up)))) ;; review pending actions waiting for "next actiosn" to be fulfilled
            )) ;;
          ("w" "Weekly Review"
           ((agenda "" ((org-agenda-span 7)))  ;; review upcoming deadlines and appointments
            ;; old code ((org-agenda-fortnight-view)))
            ;; type "l" in the agenda to review logged items
            ;;            (stuck "") ;; review stuck projects as designated by org-stuck-projects
            ;;(todo "STARTED") ;; review  actions that have started
            (todo "WAITING" ((org-agenda-sorting-strategy '(category-up)))) ;; review waiting items
            (todo "NEXT" ((org-agenda-sorting-strategy '(category-up)))) ;; review next actions
            (todo "TODO" ((org-agenda-sorting-strategy '(category-up)))) ;; review pending actions waiting for "next actiosn" to be fulfilled
            ))
          ("f" "Fortnight Review"
           ((agenda "" ((org-agenda-span 14))) ;; review upcoming deadlines and appointments
            ;; type "l" in the agenda to review logged items
            ;;            (stuck "") ;; review stuck projects as designated by org-stuck-projects
            ;;(todo "STARTED") ;; review  actions that have started
            (todo "WAITING" ((org-agenda-sorting-strategy '(category-up))))    ;; review waiting items
            (todo "NEXT" ((org-agenda-sorting-strategy '(category-up)))) ;; review next actions
            (todo "TODO" ((org-agenda-sorting-strategy '(category-up)))) ;; review pending actions waiting for "next actiosn" to be fulfilled
            ))
          ("r" "Monthly Review"
           ((agenda "" ((org-agenda-span 31))) ;; review upcoming deadlines and appointments
            ;; type "l" in the agenda to review logged items
            ;;            (stuck "") ;; review stuck projects as designated by org-stuck-projects
            ;;(todo "STARTED") ;; review  actions that have started
            (todo "WAITING" ((org-agenda-sorting-strategy '(category-up))))      ;; review waiting items
            (todo "NEXT" ((org-agenda-sorting-strategy '(category-up)))) ;; review next actions
            (todo "TODO" ((org-agenda-sorting-strategy '(category-up)))) ;; review pending actions waiting for "next actiosn" to be fulfilled
            ))
          ("y" "Yearly Review"
           ((agenda "" ((org-agenda-span (quote year))))))
          ("p" "Tasks Grouped by Project"
           ((agenda "")
            (tags "project"
                  ((org-tags-match-list-sublevels nil)
                   (org-agenda-overriding-header "                                          LIST OF PROJECTS                                          "))
                  ) ;; TODO include condition: when TODO state changed from PROJECT to DONE, do not list here
            (tags-todo "+project+CATEGORY=\"uned\""
                       ((org-agenda-overriding-header "                                                UNED                                                ")
                        (org-agenda-cmp-user-defined 'org-sort-agenda-items-todo)))
            (tags-todo "+project+CATEGORY=\"research\""
                       ((org-agenda-overriding-header "                                               RESEARCH                                             ")
                        (org-agenda-cmp-user-defined 'org-sort-agenda-items-todo)))
            (tags-todo "+project+CATEGORY=\"work-hunt\""
                       ((org-agenda-overriding-header "                                               WORK-HUNT                                            ")
                        (org-agenda-cmp-user-defined 'org-sort-agenda-items-todo)))
            (tags-todo "+project+CATEGORY=\"computing\""
                       ((org-agenda-overriding-header "                                               COMPUTING                                            ")
                        (org-agenda-cmp-user-defined 'org-sort-agenda-items-todo)))
            (tags-todo "+project+CATEGORY=\"personal\""
                       ((org-agenda-overriding-header "                                               PERSONAL                                             ")
                        (org-agenda-cmp-user-defined 'org-sort-agenda-items-todo)))
            (tags-todo "+project+CATEGORY=\"git\"|+project+CATEGORY=\"linux\"|+project+CATEGORY=\"learning\""
                       ((org-agenda-overriding-header "                                               LEARNING                                             ")
                        (org-agenda-cmp-user-defined 'org-sort-agenda-items-todo)))
            (tags-todo "-project+TODO=\"TODO\""
                       ((org-agenda-overriding-header "                                               ORPHAN TODOs                                         ")
                        ))
            (tags-todo "+project+CATEGORY=\"emacs\""
                       ((org-agenda-overriding-header "                                               EMACS                                                ")
                        (org-agenda-cmp-user-defined 'org-sort-agenda-items-todo)))
            ))
          ("o" "Office and home agenda"
           ((agenda "" ((org-agenda-ndays 1))) ;; esto no me funciona... debe ser que (setq org-agenda-span (quote month)) en starter-kit-org.org tiene prioridad
            ;; limits the agenda display to a single day
            (tags-todo "@home|@uned")
            ;;            (tags "project+CATEGORY=\"elephants\"")
            ;;            (tags "review" ((org-agenda-files '("~/org/circuspeanuts.org"))))
            ;; limits the tag search to the file circuspeanuts.org
            ;;            (todo "WAITING")
            )
           ((org-agenda-compact-blocks t))) ;; options set here apply to the entire block
          ;; ...other commands here
          ("l" "Timeline"
           ((agenda
             ""
             (;; (org-agenda-overriding-header "========================================== Scheduled Tasks ==========================================")
              (org-agenda-span 90)
              (org-agenda-prefix-format '((agenda . " %1c %?-12t% s")))
              ;;(org-agenda-skip-function '(lambda()
              ;;                  ((bh/skip-habits))))
              ))
            (todo
             "TODO"
             ((org-agenda-overriding-header "                                         UNSCHEDULED TODOs                                          ")
              (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
              (org-agenda-prefix-format '((todo . " %1c ")))
              (org-agenda-sorting-strategy '(category-up))
             )
            ))
           )))

  (defun my-org-agenda-skip-all-siblings-but-first ()
    "Skip all but the first non-done entry."
    (let (should-skip-entry)
      (unless (org-current-is-todo)
        (setq should-skip-entry t))
      (save-excursion
        (while (and (not should-skip-entry) (org-goto-sibling t))
          (when (org-current-is-todo)
            (setq should-skip-entry t))))
      (when should-skip-entry
        (or (outline-next-heading)
            (goto-char (point-max))))))

  (defun org-current-is-todo ()
    (string= "TODO" (org-get-todo-state)))

  ;; from https://emacs.stackexchange.com/questions/9585/org-how-to-sort-headings-by-todo-and-then-by-priority
  ;;  (setq org-todo-sort-order '("PROJECT" "WAITING" "NEXT" "TODO" "CANCELED" "DONE"))
  ;; commented as it doesn't work for me
  ;; (require 'cl)
  ;; (require 'dash)

  ;; (defun todo-to-int (todo)
  ;;    (first (-non-nil
  ;;            (mapcar (lambda (keywords)
  ;;                      (let ((todo-seq
  ;;                             (-map (lambda (x) (first (split-string  x "(")))
  ;;                                   (rest keywords)))) 
  ;;                        (cl-position-if (lambda (x) (string= x todo)) todo-seq)))
  ;;                    org-todo-keywords))))

  ;;(defun my/org-sort-key ()
  ;;  (let* ((todo-max (apply #'max (mapcar #'length org-todo-keywords)))
  ;;         (todo (org-entry-get (point) "TODO"))
  ;;         (todo-int (if todo (todo-to-int todo) todo-max))
  ;;         )
  ;;    (format "%03d %03d" todo-int priority-int)
  ;;    ))

  ;;(defun my/org-sort-entries ()
  ;;  (interactive)
  ;;  (org-sort-entries nil ?f #'my/org-sort-key))

  ;; from https://github.com/arcthur/.emacs.d/blob/master/modes/init-org-mode.el

  (defun org-sort-agenda-items-todo (a b)
    (or
     ;;(org-cmp-todo-state a b)
     ;; (org-cmp-todo-state "PROJECT") ;; first list project heading
     (org-cmp-todo-state a b)
     ;;(org-cmp-time a b)
     ;;(org-date-cmp a b)
     ;;(org-cmp-priority a b)
     ;;(org-cmp-effort a b)
     ))
#+END_SRC

#+RESULTS:
: org-sort-agenda-items-todo


From: https://stackoverflow.com/questions/31639086/emacs-org-mode-how-can-i-filter-on-tags-and-todo-status-simultaneously

The tag search view is poorly named. It actually searches tags and properties. tag-todo adds an extra condition that only matches todo headlines. Use "+" to ndicated that a condition is required (and "-" that it's forbidden). So +PROJECT+TODO=\"TODO\" will match headlines with the tag :PROJECT: and a todo keyword of TODO. Putting into a custom command looks like-

#+BEGIN_EXAMPLE
(setq org-agenda-custom-commands
      '((p" "List Non-done projects"
         tags "+PROJECT+TODO=\"TODO\"")))
#+END_EXAMPLE


**** COMMENT More customizations for agenda

- https://emacs.stackexchange.com/questions/24151/list-todos-which-have-specific-property


***** Leo's projects
#+begin_src emacs-lisp :tangle yes :results silent
  (add-to-list 'org-agenda-custom-commands
               '("pl" "Leo"
                 tags-todo "+project+CATEGORY=\"leo\""))
#+end_src

***** TFG project

#+begin_src emacs-lisp :tangle yes :results silent
  (add-to-list 'org-agenda-custom-commands
               '("pt" "TFG"
                 tags-todo "+project+CATEGORY=\"tfg\""))
#+end_src

***** Divorce project

#+begin_src emacs-lisp :tangle yes :results silent
  (add-to-list 'org-agenda-custom-commands
               '("pd" "Divorce"
                 tags-todo "+project+CATEGORY=\"divorce_gtd\""))
#+end_src


**** More 
Set to the name of the file where new notes will be stored

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-mobile-inbox-for-pull "/media/dgm/blue/documents/dropbox/org/fromMobile.org")
#+END_SRC

#+RESULTS:
: /media/dgm/blue/documents/dropbox/org/fromMobile.org

Finally, as Carsten Dominik says here: http://thread.gmane.org/gmane.emacs.orgmode/523, with the project list You may run into problems with this approach if ou have set =org-tags-match-list-sublevels= to a non-nil value, because then, due to tag inheritance, every headline *inside* each project will also showup in the resulting list.  To work around this, you may define your own special command like this:

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my-org-project-list ()
    "Get me a list of projecs."
    (interactive)-    (let ((org-tags-match-list-sublevels nil))
      (org-ags-view nil "project")))
#+END_SRC

#+RESULTS:
: my-org-project-list

And guess what?? It works!!!


** Agenda costumization from Ambrevar

Set PDF association in Org-mode (original is ='default=).

#+BEGIN_SRC emacs-lisp :tangle yes
  (setcdr (assoc "\\.pdf\\'" org-file-apps) 'emacs)
#+END_SRC

#+RESULTS:
: emacs

** Further customization of agenda

Remove DONE tasks from agenda view. Tip from: https://stackoverflow.com/questions/8281604/remove-done-tasks-from-agenda-view

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
#+END_SRC

#+RESULTS:
: t


** Public holidays 

Public holidays in Spain. Tip from: https://www.emacswiki.org/emacs/CalendarLocalization
And Calendario de fiestas moviles hasta 2100 en http://www.antonioburgos.com/antologia/semana_santa/curiosidades/zzcurioaalmaque.html
Check another cool customization here: http://www.gnomon.org.uk/diary.html

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'org-agenda)
  (require 'holidays)
  (setq calendar-holidays holiday-other-holidays)
  (setq org-agenda-include-diary t)  ;; Thanks to this, the holidays below show up in my computer's Org Agenda view  (though not in orgzly).

  ;; (setq holiday-other-holidays  ;; with this holidays don't show up in agenda.
  ;; with the following holidays show up in org-agenda but still it does not show up in orgzly so watch out! 
  (setq calendar-holidays  ;; holiday-other-holidays          
        '((holiday-fixed 1 1 "Año Nuevo / New Year's Day")
          (holiday-fixed 1 6 "Día de Reyes / Epiphany") 
          (holiday-fixed 2 14 "Valentine's Day")
          ;;          (holiday-fixed 3 5 "Martes de Carnaval")
          ;;          (holiday-fixed 3 6 "Miércoles de Ceniza")
          (holiday-easter-etc -47 "Martes de Carnaval / Shrove Tuesday") 
          (holiday-easter-etc -46 "Miércoles de Ceniza / Ash Friday")
          ;; (holiday-sexp '(calendar-nth-named-day 1 1 3 year 19) "Día de San José") ;; en 2020 este esta mal
          (holiday-easter-etc -7 "Domingo de Ramos / Palm Sunday")
          (holiday-easter-etc -3 "Jueves Santo / Maundy Thursday")
          (holiday-easter-etc -2 "Viernes Santo / Good Friday")
          (holiday-easter-etc 0 "Domingo de Resurrección o Pascua / Easter Sunday")
          (holiday-easter-etc +1 "Lunes de Pascua")
          (holiday-fixed 5 1 "Día Internacional del Trabajo")
          (holiday-fixed 5 2 "Día de la Comunidad de Madrid")
          (holiday-fixed 5 6 "Día de la Madre")
          (holiday-fixed 5 15 "Día de San Isidro")
          (holiday-fixed 5 31 "Corpus Christi (Madrid)")
          ;;  (holiday-easter-etc +43 "Día de la Ascención")
          ;;  (holiday-easter-etc +64 "Corpus Christi")
          (holiday-easter-etc 60 "Corpus Christi") ;; en http://lists.gnu.org/archive/html/emacs-devel/2004-07/msg00494.html
          (holiday-fixed 10 12 "Día de la Hispanidad")
          (holiday-fixed 11 1  "Todos los santos")
          (holiday-fixed 11 9  "Día de la Almudena")
          (holiday-fixed 12 25 "Natividad del Señor")
          (holiday-fixed 12 6 "Día de la Constitución")
          (holiday-fixed 12 8 "Inmaculada Concepción") ;; en 2018. En 2019 se trasladará al lunes 9. Ojo! Cambiar con el nuevo agno!!
          ))
#+END_SRC

#+RESULTS:
| holiday-fixed      |   1 |                                                1 | Año Nuevo / New Year's Day    |
| holiday-fixed      |   1 |                                                6 | Día de Reyes / Epiphany       |
| holiday-fixed      |   2 |                                               14 | Valentine's Day               |
| holiday-easter-etc | -47 |              Martes de Carnaval / Shrove Tuesday |                               |
| holiday-easter-etc | -46 |                 Miércoles de Ceniza / Ash Friday |                               |
| holiday-easter-etc |  -7 |                   Domingo de Ramos / Palm Sunday |                               |
| holiday-easter-etc |  -3 |                   Jueves Santo / Maundy Thursday |                               |
| holiday-easter-etc |  -2 |                      Viernes Santo / Good Friday |                               |
| holiday-easter-etc |   0 | Domingo de Resurrección o Pascua / Easter Sunday |                               |
| holiday-easter-etc |   1 |                                  Lunes de Pascua |                               |
| holiday-fixed      |   5 |                                                1 | Día Internacional del Trabajo |
| holiday-fixed      |   5 |                                                2 | Día de la Comunidad de Madrid |
| holiday-fixed      |   5 |                                                6 | Día de la Madre               |
| holiday-fixed      |   5 |                                               15 | Día de San Isidro             |
| holiday-fixed      |   5 |                                               31 | Corpus Christi (Madrid)       |
| holiday-easter-etc |  60 |                                   Corpus Christi |                               |
| holiday-fixed      |  10 |                                               12 | Día de la Hispanidad          |
| holiday-fixed      |  11 |                                                1 | Todos los santos              |
| holiday-fixed      |  11 |                                                9 | Día de la Almudena            |
| holiday-fixed      |  12 |                                               25 | Natividad del Señor           |
| holiday-fixed      |  12 |                                                6 | Día de la Constitución        |
| holiday-fixed      |  12 |                                                8 | Inmaculada Concepción         |



Basically you tell agenda to display events from calendar diary:

(Tip from https://emacs.stackexchange.com/questions/10965/easiest-way-to-customize-holidays-that-appear-in-org-agenda.)

(already included earlier)

#+BEGIN_SRC emacs-lisp :tangle no
  '(org-agenda-include-diary t) 
#+END_SRC


*** Make calendar start on Monday instead of Sunday

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq calendar-week-start-day 1)
#+END_SRC

#+RESULTS:
: 1

** Refiling

From Caolan at https://caolan.org/dotfiles/emacs.html#orgd96aeb0. 
Provide refile targets as paths, so a level 3 headline will be available as level1/level2/level3. Offer completions in hierarchical steps.

Targets. (Nota que solo con =maxlevel= I get the refiling to someday's second level---two stars---to work).

Explanation: 

Take for example =("/home/dgm/Dropbox/gtd/tickler.org" :level . 2)=. This gave lots of low level headings but not the overall =tickler= heading. So if I wanted to refile something to this upper-level heading I could not. 

When I changed this to =("/home/dgm/Dropbox/gtd/tickler.org" :maxlevel . 2)= I got it working for low-level headings and for the upper-level heading =tickler=.s

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-refile-targets '(("/home/dgm/Dropbox/gtd/gtd.org" :maxlevel . 3)
                             ("/media/dgm/blue/documents/proyectos/mtj/mtj_gtd.org" :level . 2)
                             ("/media/dgm/blue/documents/proyectos/laBussola/laBussola_gtd.org" :level . 2)
                             ("/media/dgm/blue/documents/personal/documentacion/divorcio/divorcio_gtd.org" :level . 2)
                             ("/media/dgm/blue/documents/proyectos/iat_methods/iat_methods.org" :level . 2)
                             ("/home/dgm/Dropbox/gtd/someday.org" :maxlevel . 2)                    
                             ("/home/dgm/Dropbox/gtd/inbox.org" :level . 2)
                             ("/home/dgm/Dropbox/gtd/notes.org" :maxlevel . 2)
                             ("/home/dgm/Dropbox/gtd/habits.org" :maxlevel . 2)
                             ("/home/dgm/Dropbox/gtd/tickler.org" :maxlevel . 2)))
#+END_SRC

#+RESULTS:
: ((/home/dgm/Dropbox/gtd/gtd.org :maxlevel . 3) (/media/dgm/blue/documents/proyectos/mtj/mtj_gtd.org :level . 2) (/media/dgm/blue/documents/proyectos/laBussola/laBussola_gtd.org :level . 2) (/media/dgm/blue/documents/personal/documentacion/divorcio/divorcio_gtd.org :level . 2) (/media/dgm/blue/documents/proyectos/iat_methods/iat_methods.org :level . 2) (/home/dgm/Dropbox/gtd/someday.org :maxlevel . 2) (/home/dgm/Dropbox/gtd/inbox.org :level . 2) (/home/dgm/Dropbox/gtd/notes.org :maxlevel . 2) (/home/dgm/Dropbox/gtd/habits.org :maxlevel . 2) (/home/dgm/Dropbox/gtd/tickler.org :maxlevel . 2))

New from https://www.reddit.com/r/emacs/comments/4366f9/how_do_orgrefiletargets_work/

#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-refile-targets '((nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 9)))
#+END_SRC

#+RESULTS:
: ((nil :maxlevel . 9) (org-agenda-files :maxlevel . 9))

This first element of org-refile-targets decides the heading levels to consider within current file, the second element - within other agenda files. (https://stackoverflow.com/questions/22200312/refile-from-one-file-to-other)

Create any missing parent nodes during refile (after asking for confirmation). (From Caolan at  https://caolan.org/dotfiles/emacs.html#orgd96aeb0.)

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

#+RESULTS:
: confirm

The last two variables are useful because I'm using helm. Instead of having to step through the headings Foo, Bar, and Go to the the Store, I just get a giant list of targets in the form Foo/Bar/Go to the Store. Makes it super easy to jump to whatever I'm looking for.
From: https://www.reddit.com/r/emacs/comments/4366f9/how_do_orgrefiletargets_work/

Also, https://emacs.stackexchange.com/questions/32617/how-to-jump-directly-to-an-org-headline
notes that 
"Users of completion packages like ido/ivy/helm will probably want to change the following setting in order to see the whole target path at once:"

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-refile-use-outline-path t)          ;; show full paths to refiling
  (setq org-outline-path-complete-in-steps nil) ;; Change to nil to refile in a single go.
#+END_SRC

#+RESULTS:

** Ambrevar's agenda stuff

#+BEGIN_SRC emacs-lisp :tangle yes
  (autoload 'ambrevar/org-switch-agenda-file "org")
  (autoload 'ambrevar/org-switch-agenda-file-other-window "org")
#+END_SRC

#+RESULTS:
: ambrevar/org-switch-agenda-file-other-window

* Ido =Imenu='s depth of search

Depth of search for =Imenu= in Org buffers. From https://www.reddit.com/r/emacs/comments/8v6fny/how_to_change_the_depth_of_imenulist_for_org_files/

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-imenu-depth 5)
#+END_SRC

#+RESULTS:
: 5

* Initial visibility 
I want to see properties by default but this is of no help. I'm using =s-h= for visible mode.

DGM: I think =(setq org-startup-folded 'showeverything)= is what allows me seeing stuff when I am searching

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-startup-folded 'showeverything)
  ;;(setq org-inhibit-startup-visibility-stuff t)
  ;;(setq org-save-outline-visibility t)
#+END_SRC

#+RESULTS:
: t

* Inserting graphical ouptut
- Tip from Erik Riverson's blog on org-mode and R for inserting images generated in code blocks inline in our Emacs buffer.

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)   
  (add-hook 'org-mode-hook 'org-display-inline-images)   
#+END_SRC

#+RESULTS:
| org-display-inline-images | (lambda nil (highlight-symbol-mode)) | org-table-stripes-enable | org-mode-reftex-setup | org-ref-org-menu | (lambda nil (org-bullets-mode)) | turn-off-auto-fill | ambrevar/turn-off-indent-tabs | ambrevar/turn-off-linum | (lambda nil (visual-line-mode 1)) | org-indent-mode | (lambda nil (set-face-attribute 'org-level-1 nil :height 1.5) (set-face-attribute 'org-level-2 nil :height 1.2) (set-face-attribute 'org-level-3 nil :height 1.1) (set-face-attribute 'org-level-4 nil :height 1.1) (set-face-attribute 'org-level-5 nil :height 1.1)) | (lambda nil (local-set-key \216 'outline-next-visible-heading) (local-set-key \220 'outline-previous-visible-heading) (local-set-key \225 'outline-up-heading) (local-set-key \227 'org-table-copy-region) (local-set-key \231 'org-table-paste-rectangle) (local-set-key \214 'org-table-sort-lines) (local-set-key \311 'org-toggle-iimage-in-org)) | (lambda nil (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)) | pandoc-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

* Font-lock

DGM sets this to nil trying to get the minimum decoration available to speed things up.

#+BEGIN_SRC emacs-lisp :tangle yes
;; (setq font-lock-maximum-decoration nil)
        
(setq font-lock-maximum-decoration        
        '((org-mode . 1)))

;; (setq org-src-font-lock-fontify-block nil)
#+End_SRC

#+RESULTS:
: ((org-mode . 1))

** COMMENT Strike through DONE headlines

From Sacha's dotfiles: I wanted a quick way to visually distinguish DONE tasks from tasks I still need to do. This handy snippet from the Emacs Org-mode mailing list does the trick by striking through the headlines for DONE tasks. 

DGM: lo he probado pero no me convence.
Alternative for =org-done=: "PaleGreen"

#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-fontify-done-headline t)
  (custom-set-faces
   '(org-done ((t (:foreground "#66aa9baa32aa"
                               :weight normal
                               :strike-through t))))
   '(org-headline-done
     ((((class color) (min-colors 16) (background dark))
       (:foreground "LightSalmon" :strike-through t)))))
#+END_SRC

#+RESULTS:

* Idle timer

This snippet is from John Wiegley - http://lists.gnu.org/archive/html/emacs-orgmode/2010-03/msg00367.html by way of Sacha Chua. It shows the org agenda when Emacs is idle. 

Thanks to winner-mode, I can get back to my previous buffers with =C-c left=. 

#+BEGIN_SRC emacs-lisp :tangle no
  (defun jump-to-org-agenda ()
    (interactive)
    (let ((buf (get-buffer "*Org Agenda*"))
          wind)
      (if buf
          (if (setq wind (get-buffer-window buf))
              (select-window wind)
            (if (called-interactively-p 'any)
                (progn
                  (select-window (display-buffer buf t t))
                  (org-fit-window-to-buffer)
                  ;; (org-agenda-redo)
                  )
              (with-selected-window (display-buffer buf)
                (org-fit-window-to-buffer)
                ;; (org-agenda-redo)
                )))
        (call-interactively 'org-agenda-list)))
    ;;(let ((buf (get-buffer "*Calendar*")))
    ;;  (unless (get-buffer-window buf)
    ;;    (org-agenda-goto-calendar)))
    )

  (run-with-idle-timer 300 t 'jump-to-org-agenda)
#+END_SRC

* Sacha Chua config

*** Navigation

From http://stackoverflow.com/questions/15011703/is-there-an-emacs-org-mode-command-to-jump-to-an-org-heading

DGM 28 march changes first line following 
https://emacs.stackexchange.com/questions/32617/how-to-jump-directly-to-an-org-headline

Note that
"Setting org-goto-interface to one of the two recognised values does not mean sacrificing the alternative interface. Calling org-goto with a prefix argument (i.e. C-u C-c C-j or C-u M-x org-goto RET) automatically selects the alternative interface for the current completion. This way, you can set org-goto-interface to the interface you are likely to use most often and use the prefix argument when you wish to temporarily switch behaviour. If even this does not suit your needs, you can always write your own wrapper around org-goto, as per Att Righ's example."

See 
https://irreal.org/blog/?p=4170
for another presentation of =org-goto=.

#+begin_src emacs-lisp  :tangle yes
  ;;  (setq org-goto-interface 'outline
  (setq org-goto-interface 'outline-path-completion
        org-goto-max-level 10)
  (require 'imenu)
  (setq org-startup-folded nil)  ;; originally set to =nil=. When changed to =t= I think I don't see anything
  (bind-key "C-c j" 'org-clock-goto) ;; jump to current task from anywhere;; C-c C-x C-j does the job already but this is eaasier
  (bind-key "C-c C-w" 'org-refile)
  (setq org-cycle-include-plain-lists t) ;; originally set to ='integrate=. bern hansen has this set to =t=.
  (define-key org-agenda-mode-map "x" 'org-agenda-refile)
#+end_src

#+RESULTS:
: org-agenda-refile

If "x" disabled, then, by default, "x" is bound to exiting the org-agenda!
#+begin_src emacs-lisp :tangle no
  ;;(define-key org-agenda-mode-map "x" nil)
#+end_src

#+RESULTS:

*** Link Org subtrees and navigate between them
The following code makes it easier for me to link trees with entries, as in http://sachachua.com/evil-plans

#+begin_src emacs-lisp  :tangle yes
  (defun my/org-follow-entry-link ()
    "Follow the defined link for this entry."
    (interactive)
    (if (org-entry-get (point) "LINK")
        (org-open-link-from-string (org-entry-get (point) "LINK"))
      (org-open-at-point)))

  (defun my/org-link-projects (location)
    "Add link properties between the current subtree and the one specified by LOCATION."
    (interactive
     (list (let ((org-refile-use-cache nil))
             (org-refile-get-location "Location"))))
    (let ((link1 (org-store-link nil)) link2)
      (save-window-excursion
        (org-refile 4 nil location)
        (setq link2 (org-store-link nil))
        (org-set-property "LINK" link1))
      (org-set-property "LINK" link2)))
#+end_src

#+RESULTS:
: my/org-link-projects

*** Viewing, navigating, and editing the Org tree

I often cut and paste subtrees. This makes it easier to cut something and paste it elsewhere in the hierarchy.

#+begin_src emacs-lisp  :tangle yes
  (with-eval-after-load 'org
    (bind-key "s-<" 'org-cut-subtree org-mode-map)
    (setq org-yank-adjusted-subtrees t))
#+end_src

#+RESULTS:
: t

*** Date trees

This quickly adds a same-level heading for the succeeding day.

#+begin_src emacs-lisp  :tangle yes
  (defun my/org-insert-heading-for-next-day ()
    "Insert a same-level heading for the following day."
    (interactive)
    (let ((new-date
           (seconds-to-time
            (+ 86400.0
               (float-time
                (org-read-date nil 'to-time (elt (org-heading-components) 4)))))))
      (org-insert-heading-after-current)
      (insert (format-time-string "%Y-%m-%d\n\n" new-date))))
#+end_src

*** Allow refiling in the middle(ish) of a capture

This lets me use =C-c C-r= to refile a capture and then jump to the
new location. I wanted to be able to file tasks under projects so that
they could inherit the QUANTIFIED property that I use to track time
(and any Beeminder-related properties too), but I also wanted to be
able to clock in on them.

#+begin_src emacs-lisp :tangle yes
  (defun my/org-refile-and-jump ()
    (interactive)
    (if (derived-mode-p 'org-capture-mode)
        (org-capture-refile)
      (call-interactively 'org-refile))
    (org-refile-goto-last-stored))
  (eval-after-load 'org-capture
    '(bind-key "C-c C-r" 'my/org-refile-and-jump org-capture-mode-map))
#+end_src

#+RESULTS:
: my/org-refile-and-jump

*** Refiling

=org-refile= lets you organize notes by typing in the headline to file them under.

#+begin_src emacs-lisp :tangle no
  ;; (setq org-reverse-note-order t)
  ;; (setq org-refile-use-outline-path nil) ;; set to t above
  ;; (setq org-refile-allow-creating-parent-nodes 'confirm)
  ;; (setq org-refile-use-cache nil)
  ;; (setq org-refile-targets '((org-agenda-files . (:maxlevel . 3)))) ;; check if this is more efficient than my current code
  ;; (setq org-blank-before-new-entry nil)
#+end_src

*** Estimating HHHHWPM

I'm curious about how fast I type some things.

#+begin_src emacs-lisp :tangle yes
  (require 'org-clock)
  (defun my/org-entry-wpm ()
    (interactive)
    (save-restriction
      (save-excursion
        (org-narrow-to-subtree)
        (goto-char (point-min))
        (let* ((words (count-words-region (point-min) (point-max)))
               (minutes (org-clock-sum-current-item))
               (wpm (/ words minutes)))
          (message "WPM: %d (words: %d, minutes: %d)" wpm words minutes)
          (kill-new (number-to-string wpm))))))
#+end_src


#+RESULTS:
: my/org-entry-wpm

*** Projects

Projects are headings with the =:project:= tag, so we generally don't
want that tag inherited, except when we display unscheduled tasks that
don't belong to any projects.

- DGM comments this out to try and get a nice overview of projects and their actions

#+begin_src emacs-lisp :tangle no
  ;;(setq org-tags-exclude-from-inheritance '("project"))
#+end_src

This code makes it easy for me to focus on one project and its tasks.

#+begin_src emacs-lisp :tangle yes
  (add-to-list 'org-speed-commands-user '("N" org-narrow-to-subtree))
  (add-to-list 'org-speed-commands-user '("W" widen))

  (defun my/org-agenda-for-subtree ()
    (interactive)
    (when (derived-mode-p 'org-agenda-mode) (org-agenda-switch-to))
    (my/org-with-current-task
     (let ((org-agenda-view-columns-initially t))
       (org-agenda nil "t" 'subtree))))
  (add-to-list 'org-speed-commands-user '("T" my/org-agenda-for-subtree))
#+end_src

There's probably a proper way to do this, maybe with =<=. Oh, that would work nicely. =< C-c a t= too.

And sorting:

#+begin_src emacs-lisp :tangle yes
  (add-to-list 'org-speed-commands-user '("S" call-interactively 'org-sort))
#+end_src

*** Alphabetical lists
This variable needs to be set before org.el is loaded.  

Thid setting adds alphabetical lists like

#+begin_src org :exports src
  a. item one
  b. item two
#+end_src


#+begin_src emacs-lisp :tangle yes
  (setq org-list-allow-alphabetical t)
  ;;(setq org-alphabetical-lists t)
#+end_src

#+RESULTS:
: t

In order for filling to work correctly this needs to be set before the
exporters are loaded.

*** Track time

I use the clock a lot, says Sacha. Okay, but I think =I= in agenda does this.

#+BEGIN_SRC emacs-lisp :tangle no
  (with-eval-after-load 'org-agenda
    (bind-key "i" 'org-agenda-clock-in org-agenda-mode-map))
#+END_SRC

#+RESULTS:
: org-agenda-clock-in

#+begin_src emacs-lisp :tangle yes
  (use-package org
    :init
    (progn
      (setq org-expiry-inactive-timestamps t)
      (setq org-clock-idle-time nil)
      (setq org-log-done 'time)          ;; explained here: https://www.gnu.org/software/emacs/manual/html_node/org/Closing-items.html
      (setq org-clock-continuously nil)
      (setq org-clock-persist t)  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
      (setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
      (setq org-clock-in-resume t)  ;; t to Resume clocking task on clock-in if the clock is open
      ;; Do not prompt to resume an active clock
      (setq org-clock-persist-query-resume nil)
      (setq org-show-notification-handler 'message)
      (setq org-time-stamp-rounding-minutes (quote (0 5)))
      (setq org-clock-report-include-clocking-task t))
    :config
    (org-clock-persistence-insinuate)) ;; Resume clocking task when emacs is restarted

  (defun bh/clock-in-to-next (kw)
    "Switch a task from TODO to NEXT when clocking in.
  Skips capture tasks, projects, and subprojects.
  Switch projects and subprojects from NEXT back to TODO"
    (when (not (and (boundp 'org-capture-mode) org-capture-mode))
      (cond
       ((and (member (org-get-todo-state) (list "TODO"))
             (bh/is-task-p))
        "NEXT")
       ((and (member (org-get-todo-state) (list "NEXT"))
             (bh/is-project-p))
        "TODO"))))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23951 38814 686101 588000) :init (23951 38814 686064 64000) :config (23951 38814 685671 345000) :config-secs (0 0 924 872000) :init-secs (0 0 2300 743000) :use-package-secs (0 0 2834 977000)))

Too many clock entries clutter up a heading.

#+begin_src emacs-lisp :tangle yes
  (setq org-log-into-drawer "LOGBOOK")
  (setq org-clock-into-drawer t)
#+end_src

#+RESULTS:
: 1

*** =writequit= customization of org-clock
- https://writequit.org/denver-emacs/presentations/2017-04-11-time-clocking-with-org.html

My agenda org clock report settings show 6 levels of detail with links to the tasks. I like wider reports than the default compact setting so I override the :narrow value. 

Read: https://orgmode.org/manual/The-clock-table.html
Org mode can produce quite complex reports based on the time clocking information. Such a report is called a clock table, because it is formatted as one or several Org tables.

NB: I could try with =:block today=? Objective: to show only time spent today.

#+begin_src emacs-lisp :tangle yes
  ;; Agenda clock report parameters
  (setq org-agenda-clockreport-parameter-plist
        '(:link t :maxlevel 6 :fileskip0 t :compact t :narrow 80 :score 0))
#+end_src

#+RESULTS:
| :link | t | :maxlevel | 6 | :block | today | :fileskip0 | t | :compact | t | :narrow | 60 | :score | 0 |


TODO: understand what =:score 0= does.

**** Effort estimation

Then, you can hit =C-c C-x e= on a headline and be prompted for the "quick" efforts. So C-c C-x e 3 would select 45 minutes. 
#+begin_src emacs-lisp :tangle yes
  ;; global Effort estimate values
  ;; (setq org-global-properties
  ;;      '(("Effort_ALL" .
  ;;         "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")))
  ;;        1    2    3    4    5    6    7    8    9    0
  ;; These are the hotkeys ^^

  (setq org-global-properties (quote (("Effort_ALL" . "0:05 0:10 0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                      ("STYLE_ALL" . "habit"))))
#+end_src

#+RESULTS:
: ((Effort_ALL . 0:05 0:10 0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00) (STYLE_ALL . habit))

**** Column-based presentation of results
  
The column view turns each outline item into a table row displaying some of its properties.
Column view is normally used to view and edit properties embedded in the hierarchical structure of an Org file.
In fact, you can edit properties from the column view. It lets you access and edit any property very quickly.

- Use =v= to display the field value in the minibuffer.
- Use =e= to interactively select/edit the value in the minibuffer.
- Use =S-left/right= to cycle through the allowed values in a field.
- Use =a= to edit the allowed values for this property.

***** Column-view from the agenda
It can be quite useful to use column view also from the agenda, where entries are collected by certain criteria.
The first headline is now a row of browsable columns displaying properties. The first highlighted line of the buffer briefly tells you what property is displayed in each columns. 

We need to define some columns to see, I like to define mine as the task, then the priority, the effort, and finally the sum of time taken for the task: 

={:}= means: display a summary (total) of effort field, by adding all the time values found in the property "Effort".

When the column view in the agenda shows the CLOCKSUM_T, that is always today’s clocked time for this item. So even in the weekly agenda, the clocksum listed in column view only originates from today. This lets you compare the time you spent on a task for today, with the time already spent —via CLOCKSUM—and with the planned total effort for it. (info from: https://orgmode.org/manual/Agenda-column-view.html)

When the column view in the agenda shows the CLOCKSUM, that is always the entire clocked time for this item. So even in the daily/weekly agenda, the clocksum listed in column view may originate from times outside the current view. This has the advantage that you can compare these values with a column listing the planned total effort for a task—one of the major applications for column view in the agenda.

If you want information about clocked time in the displayed period use clock table mode (press R in the agenda).

DGM: =%2PRIORITY= deleted (originally between context and state), as I don't use priorities.

#+begin_src emacs-lisp :tangle yes
  ;; Set default column view headings: Task Priority Effort Clock_Summary
  (setq org-columns-default-format "%50ITEM(Task) %15TAGS(Context) %7TODO(State) %20SCHEDULED(Scheduled) %6Effort(Effort){:} %CLOCKSUM_T(Tday'sHrs){:} %CLOCKSUM(TotalHrs){:}")  
#+end_src

#+RESULTS:
: %50ITEM(Task) %15TAGS(Context) %7TODO(State) %20SCHEDULED(Scheduled) %6Effort(Effort){:} %CLOCKSUM_T(Tday'sHrs){:} %CLOCKSUM(TotalHrs){:}

You can now turn on org-columns with =C-c C-x C-c=, you should see something like the following screenshots. =q= to quit.

Also, you can move to the "Effort" column and hit 0-9 to fast-choose the amount of effort for a task also, instead of adding effort to each individual headline one at a time. 

**** History of tasks to pick from

I like to have a helpful history of tasks to pick from when I clock in to things. Which is what this does. 
I bind it to =C-c I= and =C-c O= so they can be invoked globally (not just in org-mode files). 

#+begin_src emacs-lisp :tangle yes
  ;; Show lot of clocking history so it's easy to pick items off the `C-c I` list
  (setq org-clock-history-length 23)

  (defun eos/org-clock-in ()
    (interactive)
    (org-clock-in '(4)))

  (global-set-key (kbd "C-c I") #'eos/org-clock-in)
  (global-set-key (kbd "C-c O") #'org-clock-out)
#+end_src

#+RESULTS:
: org-clock-out

**** More 

#+begin_src emacs-lisp :tangle yes
  ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks
  ;; with 0:00 duration
  (setq org-clock-out-remove-zero-time-clocks t)
  ;; Clock out when moving task to a done state
  (setq org-clock-out-when-done t)
  ;; Enable auto clock resolution for finding open clocks
  (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
  ;; Include current clocking task (unfinished clocks) in clock reports without clocking out (line already included)
  ;; (setq org-clock-report-include-clocking-task t)
  ;; use pretty things for the clocktable
  (setq org-pretty-entities t)
#+end_src

*** Speed commands

These are great for quickly acting on tasks. 

DGM: but they're not working for me.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-use-effective-time t)

  (defun my/org-use-speed-commands-for-headings-and-lists ()
    "Activate speed commands on list items too."
    (or (and (looking-at org-outline-regexp) (looking-back "^\**"))
        (save-excursion (and (looking-at (org-item-re)) (looking-back "^[ \t]*")))))
  (setq org-use-speed-commands 'my/org-use-speed-commands-for-headings-and-lists)

  ;;(with-eval-after-load 'org
  ;; (add-to-list 'org-speed-commands-user '("x" org-todo "DONE"))
  ;; (add-to-list 'org-speed-commands-user '("y" org-todo-yesterday "DONE"))
  ;; (add-to-list 'org-speed-commands-user '("!" my/org-clock-in-and-track)) ;; I don't use quantified-awesome
  ;; (add-to-list 'org-speed-commands-user '("s" call-interactively 'org-schedule)) ;; s saves all buffers for me
  ;; (add-to-list 'org-speed-commands-user '("d" my/org-move-line-to-destination))
  ;; (add-to-list 'org-speed-commands-user '("i" call-interactively 'org-clock-in))
  ;;   (add-to-list 'org-speed-commands-user '("P" call-interactively 'org2blog/wp-post-subtree))
  ;; (add-to-list 'org-speed-commands-user '("o" call-interactively 'org-clock-out))
  ;; (add-to-list 'org-speed-commands-user '("$" call-interactively 'org-archive-subtree))
  ;; (bind-key "!" 'my/org-clock-in-and-track org-agenda-mode-map))
#+END_SRC

#+RESULTS:
: my/org-clock-in-and-track

*** Overlaps

From: http://doc.norang.ca/org-mode.html

#+begin_src emacs-lisp :tangle yes
  (setq org-agenda-clock-consistency-checks
        (quote (:max-duration "4:00"
                              :min-duration 0
                              :max-gap 0
                              :gap-ok-around ("4:00"))))
#+end_src

#+RESULTS:
| :max-duration | 4:00 | :min-duration | 0 | :max-gap | 0 | :gap-ok-around | (4:00) |

*** Modules
Org has a whole bunch of optional modules. These are the ones I'm
currently experimenting with.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-modules '(;;org-bbdb
                      ;;org-gnus
                      org-drill
                      ;;org-info
                      ;;org-jsinfo
                      ;;org-irc
                      ;;org-mouse
                      org-protocol
                      org-eww
                      ;;org-annotate-file
                      ;;org-eval
                      ;;org-expiry
                      ;;org-interactive-query
                      ;;org-man
                      ;;org-collector
                      ;;org-panel
                      ;;org-screen
                      ;;org-toc
                      org-habit
                      org-clock))
  (eval-after-load 'org
    '(org-load-modules-maybe t))
#+END_SRC

#+RESULTS:
: t

On the other hand, https://www.youtube.com/watch?v=wwW_1BQKGZ0 recommends using =use-package= for =org-drill= but if I try to download it, it doesn't exist!

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package org-drill
    :ensure t)
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23740 30446 277086 757000) :init (23740 30446 277078 344000) :config (23740 30446 276902 462000) :config-secs (0 0 65 157000) :init-secs (0 0 497 24000) :use-package-secs (0 4 248697 983000)))

**** Org-drill customization

Enable random "noise" for item itervals.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-drill-add-random-noise-to-intervals-p t)
  (setq org-drill-cram-hours 0) ;; by default 12
#+END_SRC

#+RESULTS:
: 0

***** TODO Read this webpage on org-drill
- https://orgmode.org/worg/org-contrib/org-drill.html

*** org-habit

Yiufung: Org-habit tracks consistency of TODO item finish states. It produces a nice graph in Org-agenda that I can at one glance know whether I’m on track.

=!= means today and =*= means a task has been done on that day. The color interpretation is intuitive: Green means on track, yellow warning sign of overdue, red overdue, and blue ``still early, don't feel bad taking a break''.

What's really useful about habits is that they are displayed along with a consistency graph, to show how consistent you’ve been at getting that task done in the past.

I like using =org-habits= to track consistency. My task names tend to be a bit long, though, so I've configured the graph column to show a little bit more to the right.

#+begin_src emacs-lisp :tangle yes
  ;;(setq org-habit-show-habits-only-for-today nil)
  ;; (require 'org-habit) ;; yiufung includes this line

  (setq org-habit-preceding-days 30
        org-habit-following-days 7
        org-habit-graph-column 70
        org-habit-show-habits-only-for-today t
        org-habit-show-all-today t)
  ;; (setq org-habit-show-done-always-green t)
#+end_src

#+RESULTS:
: t

If you want to use habits, be sure to schedule your tasks and add a STYLE property with the value of =habit= to the tasks you want displayed.

**** Meaning of colors

- Blue If the task wasn't to be done yet on that day.
- Green If the task could have been done on that day.
- Yellow If the task was going to be overdue the next day.
- Red If the task was overdue on that day.

**** Meaning of codes
- Asterisk if the task was actually done that day.
- Exclamation mark to show where the current day falls in the graph.

*** Repair property drawers

At once I stopped seeing the org-habit graph. The reason has to do with the location of the property drawer. This is similar to the issue I had time ago with scheduled dates. If the schedule or deadline is not immediately below the heading, I think, it does not show. The answer to this plight is the following function:

NB: The function is given in the record of issues written on occasion of Org v.8.3 when there were properties drawers syntax changes: Properties drawers are now required to be located right after a headline and its planning line, when applicable.  It will break some documents as TODO states changes were sometimes logged before the property drawer.

See https://orgmode.org/Changes_old.html

So, with 

#+BEGIN_EXAMPLE
\** TODO emacs learning                      
SCHEDULED: <2019-09-09 Mon +1d>
:PROPERTIES:
:Effort:   1:00
:STYLE:    habit
:END:

Entry added on: [2019-09-08 Sun 21:57] from [[file:~/Dropbox/gtd/inbox.org::*DataCamp%20course][DataCamp course]]
#+END_EXAMPLE

I have the habit for the current day and its graph but not an entry for this TODO every day in my calendar. Now I am thinking this is probably the point of it all.
Notice also that I only get habits in the org-habit graph for today when they have an scheduled date. I even get habits that are not scheduled for today but for way into the future. If I don't scheduled the habit, I don't get the graph for it today.

For the scheduled task to show every day I have to leave a space between =Scheduled= and =Properties= but in that case I don't get this entry in the list of habits.

#+BEGIN_EXAMPLE
\** TODO emacs learning                      
SCHEDULED: <2019-09-09 Mon +1d>

:PROPERTIES:
:Effort:   1:00
:STYLE:    habit
:END:
#+END_EXAMPLE

#+begin_src emacs-lisp :tangle yes
  (defun org-repair-property-drawers ()
    "Fix properties drawers in current buffer.
   Ignore non Org buffers."
    (interactive)
    (when (eq major-mode 'org-mode)
      (org-with-wide-buffer
       (goto-char (point-min))
       (let ((case-fold-search t)
             (inline-re (and (featurep 'org-inlinetask)
                             (concat (org-inlinetask-outline-regexp)
                                     "END[ \t]*$"))))
         (org-map-entries
          (lambda ()
            (unless (and inline-re (org-looking-at-p inline-re))
              (save-excursion
                (let ((end (save-excursion (outline-next-heading) (point))))
                  (forward-line)
                  (when (org-looking-at-p org-planning-line-re) (forward-line))
                  (when (and (< (point) end)
                             (not (org-looking-at-p org-property-drawer-re))
                             (save-excursion
                               (and (re-search-forward org-property-drawer-re end t)
                                    (eq (org-element-type
                                         (save-match-data (org-element-at-point)))
                                        'drawer))))
                    (insert (delete-and-extract-region
                             (match-beginning 0)
                             (min (1+ (match-end 0)) end)))
                    (unless (bolp) (insert "\n"))))))))))))
  ;; (global-set-key (kbd "C-c i") 'org-repair-property-drawers)
#+end_src

#+RESULTS:
: org-repair-property-drawers

*** Modifying org agenda so that I can display a subset of tasks

I want to create an agenda command that displays a list of tasks by
context. That way, I can quickly preview a bunch of contexts and
decide what I feel like doing the most.

#+begin_src emacs-lisp :tangle yes
  (defvar my/org-agenda-limit-items nil "Number of items to show in agenda to-do views; nil if unlimited.")
  (eval-after-load 'org
    '(defadvice org-agenda-finalize-entries (around sacha activate)
       (if my/org-agenda-limit-items
           (progn
             (setq list (mapcar 'org-agenda-highlight-todo list))
             (setq ad-return-value
                   (subseq list 0 my/org-agenda-limit-items))
             (when org-agenda-before-sorting-filter-function
               (setq list (delq nil (mapcar org-agenda-before-sorting-filter-function list))))
             (setq ad-return-value
                   (mapconcat 'identity
                              (delq nil
                                    (subseq
                                     (sort list 'org-entries-lessp)
                                     0
                                     my/org-agenda-limit-items))
                              "\n")))
         ad-do-it)))
#+end_src

*** Task dependencies

#+begin_src emacs-lisp :tangle yes
  ;; (setq org-enforce-todo-dependencies t)
  (setq org-track-ordered-property-with-tag t)
  (setq org-agenda-dim-blocked-tasks t)
#+end_src

*** COMMENT Structure templates

Org makes it easy to insert blocks by typing =<s[TAB]=, etc. I hardly ever use LaTeX, but I insert a lot of Emacs Lisp blocks, so I redefine =<l= to insert a Lisp block instead. 

DGM: Commented out as I use yasnippet for this.

#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-structure-template-alist
        '(("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
          ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
          ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
          ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
          ("c" "#+BEGIN_COMMENT\n?\n#+END_COMMENT")
          ("p" "#+BEGIN_PRACTICE\n?\n#+END_PRACTICE")
          ("l" "#+begin_src emacs-lisp\n?\n#+end_src" "<src lang=\"emacs-lisp\">\n?\n</src>")
          ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
          ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
          ("H" "#+html: " "<literal style=\"html\">?</literal>")
          ("a" "#+begin_ascii\n?\n#+end_ascii")
          ("A" "#+ascii: ")
          ("i" "#+index: ?" "#+index: ?")
          ("I" "#+include %file ?" "<include file=%file markup=\"?\">")))
#+END_SRC

*** Great for quickly going through the to-do list. Gets rid of one extra keystroke. ;) 

DGM: I don't need it. Kept typing it by mistake!

#+BEGIN_SRC emacs-lisp :tangle no
  (defun my/org-agenda-done (&optional arg)
    "Mark current TODO as done.
  This changes the line at point, all other lines in the agenda referring to
  the same tree node, and the headline of the tree node in the Org-mode file."
    (interactive "P")
    (org-agenda-todo "DONE"))
  ;; Override the key definition for org-exit
  (define-key org-agenda-mode-map "x" 'my/org-agenda-done)
#+END_SRC

#+RESULTS:
: my/org-agenda-done


*** COMMENT Make it easy to mark a task as done and create a follow-up task

DGM: Idem.

#+begin_src emacs-lisp :tangle no
  (defun my/org-agenda-mark-done-and-add-followup ()
    "Mark the current TODO as done and add another task after it.
  Creates it at the same level as the previous task, so it's better to use
  this with to-do items than with projects or headings."
    (interactive)
    (org-agenda-todo "DONE")
    (org-agenda-switch-to)
    (org-capture 0 "t"))
  ;; Override the key definition
  (define-key org-agenda-mode-map "X" 'my/org-agenda-mark-done-and-add-followup)
#+end_src

#+RESULTS:
: my/org-agenda-mark-done-and-add-followup

*** Capture something based on the agenda

DGM: idem
#+begin_src emacs-lisp :tangle no
  (defun my/org-agenda-new ()
    "Create a new note or task at the current agenda item.
  Creates it at the same level as the previous task, so it's better to use
  this with to-do items than with projects or headings."
    (interactive)
    (org-agenda-switch-to)
    (org-capture 0))
  ;; New key assignment
  ;;;;; (define-key org-agenda-mode-map "N" 'my/org-agenda-new)
#+end_src

*** Preventing things from falling through the cracks

This helps me keep track of unscheduled tasks, because I sometimes
forget to assign tasks a date. I also want to keep track of stuck projects.

DGM: I don't find this function... ahh, it's not interactive!

#+begin_src emacs-lisp :tangle yes
  (defun my/org-agenda-list-unscheduled (&rest ignore)
    "Create agenda view for tasks that are unscheduled and not done."
    (let* ((org-agenda-todo-ignore-with-date t)
           (org-agenda-overriding-header "List of unscheduled tasks: "))
      (org-agenda-get-todos)))
  (setq org-stuck-projects
        '("+PROJECT-MAYBE-DONE"
          ("TODO")
          nil
          "\\<IGNORE\\>"))
#+end_src

#+RESULTS:
| +PROJECT-MAYBE-DONE | (TODO) | nil | \<IGNORE\> |

*** Projects
DGM: no need for this, as I have a Project overview in Org-agenda. Plus I have the command =my-org-project-list= by the great Carsten.

#+begin_src emacs-lisp :tangle no
  (defun my/org-show-active-projects ()
    "Show my current projects."
    (interactive)
    (org-tags-view nil "project-inactive-someday"))
#+end_src

*** Quickly refiling Org Mode notes to headings in the same file

I wanted a quick way to organize random notes from my inbox into an
outline, organizing from the bottom up instead of starting with a
top-down hierarchy. My old code for refiling to an Org heading in the
current buffer didn't work any more, but =helm-org-in-buffer-headings=
seems to be promising. I made it a speed command (see the value of
=org-use-speed-commands= elsewhere in my config) so that I can easily
refile. 

DGM: turning this off, as I don't understand it.

#+begin_src emacs-lisp :tangle no
  (defvar my/org-last-refile-marker nil "Marker for last refile")
  (defun my/org-refile-in-file (&optional prefix)
    "Refile to a target within the current file."
    (interactive)
    (let ((helm-org-headings-actions
           '(("Refile to this heading" . helm-org-heading-refile))))
      (save-excursion
        (helm-org-in-buffer-headings)
        (org-end-of-subtree t)
        (setq my/org-last-refile-marker (point-marker)))))

  (defun my/org-refile-to-previous ()
    "Refile subtree to last position from `my/org-refile-in-file'."
    (interactive)
    (save-selected-window
      (when (eq major-mode 'org-agenda-mode)
        (org-agenda-switch-to))
      (org-cut-subtree)
      (save-excursion
        (let* ((marker my/org-last-refile-marker)
               (target-level
                (with-current-buffer (marker-buffer marker)
                  (goto-char (marker-position marker))
                  (org-current-level))))
          (helm-org-goto-marker marker)
          (org-end-of-subtree t t)
          (org-paste-subtree target-level)))))

  (add-to-list 'org-speed-commands-user '("w" call-interactively 'my/org-refile-in-file))
  (add-to-list 'org-speed-commands-user '("." call-interactively 'my/org-refile-to-previous))
#+end_src

TODO: Figure out why I'm getting duplicates. Next step might be to fiddle with =helm-org-in-buffer-headings= so that it preselects the previous candidate, but that can happen later.

Tech note: helm-org doesn't use the usual org-refile mechanism. Instead, it
cuts the subtree, goes to the marker, and pastes it in at the
appropriate level.

*** Inserting code

#+begin_src emacs-lisp  :eval no :tangle yes
  (defun my/org-insert-defun (function)
    "Inserts an Org source block with the definition for FUNCTION."
    (interactive (find-function-read))
    (let* ((buffer-point (condition-case nil (find-definition-noselect function nil) (error nil)))
           (new-buf (car buffer-point))
           (new-point (cdr buffer-point))
           definition)
      (if buffer-point        
          (with-current-buffer new-buf ;; Try to get original definition
            (save-excursion
              (goto-char new-point)
              (setq definition (buffer-substring-no-properties (point) (save-excursion (end-of-defun) (point))))))
        ;; Fallback: Print function definition
        (setq definition (concat (prin1-to-string (symbol-function function)) "\n")))
      (insert "#+begin_src emacs-lisp :tangle yes\n" definition "#+end_src\n")))
#+end_src


*** Counting

Good way to remind myself that I have lots of STARTED tasks.

#+begin_src emacs-lisp :tangle yes
  (defun my/org-summarize-task-status ()
    "Count number of tasks by status.
  Probably should make this a dblock someday."
    (interactive)
    (let (result)
      (org-map-entries
       (lambda ()
         (let ((todo (elt (org-heading-components) 2)))
           (if todo
               (if (assoc todo result)
                   (setcdr (assoc todo result)
                           (1+ (cdr (assoc todo result))))
                 (setq result (cons (cons todo 1) result)))))))
      (message "%s" (mapconcat (lambda (x) (format "%s: %d" (car x) (cdr x)))
                               result "\n"))))
#+end_src

*** Spreadsheets
#+begin_src emacs-lisp :tangle yes
  (defun my/org-days-between (start end)
    "Number of days between START and END (exclusive).
    This includes START but not END."
    (- (calendar-absolute-from-gregorian (org-date-to-gregorian end))
       (calendar-absolute-from-gregorian (org-date-to-gregorian start))))
#+end_src

How to use it? =(my/org-days-between <2019-01-01 Tue> <2019-09-21 Sat>)=? 

*** Autosave

Could be handy, especially when synchronizing with Orgzly. From
https://www.reddit.com/r/orgmode/comments/7ke3hv/orgzly_best_practice/ 

#+BEGIN_SRC emacs-lisp :tangle yes
  (run-with-idle-timer 30 t 'org-save-all-org-buffers)
#+END_SRC

*** Org agenda
**** Basic configuration
:PROPERTIES:
:CUSTOM_ID: project_subtasks
:END:
I have quite a few Org files, but I keep my agenda items and TODOs in
only a few of them for faster scanning.

I like looking at two days at a time when I plan using the Org
agenda. I want to see my log entries, but I don't want to see
scheduled items that I've finished. I like seeing a time grid so that
I can get a sense of how appointments are spread out.

#+begin_src emacs-lisp :tangle yes
  (setq org-agenda-span 'day) ;; today's date is shown by default
  (setq org-agenda-tags-column -100) ; take advantage of the screen width
  (setq org-agenda-inhibit-startup t)
  (setq org-agenda-use-tag-inheritance t)
  (setq org-agenda-show-log t)
  ;;  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  ;; (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
  ;;  (setq org-agenda-time-grid
  ;;        '((daily today require-timed)
  ;;         "----------------"
  ;;         (800 1000 1200 1400 1600 1800)))
  ;; (setq org-columns-default-format "%14SCHEDULED %Effort{:} %1PRIORITY %TODO %50ITEM %TAGS") ;; I don't have some of these
#+end_src

#+RESULTS:
: pre-scheduled

*** Display projects with associated subtasks
:PROPERTIES:
:CUSTOM_ID: agenda_commands
:END:

I wanted a view that showed projects with a few subtasks underneath
them. Here's a sample of the output:

#+begin_example
Headlines with TAGS match: +PROJECT
Press `C-u r' to search again with new search string
  organizer:  Set up communication processes for Awesome Foundation Toronto
  organizer:  TODO Announce the next pitch night
  organizer:  TODO Follow up with the winner of the previous pitch night for any news to include in the updates

  organizer:  Tidy up the house so that I can find things quickly
  organizer:  TODO Inventory all the things in closets and boxes         :@home:
  organizer:  TODO Drop things off for donation                       :@errands:

  organizer:  Learn how to develop for Android devices
#+end_example

#+begin_src emacs-lisp :tangle yes
  (defun my/org-agenda-project-agenda ()
    "Return the project headline and up to `my/org-agenda-limit-items' tasks."
    (save-excursion
      (let* ((marker (org-agenda-new-marker))
             (heading
              (org-agenda-format-item "" (org-get-heading) (org-get-category) nil))
             (org-agenda-restrict t)
             (org-agenda-restrict-begin (point))
             (org-agenda-restrict-end (org-end-of-subtree 'invisible))
             ;; Find the TODO items in this subtree
             (list (org-agenda-get-day-entries (buffer-file-name) (calendar-current-date) :todo)))
        (org-add-props heading
            (list 'face 'defaults
                  'done-face 'org-agenda-done
                  'undone-face 'default
                  'mouse-face 'highlight
                  'org-not-done-regexp org-not-done-regexp
                  'org-todo-regexp org-todo-regexp
                  'org-complex-heading-regexp org-complex-heading-regexp
                  'help-echo
                  (format "mouse-2 or RET jump to org file %s"
                          (abbreviate-file-name
                           (or (buffer-file-name (buffer-base-buffer))
                               (buffer-name (buffer-base-buffer))))))
          'org-marker marker
          'org-hd-marker marker
          'org-category (org-get-category)
          'type "tagsmatch")
        (concat heading "\n"
                (org-agenda-finalize-entries list)))))

  (defun my/org-agenda-projects-and-tasks (match)
    "Show TODOs for all `org-agenda-files' headlines matching MATCH."
    (interactive "MString: ")
    (let ((todo-only nil))
      (if org-agenda-overriding-arguments
          (setq todo-only (car org-agenda-overriding-arguments)
                match (nth 1 org-agenda-overriding-arguments)))
      (let* ((org-tags-match-list-sublevels
              org-tags-match-list-sublevels)
             (completion-ignore-case t)
             rtn rtnall files file pos matcher
             buffer)
        (when (and (stringp match) (not (string-match "\\S-" match)))
          (setq match nil))
        (when match
          (setq matcher (org-make-tags-matcher match)
                match (car matcher) matcher (cdr matcher)))
        (catch 'exit
          (if org-agenda-sticky
              (setq org-agenda-buffer-name
                    (if (stringp match)
                        (format "*Org Agenda(%s:%s)*"
                                (or org-keys (or (and todo-only "M") "m")) match)
                      (format "*Org Agenda(%s)*" (or (and todo-only "M") "m")))))
          (org-agenda-prepare (concat "TAGS " match))
          (org-compile-prefix-format 'tags)
          (org-set-sorting-strategy 'tags)
          (setq org-agenda-query-string match)
          (setq org-agenda-redo-command
                (list 'org-tags-view `(quote ,todo-only)
                      (list 'if 'current-prefix-arg nil `(quote ,org-agenda-query-string))))
          (setq files (org-agenda-files nil 'ifmode)
                rtnall nil)
          (while (setq file (pop files))
            (catch 'nextfile
              (org-check-agenda-file file)
              (setq buffer (if (file-exists-p file)
                               (org-get-agenda-file-buffer file)
                             (error "No such file %s" file)))
              (if (not buffer)
                  ;; If file does not exist, error message to agenda
                  (setq rtn (list
                             (format "ORG-AGENDA-ERROR: No such org-file %s" file))
                        rtnall (append rtnall rtn))
                (with-current-buffer buffer
                  (unless (derived-mode-p 'org-mode)
                    (error "Agenda file %s is not in `org-mode'" file))
                  (save-excursion
                    (save-restriction
                      (if org-agenda-restrict
                          (narrow-to-region org-agenda-restrict-begin
                                            org-agenda-restrict-end)
                        (widen))
                      (setq rtn (org-scan-tags 'my/org-agenda-project-agenda matcher todo-only))
                      (setq rtnall (append rtnall rtn))))))))
          (if org-agenda-overriding-header
              (insert (org-add-props (copy-sequence org-agenda-overriding-header)
                          nil 'face 'org-agenda-structure) "\n")
            (insert "Headlines with TAGS match: ")
            (add-text-properties (point-min) (1- (point))
                                 (list 'face 'org-agenda-structure
                                       'short-heading
                                       (concat "Match: " match)))
            (setq pos (point))
            (insert match "\n")
            (add-text-properties pos (1- (point)) (list 'face 'org-warning))
            (setq pos (point))
            (unless org-agenda-multi
              (insert "Press `C-u r' to search again with new search string\n"))
            (add-text-properties pos (1- (point)) (list 'face 'org-agenda-structure)))
          (org-agenda-mark-header-line (point-min))
          (when rtnall
            (insert (mapconcat 'identity rtnall "\n") ""))
          (goto-char (point-min))
          (or org-agenda-multi (org-agenda-fit-window-to-buffer))
          (add-text-properties (point-min) (point-max)
                               `(org-agenda-type tags
                                                 org-last-args (,todo-only ,match)
                                                 org-redo-cmd ,org-agenda-redo-command
                                                 org-series-cmd ,org-cmd))
          (org-agenda-finalize)
          (setq buffer-read-only t)))))
#+end_src

#+RESULTS:
: my/org-agenda-projects-and-tasks

*** Org agenda custom commands

There are quite a few custom commands here, and I often forget to use
them. =) But it's good to define them, and over time, I'll get the
hang of using these more!

| Key         | Description                                                                                    |
| .           | What am I waiting for?                                                                         |
| T           | Not really an agenda command - shows the to-do tree in the current file                        |
| b           | Shows business-related tasks                                                                   |
| o           | Shows personal tasks and miscellaneous tasks (o: organizer)                                    |
| w           | Show all tasks for the upcoming week                                                           |
| W           | Show all tasks for the upcoming week, aside from the routine ones                              |
| g ...       | Show tasks by context: b - business; c - coding; w - writing; p - phone; d - drawing, h - home |
| 0           | Show common contexts with up to 3 tasks each, so that I can choose what I feel like working on |
| ) (shift-0) | Show common contexts with all the tasks associated with them                                   |
| 9           | Show common contexts with up to 3 unscheduled tasks each                                       |
| ( (shift-9) | Show common contexts with all the unscheduled tasks associated with them                       |
| d           | Timeline for today (agenda, clock summary)                                                     |
| u           | Unscheduled tasks to do if I have free time                                                    |
| U           | Unscheduled tasks that are not part of projects                                                |
| P           | Tasks by priority                                                                              |
| p           | My projects                                                                                    |
| 2           | Projects with tasks                                                                            |

*** Archiving
    
From http://stackoverflow.com/questions/6997387/how-to-archive-all-the-done-tasks-using-a-single-command

#+begin_src emacs-lisp :tangle yes
  (defun my/org-archive-done-tasks ()
    "Archive finished or cancelled tasks."
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (outline-previous-heading)))
     "TODO=\"DONE\"|TODO=\"CANCELED\"" (if (org-before-first-heading-p) 'file 'tree)))
#+end_src

Also, don't ask me for confirmation:

#+begin_src emacs-lisp :tangle yes
  (add-to-list 'org-speed-commands-user '("a" call-interactively 'org-archive-subtree-default))
#+end_src

*** Self-tracking, statistics, and other data transformations
**** Quantified Awesome
:PROPERTIES:
:CUSTOM_ID: clock-in
:END:
<<clock-in>>


#+begin_src emacs-lisp :tangle yes
  (defmacro my/org-with-current-task (&rest body)
    "Execute BODY with the point at the subtree of the current task."
    `(if (derived-mode-p 'org-agenda-mode)
         (save-window-excursion
           (org-agenda-switch-to)
           ,@body)
       ,@body))

  (defun my/org-clock-in-and-track ()
    "Start the clock running. Clock into Quantified Awesome."
    (interactive)
    (my/org-with-current-task
     (org-clock-in)
     (call-interactively 'my/org-quantified-track)
     (when (org-entry-get (point) "AUTO")
       (org-open-link-from-string (org-entry-get (point) "AUTO")))))
  ;;;;  (bind-key "!" 'my/org-clock-in-and-track org-agenda-mode-map)

  (defmacro my/with-org-task (&rest body)
    "Run BODY within the current agenda task, clocked task, or cursor task."
    `(cond
      ((derived-mode-p 'org-agenda-mode)
       (let* ((marker (org-get-at-bol 'org-marker))
              (buffer (marker-buffer marker))
              (pos (marker-position marker)))
         (with-current-buffer buffer
           (save-excursion
             (save-restriction
               (widen)
               (goto-char pos)
               ,@body)))))
      ((and (derived-mode-p 'org-mode) (org-at-heading-p)) (save-excursion ,@body))
      ((org-clocking-p) (save-excursion (org-clock-goto) ,@body))
      ((derived-mode-p 'org-mode) ,@body)))

  (defun my/org-quantified-track (&optional category note)
    "Create a tracking record using CATEGORY and NOTE.
    Default to the current task in the agenda, the currently-clocked
    entry, or the current subtree in Org."
    (interactive (list nil nil))
    (unless (and category note)
      (my/with-org-task
       (setq category (or category
                          (org-entry-get-with-inheritance "QUANTIFIED")))
       (cond
        ((null category)
         (setq category (read-string "Category: "))
         (org-set-property "QUANTIFIED" category))
        ((string= category "ask")
         (setq category (read-string "Category: "))))
       (setq note
             (concat
              (if (string= (or (org-entry-get-with-inheritance "QUANTIFIEDQUIET") "") "t")
                  "!private "
                "")
              (or note (elt (org-heading-components) 4) (read-string "Note: "))))))
    (quantified-track (concat category " | " note)))

  (defun my/org-quick-clock-in-task (location jump)
    "Track and clock in on the specified task.
    If JUMP is non-nil or the function is called with the prefix argument, jump to that location afterwards."
    (interactive (list (save-excursion (my/org-refile-get-location "Location")) current-prefix-arg))
    (when location
      (if jump
          (progn (org-refile 4 nil location) (my/org-clock-in-and-track))
        (save-window-excursion
          (org-refile 4 nil location)
          (my/org-clock-in-and-track)))))
  (bind-key "C-c q" 'my/org-quick-clock-in-task)

  (require 'quantified nil t)
#+end_src

#+RESULTS:

**** COMMENT Compare times and effort estimates
:PROPERTIES:
:CUSTOM_ID: compare-time
:END:
<<compare-time>>

This is for comparing times in column view and in tables.

DGM: not using it. 

#+begin_src emacs-lisp :tangle no
  (defun my/compare-times (clocked estimated)
    (if (and (> (length clocked) 0) estimated)
        (format "%.2f"
                (/ (* 1.0 (org-hh:mm-string-to-minutes clocked))
                   (org-hh:mm-string-to-minutes estimated)))
      ""))
#+end_src

Use with =#+COLUMNS: %40ITEM %17Effort(Estimated){:} %CLOCKSUM=, =#+BEGIN: columnview :hlines 1= ... =#+END:=, and

#+begin_src org :tangle yes
  ,#+TBLFM: $4='(my/compare-times $3 $2)
#+end_src

*** Org - send things to the bottom of the list

Handy for collecting items together.

#+begin_src emacs-lisp :tangle yes
  (defun my/org-send-to-bottom-of-list ()
    "Send the current line to the bottom of the list."
    (interactive)
    (beginning-of-line)
    (let ((kill-whole-line t))
      (save-excursion
        (kill-line 1)
        (org-end-of-item-list)
        (yank))))
#+end_src

#+RESULTS:
: my/org-send-to-bottom-of-list

*** COMMENT Reviews
DGM: way too complicted for me
**** COMMENT Weekly review
:PROPERTIES:
:CUSTOM_ID: weekly-review
:END:

<<weekly-review>>

I regularly post [[http://sachachua.com/blog/category/weekly][weekly reviews]] to keep track of what I'm done,
remind me to plan for the upcoming week, and list blog posts,
sketches, and links. I want to try out grouping tasks by topic first,
then breaking it down into previous/next week.

#+begin_src emacs-lisp :tangle no
  (defvar my/weekly-review-line-regexp
    "^  \\([^:]+\\): +\\(Sched[^:]+: +\\)?TODO \\(.*?\\)\\(?:[      ]+\\(:[[:alnum:]_@#%:]+:\\)\\)?[        ]*$"
    "Regular expression matching lines to include.")
  (defvar my/weekly-done-line-regexp
    "^  \\([^:]+\\): +.*?\\(?:Clocked\\|Closed\\):.*?\\(TODO\\|DONE\\) \\(.*?\\)\\(?:[       ]+\\(:[[:alnum:]_@#%:]+:\\)\\)?[        ]*$"
    "Regular expression matching lines to include as completed tasks.")

  (defun my/quantified-get-hours (category time-summary)
    "Return the number of hours based on the time summary."
    (if (stringp category)
        (if (assoc category time-summary) (/ (cdr (assoc category time-summary)) 3600.0) 0)
      (apply '+ (mapcar (lambda (x) (my/quantified-get-hours x time-summary)) category))))

  (defun _my/extract-tasks-from-agenda (string matchers prefix line-re)
    (with-temp-buffer
      (insert string)
      (goto-char (point-min))
      (while (re-search-forward line-re nil t)
        (let ((temp-list matchers))
          (while temp-list
            (if (save-match-data
                  (string-match (car (car temp-list)) (match-string 1)))
                (progn
                  (add-to-list (cdr (car temp-list)) (concat prefix (match-string 3)) t)
                  (setq temp-list nil)))
            (setq temp-list (cdr temp-list)))))))

  (ert-deftest _my/extract-tasks-from-agenda ()
    (let (list-a list-b (line-re "\\([^:]+\\):\\( \\)\\(.*\\)"))
      (_my/extract-tasks-from-agenda
       "listA: Task 1\nother: Task 2\nlistA: Task 3"
       '(("listA" . list-a)
         ("." . list-b))
       "- [ ] "
       line-re)
      (should (equal list-a '("- [ ] Task 1" "- [ ] Task 3")))
      (should (equal list-b '("- [ ] Task 2")))))

  (defun _my/get-upcoming-tasks ()
    (save-window-excursion
      (org-agenda nil "W")
      (_my/extract-tasks-from-agenda (buffer-string)
                                     '(("inbox" . inbox-next)
                                       ("tickler" . tickler-next)
                                       ("gtd" . gtd-next)
                                       ("." . life-next))
                                     "  - [ ] "
                                     my/weekly-review-line-regexp)))
  (defun _my/get-previous-tasks ()
    (let (string)
      (save-window-excursion
        (org-agenda nil "W")
        (org-agenda-later -1)
        (org-agenda-log-mode 16)
        (setq string (buffer-string))
        ;; Get any completed tasks from the current week as well
        (org-agenda-later 1)
        (org-agenda-log-mode 16)
        (setq string (concat string "\n" (buffer-string)))
        (_my/extract-tasks-from-agenda string
                                       '("inbox" . inbox)
                                       ("tickler" . tickler)
                                       ("gtd" . gtd)
                                       ("." . life))
        "  - [X] "
        my/weekly-done-line-regexp))))

  (defun my/org-summarize-focus-areas (date)
    "Summarize previous and upcoming tasks as a list."
    (interactive (list (org-read-date-analyze (if current-prefix-arg (org-read-date) "-fri") nil '(0 0 0))))
    (let (business relationships life business-next relationships-next life-next string emacs emacs-next
                   start end time-summary biz-time ignore base-date)
      (setq base-date (apply 'encode-time date))
      (setq start (format-time-string "%Y-%m-%d" (days-to-time (- (time-to-number-of-days base-date) 6))))
      (setq end (format-time-string "%Y-%m-%d" (days-to-time (1+ (time-to-number-of-days base-date)))))
      (setq time-summary (quantified-summarize-time start end))
      (setq biz-time (my/quantified-get-hours "Inbox" time-summary))
      (_my/get-upcoming-tasks)
      (_my/get-previous-tasks)
      (setq string
            (concat
             (format "- *A- (Childcare)* (%.1fh - %d%% of total)\n"
                     (my/quantified-get-hours '("A-") time-summary)
                     (/ (my/quantified-get-hours '("A-") time-summary) 1.68))
             (format "- *Business* (%.1fh - %d%%)\n" biz-time (/ biz-time 1.68))
             (mapconcat 'identity business "\n") "\n"
             (mapconcat 'identity business-next "\n")
             "\n"
             (format "  - *Earn* (%.1fh - %d%% of Business)\n"
                     (my/quantified-get-hours "Business - Earn" time-summary)
                     (/ (my/quantified-get-hours "Business - Earn" time-summary) (* 0.01 biz-time)))
             (format "  - *Build* (%.1fh - %d%% of Business)\n"
                     (my/quantified-get-hours "Business - Build" time-summary)
                     (/ (my/quantified-get-hours "Business - Build" time-summary) (* 0.01 biz-time)))
             (format "  - *Connect* (%.1fh - %d%% of Business)\n"
                     (my/quantified-get-hours "Business - Connect" time-summary)
                     (/ (my/quantified-get-hours "Business - Connect" time-summary) (* 0.01 biz-time)))
             (format "- *Relationships* (%.1fh - %d%%)\n"
                     (my/quantified-get-hours '("Discretionary - Social"
                                                "Discretionary - Family") time-summary)
                     (/ (my/quantified-get-hours '("Discretionary - Social"
                                                   "Discretionary - Family") time-summary) 1.68))
             (mapconcat 'identity relationships "\n") "\n"
             (mapconcat 'identity relationships-next "\n") "\n"
             "\n"
             (format "- *Discretionary - Productive* (%.1fh - %d%%)\n"
                     (my/quantified-get-hours "Discretionary - Productive" time-summary)
                     (/ (my/quantified-get-hours "Discretionary - Productive" time-summary) 1.68))
             (format "  - *Drawing* (%.1fh)\n"
                     (my/quantified-get-hours '("Discretionary - Productive - Drawing")  time-summary))
             (format "  - *Emacs* (%.1fh)\n"
                     (my/quantified-get-hours "Discretionary - Productive - Emacs" time-summary))
             (mapconcat 'identity emacs "\n") "\n"
             (mapconcat 'identity emacs-next "\n") "\n"
             (format "  - *Coding* (%.1fh)\n"
                     (my/quantified-get-hours "Discretionary - Productive - Coding" time-summary))
             (mapconcat 'identity life "\n") "\n"
             (mapconcat 'identity life-next "\n") "\n"
             (format "  - *Sewing* (%.1fh)\n"
                     (my/quantified-get-hours "Discretionary - Productive - Sewing" time-summary))
             (format "  - *Writing* (%.1fh)\n"
                     (my/quantified-get-hours "Discretionary - Productive - Writing" time-summary))
             (format "- *Discretionary - Play* (%.1fh - %d%%)\n"
                     (my/quantified-get-hours "Discretionary - Play" time-summary)
                     (/ (my/quantified-get-hours "Discretionary - Play" time-summary) 1.68))
             (format "- *Personal routines* (%.1fh - %d%%)\n"
                     (my/quantified-get-hours "Personal" time-summary)
                     (/ (my/quantified-get-hours "Personal" time-summary) 1.68))
             (format "- *Unpaid work* (%.1fh - %d%%)\n"
                     (my/quantified-get-hours "Unpaid work" time-summary)
                     (/ (my/quantified-get-hours "Unpaid work" time-summary) 1.68))
             (format "- *Sleep* (%.1fh - %d%% - average of %.1f per day)\n"
                     (my/quantified-get-hours "Sleep" time-summary)
                     (/ (my/quantified-get-hours "Sleep" time-summary) 1.68)
                     (/ (my/quantified-get-hours "Sleep" time-summary) 7)
                     )))
      (if (called-interactively-p 'any)
          (insert string)
        string)))
#+end_src

#+RESULTS:
: my/org-summarize-focus-areas

I use this to put together a quick summary of how I spent my time.

The following code makes it easy to add a line:

#+begin_src emacs-lisp :tangle no
  (defun my/org-add-line-item-task (task)
    (interactive "MTask: ")
    (org-insert-heading)
    (insert "[ ] " task)
    (let ((org-capture-entry '("t" "Tasks" entry
                               (file+headline "~/personal/organizer.org" "Tasks")
                               "")))
      (org-capture nil "t")
      (insert "TODO " task "\nSCHEDULED: <" (org-read-date) ">")))
                                          ;(define-key org-mode-map (kbd "C-c t") 'my/org-add-line-item-task)
#+end_src

#+RESULTS:
: my/org-add-line-item-task

Now we put it all together...

#+begin_src emacs-lisp :tangle no
  (defun my/org-prepare-weekly-review (&optional date skip-urls)
    "Prepare weekly review template."
    (interactive (list (org-read-date-analyze (if current-prefix-arg (org-read-date) "-fri") nil '(0 0 0))))
    (let ((base-date (apply 'encode-time date))
          start end links prev)
      (setq start (format-time-string "%Y-%m-%d 0:00" (days-to-time (- (time-to-number-of-days base-date) 6))))
      (setq end (format-time-string "%Y-%m-%d 0:00" (days-to-time (1+ (time-to-number-of-days base-date)))))
      (setq prev (format-time-string "%Y-%m-%d 0:00" (days-to-time (- (time-to-number-of-days base-date) 7 6))))
      (outline-next-heading)
      (insert
       "*** Weekly review: Week ending " (format-time-string "%B %e, %Y" base-date) "  :weekly:\n"
       (my/org-summarize-journal-csv "~/cloud/a/Journal.csv" start end "week" my/journal-category-map my/journal-categories)
       "\n\n*Blog posts*\n\n"
       (my/org-list-from-rss "http://sachachua.com/blog/feed" start end)
       "\n\n*Sketches*\n\n"
       (my/sketches-export-and-extract start end) "\n"
       "\n\n*Time*\n\n"
       (mapconcat (lambda (row) (concat "| " (mapconcat 'identity row " | ") " |\n"))
                  (my/quantified-compare prev start start end
                                         '("A-"
                                           "Business"
                                           "Discretionary - Play"
                                           "Unpaid work"
                                           "Discretionary - Social"
                                           "Discretionary - Family"
                                           "Sleep"
                                           "Discretionary - Productive"
                                           "Personal")
                                         "The other week %" "Last week %") "")
                                          ;"\n\n*Focus areas and time review*\n\n"
                                          ;(my/org-summarize-focus-areas date)
       "\n")))
#+end_src

#+RESULTS:
: my/org-prepare-weekly-review

**** COMMENT List upcoming tasks so that I can see if I'm overloaded
DGM: check how to make this work.. but way too complicated for me!

#+begin_src emacs-lisp :tangle no
  (defun my/org-summarize-upcoming-week ()
    "Summarize upcoming tasks as a list."
    (interactive)
    (org-agenda nil "w")
    (let ((string (buffer-string))
          business relationships life)
      (with-temp-buffer
        (insert string)
        (goto-char (point-min))
        (while (re-search-forward my/weekly-review-line-regexp nil t)
          (cond
           ;; ((string= (match-string 1) "inbox") nil) ; skip routine tasks
           ((string= (match-string 1) "inbox")
            (add-to-list 'business (concat "  - [ ] " (match-string 3))))
           ((string= (match-string 1) "tickler")
            (add-to-list 'business (concat "  - [ ] " (match-string 3))))
           ((string= (match-string 1) "gtd")
            (add-to-list 'relationships (concat "  - [ ] " (match-string 3))))
           (t (add-to-list 'life (concat "  - [ ] " (match-string 3)))))))
      (setq string
            (concat
             "*Plans for next week*\n"
             "- Inbox\n"
             (mapconcat 'identity inbox "\n")
             "\n- Tickler\n"
             (mapconcat 'identity tickler "\n")
             "\n- GTD\n"
             (mapconcat 'identity gtd "\n")))
      (if (called-interactively-p 'any)
          (kill-new string)
        string)))
#+end_src

#+RESULTS:
: my/org-summarize-upcoming-week

* Org-web-tools

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-web-tools
    :ensure t)
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23755 232 222653 744000) :init (23755 232 222644 807000) :config (23755 232 222456 56000) :config-secs (0 0 4 907000) :init-secs (0 0 10147 497000) :use-package-secs (0 6 598165 48000)))

* Org-wiki

#+begin_src emacs-lisp :tangle yes
  (require 'org-wiki)
  (setq org-wiki-location "/media/dgm/blue/documents/dropbox/notes/org-wiki")

(global-set-key (kbd "s-.") 'org-wiki-helm)
#+end_src

#+RESULTS:
: org-wiki-helm

* Tuhdo's =org-recipes=
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'load-path "/home/dgm/.emacs.d/src/org-recipes")
  (require 'org-recipes)
  (setq org-recipes-file-list '("/media/dgm/blue/documents/dropbox/notes/org-recipes/recipes.org" "/media/dgm/blue/documents/dropbox/notes/cheatSheets/emacsCheatSheet.org"))

(global-set-key (kbd "s-,") 'org-recipes)
#+end_src

#+RESULTS:
: org-recipes

* COMMENT Disabling bindings that are used elsewhere

#+begin_src emacs-lisp :tangle no
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "s-<SPC>") nil)
    (define-key org-mode-map (kbd "s-<backspace>") nil))
#+end_src

#+RESULTS:

* Settings copied from the great Bernt Hansen

- http://doc.norang.ca/org-mode.html
- Original document in org-mode: [[file:/media/dgm/blue/documents/programming/emacs/CoolEmacsGuys/berntHansen/org-mode.org][org-mode.org]]

** COMMENT Fast Todo Selection

DGM: Great idea but all this is already working for me out of the box

Fast todo selection allows changing from any task todo state to any
other state directly by selecting the appropriate key from the fast
todo selection key menu.  This is a great feature!


#+begin_src emacs-lisp :tangle no
  (setq org-use-fast-todo-selection t)
#+end_src

Changing a task state is done with =C-c C-t KEY=

where =KEY= is the appropriate fast todo state selection key as defined in =org-todo-keywords=.

The setting

#+begin_src emacs-lisp  :tangle no
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src
allows changing todo states with S-left and S-right skipping all of
the normal processing when entering or leaving a todo state.  This
cycles through the todo states but skips setting timestamps and
entering notes which is very convenient when all you want to do is fix
up the status of an entry.

** Providing progress reports to others

When someone wants details of what I've done recently I simple generate a
log report in the agenda with tasks I've completed and state changes combined
with a clock report for the appropriate time period.

The following setting shows closed tasks and state changes in the
agenda.  Combined with the agenda clock report ('R') I can quickly
generate all of the details required.

#+begin_src emacs-lisp :tangle yes
  ;; Agenda log mode items to display (closed and state changes by default)
  (setq org-agenda-log-mode-items (quote (closed state)))
#+end_src

#+RESULTS:
| closed | state |

To generate the report I pull up the agenda for the appropriate time frame
(today, yesterday, this week, or last week) and hit the key sequence
=l R= to add the log report (without clocking data lines) and the agenda clock
report at the end.

Then it's simply a matter of exporting the resulting agenda in some useful format
to provide to other people.  =C-x C-w /tmp/agenda.html RET= exports to HTML
and =C-x C-w /tmp/agenda.txt RET= exports to plain text.  Other formats are 
available but I use these two the most.

Combining this export with tag filters and =C-u R= can limit the
report to exactly the tags that people are interested in.

** Addressbook database

This does not work, why?
s
#+begin_src emacs-lisp :tangle no
  (require 'bbdb)
  (require 'bbdb-com)
#+end_src

** Sticky Agendas

Sticky agendas allow you to have more than one agenda view created simultaneously.
You can quickly switch to the view without incurring an agenda rebuild by invoking
the agenda custom command key that normally generates the agenda.  If it already 
exists it will display the existing view.  =g= forces regeneration of the agenda view.

I normally have two views displayed (=F12 a= for the daily/weekly
agenda and =F12 SPC= for my project management view)

#+begin_src emacs-lisp :tangle yes
  ;; Use sticky agenda's so they persist
  (setq org-agenda-sticky t)
#+end_src

#+RESULTS:
: t

** Checklist handling
:PROPERTIES:
:CUSTOM_ID: ChecklistHandling
:END:

Checklists are great for repeated tasks with lots of things that need
to be done.  For a long time I was manually resetting the check boxes
to unchecked when marking the repeated task =DONE= but no more!
There's a contributed =org-checklist= that can uncheck the boxes
automagically when the task is marked done.

Add the following to your =.emacs=

#+header: :tangle no
#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "~/git/org-mode/contrib/lisp"))

  (require 'org-checklist)
#+end_src

#+begin_src emacs-lisp :tangle yes 
  ;; The following setting is different from the document so that you
  ;; can override the document path by setting your path in the variable
  ;; org-mode-user-contrib-lisp-path
  ;;
  ;;(if (boundp 'org-mode-user-contrib-lisp-path)
  ;;    (add-to-list 'load-path org-mode-user-contrib-lisp-path)
  ;;  (add-to-list 'load-path (expand-file-name "~/git/org-mode/contrib/lisp")))

  (require 'org-checklist)
#+end_src

#+RESULTS:
: org-checklist

and then to use it in a task you simply set the property =RESET_CHECK_BOXES= to =t= 
like this

#+begin_src org :exports src
  ,* TODO Invoicing and Archive Tasks [0/7]
  DEADLINE: <2009-07-01 Wed +1m -0d> 
  :PROPERTIES:
  :RESET_CHECK_BOXES: t
  :END:

  - [ ] Do task 1
  - [ ] Do task 2
    ...
    - [ ] Do task 7
#+end_src

Idea: Podría usar las checklists para las "repeated tasks" such as exam setting each year.

** Handling blocked tasks
:PROPERTIES:
:CUSTOM_ID: HandlingBlockedTasks
:END:

Blocked tasks are tasks that have subtasks which are not in a done
todo state.  Blocked tasks show up in a grayed font by default in the
agenda.

To enable task blocking set the following variable:

#+begin_src emacs-lisp :tangle yes
  (setq org-enforce-todo-dependencies t)
#+end_src

This setting prevents tasks from changing to =DONE= if any subtasks
are still open.  This works pretty well except for repeating tasks.  I
find I'm regularly adding =TODO= tasks under repeating tasks and not
all of the subtasks need to be complete before the next repeat cycle.

You can override the setting temporarily by changing the task with
=C-u C-u C-u C-c C-t= but I never remember that.  I set a permanent
property on the repeated tasks as follows:

#+begin_src org :exports src
  ,* TODO New Repeating Task
  SCHEDULED: <2009-06-16 Tue +1w>
  :PROPERTIES:
  :NOBLOCKING: t
  :END:
  ...
  ,** TODO Subtask  
#+end_src

This prevents the =New Repeating Task= from being blocked if some of
the items under it are not complete.

Occassionally I need to complete tasks in a given order.  Org-mode has
a property =ORDERED= that enforces this for subtasks.

#+begin_src org :exports src
  ,* TODO Some Task
  :PROPERTIES:
  :ORDERED:  t
  :END:
  ,** TODO Step 1
  ,** TODO Step 2
  ,** TODO Step 3  
#+end_src

In this case you need to complete =Step 1= before you can complete
=Step 2=, etc. and org-mode prevents the state change to a done task
until the preceding tasks are complete.

** Org Task structure and presentation
:PROPERTIES:
:CUSTOM_ID: OrgTaskStructureAndPresentation
:END:

This section describes various org-mode settings I use to control how
tasks are displayed while I work on my org mode files.
*** Controlling display of leading stars on headlines
:PROPERTIES:
:CUSTOM_ID: DisplayLeadingStars
:END:

Org-mode has the ability to show or hide the leading stars on task
headlines.  It's also possible to have headlines at odd levels only so
that the stars and heading task names line up in sublevels.

To make org show leading stars use

#+header: :tangle yes
#+begin_src emacs-lisp 
  (setq org-hide-leading-stars nil)
#+end_src

I now use org-indent mode which hides leading stars.
*** org-indent mode
:PROPERTIES:
:CUSTOM_ID: OrgIndentMode
:END:

I recently started using org-indent mode.  I like this setting a lot.
It removes the indentation in the org-file but displays it as if it
was indented while you are working on the org file buffer.

org-indent mode displays as if org-odd-levels-only is true but it has
a really clean look that I prefer over my old setup.

I have org-indent mode on by default at startup with the following
setting:

#+begin_src emacs-lisp :tangle yes
  (setq org-startup-indented t)
#+end_src

*** Handling blank lines
:PROPERTIES:
:CUSTOM_ID: HandlingBlankLines
:END:

Blank lines are evil :).  They keep getting inserted in between
headlines and I don't want to see them in collapsed (contents) views.
When I use =TAB= to fold (cycle) tasks I don't want to see any blank
lines between headings.

The following setting hides blank lines between headings which keeps
folded view nice and compact.

#+begin_src emacs-lisp :tangle yes
  (setq org-cycle-separator-lines 0)
#+end_src

I find extra blank lines in lists and headings a bit of a nuisance.
To get a body after a list you need to include a blank line between
the list entry and the body -- and indent the body appropriately.
Most of my lists have no body detail so I like the look of collapsed
lists with no blank lines better.

The following setting prevents creating blank lines before headings
but allows list items to adapt to existing blank lines around the items:

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-blank-before-new-entry (quote ((heading)
                                           (plain-list-item . auto))))
#+end_src
*** Adding new tasks quickly without disturbing the current task content
:PROPERTIES:
:CUSTOM_ID: AddingNewTasks
:END:

To create new headings in a project file it is really convenient to
use =C-RET=, =C-S-RET=, =M-RET=, and =M-S-RET=.  This inserts a new headline
possibly with a =TODO= keyword.  With the following setting

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-insert-heading-respect-content nil)
#+end_src

#+RESULTS:

org inserts the heading at point for the =M-= versions and respects
content for the =C-= versions.  The respect content setting is
temporarily turned on for the =C-= versions which adds the new heading
after the content of the current item.  This lets you hit =C-S-RET= in
the middle of an entry and the new heading is added after the body of
the current entry but still allow you to split an entry in the middle
with =M-S-RET=.
*** Notes at the top
:PROPERTIES:
:CUSTOM_ID: NotesAtTop
:END:

I enter notes for tasks with =C-c C-z= (or just =z= in the agenda).
Changing tasks states also sometimes prompt for a note (e.g. moving to
=WAITING= prompts for a note and I enter a reason for why it is
waiting).  These notes are saved at the top of the task so unfolding
the task shows the note first.
#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-reverse-note-order nil)
#+end_src

#+RESULTS:

*** Searching and showing results
:PROPERTIES:
:CUSTOM_ID: SearchingResults
:END:

Org-mode's searching capabilities are really effective at finding data
in your org files.  =C-c / /= does a regular expression search on the
current file and shows matching results in a collapsed view of the
org-file.

I have org-mode show the hierarchy of tasks above the matched entries
and also the immediately following sibling task (but not all siblings)
with the following settings:

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-show-following-heading t)
  (setq org-show-hierarchy-above t)
  (setq org-show-siblings (quote ((default))))
#+end_src

This keeps the results of the search relatively compact and mitigates
accidental errors by cutting too much data from your org file with
=C-k=.  Cutting folded data (including the ...) can be really
dangerous since it cuts text (including following subtrees) which you
can't see.  For this reason I always show the following headline when
displaying search results.
*** Editing and Special key handling
:PROPERTIES:
:CUSTOM_ID: SpecialKeyHandling
:END:

Org-mode allows special handling of the C-a, C-e, and C-k keys while
editing headlines.  I also use the setting that pastes (yanks)
subtrees and adjusts the levels to match the task I am pasting to.
See the docstring (=C-h v org-yank-adjust-subtrees=) for more details
on each variable and what it does.

I have =org-special-ctrl-a/e= set to enable easy access to the
beginning and end of headlines. I use =M-m= or =C-a C-a= to get to the
beginning of the line so the speed commands work and =C-a= to give
easy access to the beginning of the heading text when I need that.

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-special-ctrl-a/e t)
  (setq org-special-ctrl-k t)
  (setq org-yank-adjusted-subtrees t)
#+end_src

** Exporting Tables to CSV
:PROPERTIES:
:CUSTOM_ID: TableExportToCSV
:END:

I generate org-mode tables with details of task specifications and
record structures for some of my projects.  My clients like to use
spreadsheets for this type of detail.

It's easy to share the details of the org-mode table by exporting in
HTML but that isn't easy for anyone else to work with if they need to
edit data.

To solve this problem I export my table as comma delimited values
(CSV) and then send that to the client (or read it into a spreadsheet
and email the resulting spreadsheet file).

Org-mode can export tables as TAB or comma delimited formats.  I set
the default format to CSV with:

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-table-export-default-format "orgtbl-to-csv")
#+end_src

#+RESULTS:
: orgtbl-to-csv

Exporting to CSV format is the only one I use and this provides the
default so I can just hit RETURN when prompted for the format.

To export the following table I put the cursor inside the table and
hit =M-x org-table-export= which prompts for a filename and the format
which defaults to orgtbl-to-csv from the setting above.

|   One |    Two | Three |
|-------+--------+-------|
|     1 |      1 |     2 |
|     3 |      6 |     5 |
|  fred |    kpe |  mary |
| 234.5 | 432.12 | 324.3 |

This creates the file with the following data

#+begin_src csv
One,Two,Three
1,1,2
3,6,5
fred,kpe,mary
234.5,432.12,324.3
#+end_src

** Logging stuff
:PROPERTIES:
:CUSTOM_ID: LoggingStuff
:END:

Most of my logging is controlled by the global =org-todo-keywords=

My logging settings are set as follows:
#+header: :tangle yes
#+begin_src emacs-lisp
  ;; (setq org-log-done (quote time))
  ;; (setq org-log-into-drawer t)
  (setq org-log-state-notes-insert-after-drawers nil)
#+end_src

#+RESULTS:

My =org-todo-keywords= are set as follows:

#+header: :tangle yes
#+begin_src emacs-lisp
  ;; (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "WAITING(w)"  "|" "DONE(d)" "CANCELED(c)"))
  (setq org-todo-keywords
        (quote ((sequence "PROJECT(p)" "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "|" "CANCELED(c@/!)" "PHONE"))))
#+end_src

#+RESULTS:
| sequence | PROJECT(p)    | TODO(t) | NEXT(n) |                |       | DONE(d) |
| sequence | WAITING(w@/!) |         |         | CANCELED(c@/!) | PHONE |         |

This adds a log entry whenever a task moves to any of the following states:
- to or out of =DONE= status
- to =WAITING= status (with a note) or out of =WAITING= status
- to =HOLD= status
- to =CANCELED= status (with a note) or out of =CANCELED= status

I keep clock times and states in the =LOGBOOK= drawer to keep my tasks
uncluttered.  If a task is WAITING then the reason for why it is
waiting is near the top of the LOGBOOK and unfolding the LOGBOOK
drawer provides that information.  From the agenda simply hitting
=SPC= on the task will reveal the LOGBOOK drawer.

*** Config for faces using Solarized chromatism

#+BEGIN_SRC emacs-lisp :tangle yes :results silent
  (setq org-todo-keyword-faces
        '(("TODO"      . (:foreground "SeaGreen" :weight bold))  ;; "#859900"
          ("NEXT"      . (:foreground "#d33682" :weight bold))
          ("PHONE"     . (:foreground "#dc322f" :weight bold))
          ("WAITING"   . (:foreground "#b58900" :weight bold))
          ("DONE"      . (:foreground "#268bd2" :weight bold))
          ("PROJECT"   . (:foreground "#6c71c4" :weight bold))
          ("CANCELED"  . (:foreground "#2aa198" :weight bold))))
#+END_SRC

** Clock setup 
:PROPERTIES:
:CUSTOM_ID: ClockSetup
:END:

To get started we need to punch in which clocks in the default
task and keeps the clock running.  This is now simply a matter of
punching in the clock with =F9 I=.  You can do this anywhere.
Clocking out will now clock in the parent task (if there is one
with a todo keyword) or clock in the default task if not parent
exists.

Keeping the clock running when moving a subtask to a =DONE= state
means clocking continues to apply to the project task.  I can pick the
next task from the parent and clock that in without losing a minute or
two while I'm deciding what to work on next.

I keep clock times, state changes, and other notes in the =:LOGBOOK:=
drawer.

I have the following org-mode settings for clocking:

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq bh/keep-clock-running nil)

  (defun bh/clock-in-to-next (kw)
    "Switch a task from TODO to NEXT when clocking in.
  Skips capture tasks, projects, and subprojects.
  Switch projects and subprojects from NEXT back to TODO"
    (when (not (and (boundp 'org-capture-mode) org-capture-mode))
      (cond
       ((and (member (org-get-todo-state) (list "TODO"))
             (bh/is-task-p))
        "NEXT")
       ((and (member (org-get-todo-state) (list "NEXT"))
             (bh/is-project-p))
        "TODO"))))

  (defun bh/find-project-task ()
    "Move point to the parent (project) task if any"
    (save-restriction
      (widen)
      (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (goto-char parent-task)
        parent-task)))

  (defun bh/punch-in (arg)
    "Start continuous clocking and set the default task to the
  selected task.  If no task is selected set the Organization task
  as the default task."
    (interactive "p")
    (setq bh/keep-clock-running t)
    (if (equal major-mode 'org-agenda-mode)
        ;;
        ;; We're in the agenda
        ;;
        (let* ((marker (org-get-at-bol 'org-hd-marker))
               (tags (org-with-point-at marker (org-get-tags-at))))
          (if (and (eq arg 4) tags)
              (org-agenda-clock-in '(16))
            (bh/clock-in-organization-task-as-default)))
      ;;
      ;; We are not in the agenda
      ;;
      (save-restriction
        (widen)
                                          ; Find the tags on the current task
        (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
            (org-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))))

  (defun bh/punch-out ()
    (interactive)
    (setq bh/keep-clock-running nil)
    (when (org-clock-is-active)
      (org-clock-out))
    (org-agenda-remove-restriction-lock))

  (defun bh/clock-in-default-task ()
    (save-excursion
      (org-with-point-at org-clock-default-task
        (org-clock-in))))

  (defun bh/clock-in-parent-task ()
    "Move point to the parent (project) task if any and clock in"
    (let ((parent-task))
      (save-excursion
        (save-restriction
          (widen)
          (while (and (not parent-task) (org-up-heading-safe))
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq parent-task (point))))
          (if parent-task
              (org-with-point-at parent-task
                (org-clock-in))
            (when bh/keep-clock-running
              (bh/clock-in-default-task)))))))

  (defvar bh/organization-task-id "eb155a82-92b2-4f25-a3c6-0304591af2f9")

  (defun bh/clock-in-organization-task-as-default ()
    (interactive)
    (org-with-point-at (org-id-find bh/organization-task-id 'marker)
      (org-clock-in '(16))))

  (defun bh/clock-out-maybe ()
    (when (and bh/keep-clock-running
               (not org-clock-clocking-in)
               (marker-buffer org-clock-default-task)
               (not org-clock-resolving-clocks-due-to-idleness))
      (bh/clock-in-parent-task)))

  (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)
#+end_src

#+RESULTS:
| org-clock-remove-empty-clock-drawer | bh/clock-out-maybe |


** Limiting time spent on tasks
:PROPERTIES:
:CUSTOM_ID: LimitingTimeSpentOnTasks
:END:

Org-mode has this great new feature for signalling alarms when the
estimated time for a task is reached.  I use this to limit the amount
of time I spend on a task during the day.

As an example, I've been working on this document for over two months
now.  I want to get it finished but I can't just work on it solely
until it's done because then nothing else gets done.  I want to do a
little bit every day but limit the total amount of time I spend
documenting org-mode to an hour a day.

To this end I have a task

#+begin_src org :exports src
  ,* NEXT Document my use of org-mode
  :LOGBOOK:...
  :PROPERTIES:
  :CLOCK_MODELINE_TOTAL: today
  :Effort:   1:00
  :END:  
#+end_src

The task has an estimated effort of 1 hour and when I clock in the
task it gives me a total in the mode-line like this

: --:**  org-mode.org   91% (2348,73) Git:master  (Org Fly yas Font)-----[0:35/1:00 (Document my use of org-mode)]-------

I've spent 35 minutes of my 1 hour so far today on this document and
other help on IRC.

I set up an alarm so the Star Trek door chime goes off when the
total estimated time is hit.  (Yes I'm a Trekkie :) )

DGM: sounds found here http://scnresearch.com/sounds/

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-clock-sound "~/inconcv.wav")
#+end_src

#+RESULTS:
: ~/inconcv.wav

When the one hour time limit is hit the alarm sound goes off and a
message states that I should be done working on this task.  If I
switch tasks and try to clock in this task again I get the sound each
and every time I clock in the task.  This nags me to go work on
something else :)

You can use similar setups for repeated tasks.  By default the last
repeat time is recorded as a property when a repeating task is marked
done.  For repeating tasks the mode-line clock total counts since the
last repeat time by default.  This lets you accumulate time over
multiple days and counts towards your estimated effort limit.


** Habits only log DONE state changes
:PROPERTIES:
:CUSTOM_ID: HabitsLogDone
:END:

I tend to keep habits under a level 1 task =* Habits= with a special
logging property that only logs changes to the =DONE= state.  This
allows me to cancel a habit and not record a timestamp for it since
that messes up the habit graph.  Cancelling a habit just to get it off
my agenda because it's undoable (like get up before 6AM) should not
mark the habit as done today.  I only cancel habits that repeat every
day.

My habit tasks look as follows - and I tend to have one in every org
file that can have habits defined

#+begin_src org :exports src
  ,* Habits
  :PROPERTIES:
  :LOGGING:  DONE(!)
  :ARCHIVE:  %s_archive::* Habits
  :END:  
#+end_src


** Require a final newline when saving files
:PROPERTIES:
:CUSTOM_ID: RequireFinalNewline
:END:

The following setting was mainly for editing yasnippets where I want to
be able to expand a snippet but stay on the same line.  I used this
mainly for replacing short strings or initials with full names for
people during meeting notes.  I now use =abbrev-mode-= for this and
no longer need this setting.

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq require-final-newline nil)
#+end_src

When I save a file in Emacs I want a final newline - this fits better
with the source code projects I work on.  This is the setting I use now:

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

** Automatically change list bullets
:PROPERTIES:
:CUSTOM_ID: ListBullets
:END:

I take point-form notes during meetings.  Having the same list bullet
for every list level makes it hard to read the details when lists are
indented more than 3 levels.

Org-mode has a way to automatically change the list bullets when you
change list levels.

| Current List Bullet | Next indented list bullet |
|---------------------+---------------------------|
| +                   | -                         |
| *                   | -                         |
| 1.                  | -                         |
| 1)                  | -                         |
| A)                  | -                         |
| B)                  | -                         |
| a)                  | -                         |
| b)                  | -                         |
| A.                  | -                         |
| B.                  | -                         |
| a.                  | -                         |
| b.                  | -                         |

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-list-demote-modify-bullet (quote (("-" . "+")
                                              ("+" . "*")
                                              ("*" . "-")
                                              ("1." . "-")
                                              ("1)" . "-")
                                              ("A)" . "-")
                                              ("B)" . "-")
                                              ("a)" . "-")
                                              ("b)" . "-")
                                              ("A." . "-")
                                              ("B." . "-")
                                              ("a." . "-")
                                              ("b." . "-"))))
#+end_src

#+RESULTS:
: ((- . +) (+ . *) (* . -) (1. . -) (1) . -) (A) . -) (B) . -) (a) . -) (b) . -) (A. . -) (B. . -) (a. . -) (b. . -))

** Remove indentation on agenda tags view
:PROPERTIES:
:CUSTOM_ID: IndentationOnTagsView
:END:

I don't like the indented view for sublevels on a tags match in the
agenda but I want to see all matching tasks (including sublevels) when
I do a agenda tag search (=F12 m=).

To make all of the matched headings for a tag show at the same level
in the agenda set the following variable:

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-tags-match-list-sublevels t)
#+end_src

#+RESULTS:
: t

** Agenda persistent filters
:PROPERTIES:
:CUSTOM_ID: AgendaPersistentFilters
:END:

This is a great feature!  Persistent agenda filters means if you limit
a search with =/ TAB SomeTag= the agenda remembers this filter until
you change it.

Enable persistent filters with the following variable

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-agenda-persistent-filter t)
#+end_src

#+RESULTS:
: t

The current filter is displayed in the modeline as ={+SomeTag}= so you
can easily see what filter currently applies to your agenda view.

I use this with =FILETAGS= to limit the displayed results to a single
client or context.

** Add tags for flagged entries
:PROPERTIES:
:CUSTOM_ID: TagFlaggedEntries
:END:

Everyone so often something will come along that is really important
and you know you want to be able to find it back fast sometime in the
future.

For these types of notes and tasks I add a special =:FLAGGED:= tag.
This tag gets a special fast-key =?= which matches the search key in
the agenda for flagged items.  See [[#OrgTagAlist][Tags]] for the setup of
=org-tag-alist= for the =FLAGGED= entry.

Finding flagged entries is then simple - just =F12 ?= and you get them all.

** Mail links open compose-mail
:PROPERTIES:
:CUSTOM_ID: MailLinksOpenComposeMail
:END:

The following setting makes org-mode open =mailto:= links
using compose-mail.

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-link-mailto-program (quote (mu4e-compose "%a" "%s")))
#+end_src

#+RESULTS:
| mu4e-compose | %a | %s |

Test with mailto:daniel.guinea.uned@gmail.com
It works! Note the original had =compose-mail= and it worked too!

** Composing mail from org mode subtrees
:PROPERTIES:
:CUSTOM_ID: MailingSubtrees
:END:

Read: https://github.com/org-mime/org-mime

org-mime can be used to send HTML email using Org-mode HTML export.

This approximates a WYSiWYG HTML mail editor from within Emacs, and can be useful for sending tables, fontified source code, and inline images in email.
  
It's possible to create mail from an org-mode subtree.  I use =C-c
M-o= to start an email message with the details filled in from the
current subtree.  I use this for repeating reminder tasks where I need
to send an email to someone else.  The email contents are already
contained in the org-mode subtree and all I need to do is =C-c M-o=
and any minor edits before sending it off.

*** Function from Kitchin to make this work
:PROPERTIES:
:MAIL_FMT: html
:END:

- https://kitchingroup.cheme.cmu.edu/blog/2016/10/29/Sending-html-emails-from-org-mode-with-org-mime/

#+begin_src emacs-lisp :tangle yes
  (require 'org-mime)

  (advice-add 'org-mime-org-buffer-htmlize :after-while
              'mu4e-compose-mode)

  (defun org-mime-org-buffer-htmlize ()
    "Create an email buffer containing the current org-mode file
    exported to html and encoded in both html and in org formats as
    mime alternatives."
    (interactive)
    (org-mime-send-buffer 'html)
    (message-goto-to))

  (defun org-mime-subtree ()
    "Create an email buffer containing the current org-mode subtree
    exported to a org format or to the format specified by the
    MAIL_FMT property of the subtree."
    (interactive)
    (org-mime-send-subtree
     (or (org-entry-get nil "MAIL_FMT" org-mime-use-property-inheritance) 'org))
    (message-goto-to))
#+end_src

#+RESULTS:
: org-mime-subtree

#+begin_src emacs-lisp :tangle no
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c M-o") 'bh/mail-subtree))
            'append)

  (defun bh/mail-subtree ()
    (interactive)
    (org-mark-subtree)
    (org-mime-subtree))
#+end_src

#+RESULTS:
: bh/mail-subtree

Uhmm, no me funciona.

** COMMENT Use Emacs bookmarks for fast navigation
:PROPERTIES:
:CUSTOM_ID: BookmarksFastNavigation
:END:

I've started using emacs bookmarks to save a location and return to it easily.
Normally I want to get back to my currently clocking task and that's easy - just hit =F11=.
When I'm working down a long checklist I find it convenient to set a bookmark on the next
item to check, then go away and work on it, and return to the checkbox to mark it done.

I use Emacs bookmarks for this setup as follows:

DGM: no me convencio' cuando lo use'. Better to save mark.

#+header: :tangle no
#+begin_src emacs-lisp
  ;; Bookmark handling
  ;;
  (global-set-key (kbd "s--") '(lambda () (interactive) (bookmark-set "SAVED")))
  (global-set-key (kbd "s-_") '(lambda () (interactive) (bookmark-jump "SAVED")))
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (bookmark-jump SAVED) |

When I want to save the current location I just hit =C-f6= and then I
can return to it with =f6= anytime.  I overwrite the same bookmark
each time I set a new position.

** Remove multiple state change log details from the agenda
:PROPERTIES:
:CUSTOM_ID: StateChangeDetailsInAgenda
:END:
[2011-04-30 Sat 11:14]

I skip multiple timestamps for the same entry in the agenda view with the following setting.

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-agenda-skip-additional-timestamps-same-entry t)
#+end_src

#+RESULTS:
: t

This removes the clutter of extra state change log details when multiple timestamps
exist in a single entry.

** NEXT is for tasks
:PROPERTIES:
:CUSTOM_ID: NextTasks
:END:
[2012-03-04 Sun 12:41]

=NEXT= keywords are for *tasks* and not *projects*.  I've added a
function to the todo state change hook and clock in hook so that any
parent tasks marked =NEXT= automagically change from =NEXT= to =TODO=
since they are now projects and not tasks.

#+header: :tangle yes
#+begin_src emacs-lisp
  (defun bh/mark-next-parent-tasks-todo ()
    "Visit each parent task and change NEXT states to TODO"
    (let ((mystate (or (and (fboundp 'org-state)
                            state)
                       (nth 2 (org-heading-components)))))
      (when mystate
        (save-excursion
          (while (org-up-heading-safe)
            (when (member (nth 2 (org-heading-components)) (list "NEXT"))
              (org-todo "TODO")))))))

  (add-hook 'org-after-todo-state-change-hook 'bh/mark-next-parent-tasks-todo 'append)
  (add-hook 'org-clock-in-hook 'bh/mark-next-parent-tasks-todo 'append)
#+end_src

#+RESULTS:
| bh/mark-next-parent-tasks-todo |

** Preserving source block indentation
:PROPERTIES:
:CUSTOM_ID: PreserveSourceIndentations
:END:
I do not preserve indentation for source blocks mainly because this doesn't look
nice with indented org-files.  The only reason I've found to preserve indentation is
when TABs in files need to be preserved (e.g. Makefiles).  I don't normally edit
these files in org-mode so I leave this setting turned off.

I've changed the default block indentation so that it is not indented
from the text in the org file.  This allows editing source blocks in 
place without requiring use of =C-c '= so that code lines up correctly.

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-src-preserve-indentation nil)
  (setq org-edit-src-contentqq-indentation 0)
#+end_src

#+RESULTS:
: 0

** Prevent editing invisible text
:PROPERTIES:
:CUSTOM_ID: PreventInvisibleEdits
:END:
[2012-07-20 Fri 22:26]

The following setting prevents accidentally editing hidden text when the point is inside a folded region.
This can happen if you are in the body of a heading and globally fold the org-file with =S-TAB=

I find invisible edits (and undo's) hard to deal with so now I can't edit invisible text.  
=C-c C-r= (org-reveal) will display where the point is if it is buried in invisible text
to allow editing again.

Yiufung: When text is inserted near invisible area (...), I’m never sure what exactly is changed. Usually I would expand to check, only to end up losing my focus during panic TAB ing.

Set org-catch-invisible-edits to error to prevent editing invisible area, and show an error message in echo area instead. I prefer show-and-error, which additionally expand text and move focus to the expected point.

#+header: :tangle yes
#+begin_src emacs-lisp
  ;;(setq org-catch-invisible-edits 'error)
  (setq org-catch-invisible-edits 'show-and-error) ; https://yiufung.net/post/org-mode-hidden-gems-pt1/
#+end_src

#+RESULTS:
: error

** Use utf-8 as default coding system
:PROPERTIES:
:CUSTOM_ID: DefaultCodingSystem
:END:
[2013-01-01 Tue 13:49]

I use =utf-8= as the default coding system for all of my org files.

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-export-coding-system 'utf-8)
  ;;(prefer-coding-system 'utf-8)
  ;;(set-charset-priority 'unicode)
  ;;(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+end_src

#+RESULTS:
: utf-8

** Keep clock durations in hours
:PROPERTIES:
:CUSTOM_ID: ClockDurationsNoDays
:END:
[2013-02-17 Sun 12:37]

The default for clock durations has changed to include days which is
24 hours.  At work I like to think of a day as 6 hours of work (the
rest of the time is lost in meetings and other overhead on average) so
displaying clock durations in days doesn't make sense to me.

The following setting displays clock durations (from =C-c C-x C-d= in
hours and minutes.

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-time-clocksum-format
        '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))
#+end_src

#+RESULTS:
| :hours | %d | :require-hours | t | :minutes | :%02d | :require-minutes | t |


** Create unique IDs for tasks when linking
:PROPERTIES:
:CUSTOM_ID: LinkingToTaskCreatesId
:END:
[2013-06-23 Sun 10:38]

The following setting creates a unique task ID for the heading in the
=PROPERTY= drawer when I use =C-c l=.  This allows me to move the task
around arbitrarily in my org files and the link to it still works.

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
#+end_src

#+RESULTS:
: create-if-interactive-and-no-custom-id

** Subscripts and Superscripts
:PROPERTIES:
:CUSTOM_ID: SubscriptsAndSuperscripts
:END:

I don't currently write documents that need subscripts and superscript
support.  I disable handling of =_= and =^= for subscript and
superscripts with

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-use-sub-superscripts nil)
#+end_src

#+RESULTS:

** Using Git for Automatic History, Backups, and Synchronization
:PROPERTIES:
:CUSTOM_ID: GitSync
:END:

Editing folded regions of your org-mode file can be hazardous to your
data.  My method for dealing with this is to put my org files in a
=Git= source repository.

My setup saves all of my org-files every hour and creates a commit
with my changes automatically.  This lets me go back in time and view
the state of my org files for any given hour over the lifetime of the
document.  I've used this once or twice to recover data I accidentally
removed while editing folded regions.
*** Automatic Hourly Commits
:PROPERTIES:
:CUSTOM_ID: HourlyCommits
:END:

My Emacs setup saves all org buffers at 1 minute before the hour using
the following code in my =.emacs=

DGM changes this to saving all org buffers every fifteen minutes so that changes in GTD are recorded constantly.

#+header: :tangle yes
#+begin_src emacs-lisp
;; (run-at-time "00:59" 3600 'org-save-all-org-buffers)
(run-at-time nil (* 15 60) 'org-save-all-org-buffers)
#+end_src

#+RESULTS:
: [nil 24012 63008 61123 900 org-save-all-org-buffers nil nil 772000]


A =cron= job runs at the top of the hour to commit any changes just
saved by the call to =org-save-all-org-buffers= above.  I use a script
to create the commits so that I can run it on demand to easily commit
all modified work when moving from one machine to another.

=crontab= details:
#+begin_example 
0 * * * * ~/bin/org-git-sync.sh >/dev/null
#+end_example

DGM change: I have made it to run every minute with =crontab -e=:
#+begin_example 
,* * * * * ~/bin/org-git-sync.sh >/dev/null
#+end_example

**** COMMENT DGM adds saving Org buffers every minute

You may wish to call `recentf-save-list` periodically, e.g. every 5 minutes:
(originally disabled because I found it too invasive).

#+BEGIN_SRC emacs-lisp :tangle no
(run-at-time nil 60 'org-save-all-org-buffers)
#+END_SRC

#+RESULTS:
: [nil 24006 30951 345509 60 org-save-all-org-buffers nil nil 104000]

*** ~/bin/org-git-sync.sh
:PROPERTIES:
:CUSTOM_ID: OrgGitSyncSh
:END:

Here is the shell script I use to create a =git= commit for each of my
org-repositories.  This loops through multiple repositories and
commits any modified files.  I have the following org-mode
repositories:

- org 

  for all of my organization project files and todo lists

- doc-norang.ca

  for any changes to documents under http://doc.norang.ca/

- www.norang.ca

  for any changes to my other website http://www.norang.ca/

This script does not create empty commits - =git= only creates a commit
if something was modified.

#+BEGIN_EXAMPLE
#!/bin/sh
# Add org file changes to the repository
REPOS="gtd-repo config-repo"

for REPO in $REPOS
do
echo "Repository: $REPO"
# cd ~/git/$REPO

if [ $REPO = "gtd-repo" ]
then
  cd ~/Dropbox/gtd
fi

if [ $REPO = "config-repo" ]
then
    cd ~
fi

# Remove deleted files
git ls-files --deleted -z | xargs -0 git rm >/dev/null 2>&1
# Add new files
git add . >/dev/null 2>&1
git commit -m "$(date)"
git push $REPO master
done
#+END_EXAMPLE

I use the following =.gitignore= file in my org-mode =git=
repositories to keep export generated files out of my =git=
repositories.  If I include a graphic from some other source than
ditaa or graphviz then I'll add it to the repository manually.  By
default all PNG graphic files are ignored (since I assume they are
produced by ditaa during export)

#+begin_example 
core
core.*
,*.html
,*~
.#*
\#*\#
,*.txt
,*.tex
,*.aux
,*.dvi
,*.log
,*.out
,*.ics
,*.pdf
,*.xml
,*.org-source
*.png
*.toc
#+end_example

**** DGM tweaks
- Recall that =REPOS= are the directory where you run =git=, not the remote repo that I sometimes create "locally" in my =/media/blue= disk, for example.
- So Hansen's trick makes commits in the local repo. I should have to add the line that pushes changes to the remote.
- Note that the bash file has to have execution rights for it to run:

#+BEGIN_EXAMPLE
dgm@toshiba:~/bin
[] $ sudo chmod 755 org-git-sync.sh
#+END_EXAMPLE

* Settings from the great Alphapapa 
** COMMENT via Benjamin Beckwith
*** COMMENT Org Super Agenda
- https://github.com/alphapapa/org-super-agenda/issues/51
- http://bnbeckwith.com/bnb-emacs/#orga483373

#+begin_src emacs-lisp :tangle yes
  (setq org-agenda-block-separator "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
#+end_src

#+RESULTS:
: ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

**** COMMENT Views 
The key to knowing what work there is the agenda views. These provide a landscape to list, filter or manipulate tasks. org-agenda-custom-commands defines which views are available by default.

First, I define a little helper function (from Sacha Chua) to display a note with agenda.

#+begin_src emacs-lisp :tangle yes
  (defun bnb/org-agenda-with-tip (arg)
    (org-agenda-list arg)
    (let ((inhibit-read-only t)
          (pos (point)))
      (goto-char (point-max))
      (goto-char pos)))
#+end_src

#+RESULTS:
: bnb/org-agenda-with-tip

WIP from: https://github.com/fniessen/emacs-leuven/blob/master/org-custom-agenda-views.el

#+begin_src emacs-lisp :tangle yes
  ;; Reset everything to nil
  (setq org-agenda-custom-commands nil)

  (add-to-list 'org-agenda-custom-commands
               '("b" "Agenda" bnb/org-agenda-with-tip))

  (add-to-list 'org-agenda-custom-commands
               '("c" . "COLLECT...") t)

  (add-to-list 'org-agenda-custom-commands
               '("cb" "CollectBox"
                 ((alltodo ""))))

  (add-to-list 'org-agenda-custom-commands
               '("f" . "FOCUS...") t)

  (add-to-list 'org-agenda-custom-commands
               `("f." "Today"
                 ((agenda ""
                          ((org-agenda-entry-types '(:timestamp :sexp))
                           (org-agenda-overriding-header
                            (concat "CALENDAR Today"
                                    (format-time-string "%a %d" (current-time))))
                           (org-agenda-span 'day)))
                  (tags-todo "LEVEL=1+REFILE"
                             ((org-agenda-overriding-header "COLLECTBOX (Unscheduled)")))
                  (tags-todo "DEADLINE=\"<+0d>\""
                             ((org-agenda-overriding-header "DUE TODAY")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'notedeadline))
                              (org-agenda-sorting-strategy '(priority-down))))
                  (tags-todo "DEADLINE<\"<+0d>\""
                             ((org-agenda-overriding-header "OVERDUE")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'notedeadline))
                              (org-agenda-sorting-strategy '(priority-down))))
                  (agenda ""
                          ((org-agenda-entry-types '(:scheduled))
                           (org-agenda-overriding-header "SCHEDULED")
                           (org-agenda-skip-function
                            '(org-agenda-skip-entry-if 'todo 'done))
                           (org-agenda-sorting-strategy
                            '(priority-down time-down))
                           (org-agenda-span 'day)
                           (org-agenda-start-on-weekday nil)
                           (org-agenda-time-grid nil)))
                  (todo "DONE"
                        ((org-agenda-overriding-header "COMPLETED"))))
                 ((org-agenda-format-date "")
                  (org-agenda-start-with-clockreport-mode nil))) t)

  (add-to-list 'org-agenda-custom-commands
               '("fh" "Hotlist"
                 ((tags-todo "DEADLINE<\"<+0d>\""
                             ((org-agenda-overriding-header "OVERDUE")))
                  (tags-todo "DEADLINE>=\"<+0d>\"+DEADLINE<=\"<+1w>\""
                             ((org-agenda-overriding-header "DUE IN NEXT 7 DAYS")))
                  (tags-todo "DEADLINE=\"\"+FLAGGED|DEADLINE>\"<+1w>\"+FLAGGED"
                             ((org-agenda-overriding-header "FLAGGED"))))
                 ((org-agenda-todo-ignore-scheduled 'future)))  t)

  (add-to-list 'org-agenda-custom-commands
               '("r" . "REVIEW...") t)

  (add-to-list 'org-agenda-custom-commands
               '("ra" . "All Tasks...") t)

  (add-to-list 'org-agenda-custom-commands
               '("rad" "All Tasks (grouped by Due Date)"
                 ((tags-todo "DEADLINE<\"<+0d>\""
                             ((org-agenda-overriding-header "OVERDUE")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'notdeadline))))
                  (tags-todo "DEADLINE=\"<+0d>\""
                             ((org-agenda-overriding-header "DUE TODAY")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'notdeadline))))
                  (tags-todo "DEADLINE=\"<+1d>\""
                             ((org-agenda-overriding-header "DUE TOMORROW")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'notdeadline))))
                  (tags-todo "DEADLINE>\"<+1d>\"+DEADLINE<=\"<+7d>\""
                             ((org-agenda-overriding-header "DUE WITHIN A WEEK")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'notdeadline))))
                  (tags-todo "DEADLINE>\"<+7d>\"+DEADLINE<=\"<+28d>\""
                             ((org-agenda-overriding-header "DUE WITHIN A MONTH")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'notdeadline))))
                  (tags-todo "DEADLINE>\"<+28d>\""
                             ((org-agenda-overriding-header "DUE LATER")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'notdeadline))))
                  (tags-todo "TODO={WAIT}"
                             ((org-agenda-overriding-header "WAITING FOR")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'deadline))))
                  (todo ""
                        ((org-agenda-overriding-header "WAITING FOR")
                         (org-agenda-skip-function
                          '(org-agenda-skip-entry-if 'deadline)))))
                 ((org-agenda-sorting-strategy '(priority-down))
                  (org-agenda-write-buffer-name "All Tasks (grouped by Due Date)"))
                 "~/Documents/Org/all-tasks-by-due-date.pdf") t)

  (add-to-list 'org-agenda-custom-commands
               '("ra1" "All Tasks with a due date"
                 ((alltodo ""))
                 ((org-agenda-overriding-header "All Tasks (sorted by Due Date)")
                  (org-agenda-skip-function
                   '(org-agenda-skip-entry-if 'notdeadline))
                  (org-agenda-sorting-strategy '(deadline-up)))) t)

  (add-to-list 'org-agenda-custom-commands
               '("rag" "Grouped Tasks")
               ())

  (add-to-list 'org-agenda-custom-commands
               '("rt" . "Timesheet...") t)

  ;; Show what happened today.
  (add-to-list 'org-agenda-custom-commands
               '("rtd" "Daily Timesheet"
                 ((agenda ""))
                 ((org-agenda-log-mode-items '(clock closed))
                  (org-agenda-overriding-header "DAILY TIMESHEET")
                  (org-agenda-show-log 'clockcheck)
                  (org-agenda-span 'day)
                  (org-agenda-start-with-clockreport-mode t)
                  (org-agenda-time-grid nil))) t)

  ;; Show what happened this week.
  (add-to-list 'org-agenda-custom-commands
               '("rtw" "Weekly Timesheet"
                 ((agenda ""))
                 (
                  ;; (org-agenda-format-date "")
                  (org-agenda-overriding-header "WEEKLY TIMESHEET")
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))
                  (org-agenda-span 'week)
                  (org-agenda-start-on-weekday 1)
                  (org-agenda-start-with-clockreport-mode t)
                  (org-agenda-time-grid nil))) t)

  (add-to-list 'org-agenda-custom-commands
               '("rc" . "Calendar...") t)

  (add-to-list 'org-agenda-custom-commands
               '("rc7" "Events and appointments for 7 days"
                 ((agenda ""))
                 ((org-agenda-entry-types '(:timestamp :sexp))
                  ;; (org-agenda-overriding-header "Calendar for 7 days")
                  (org-agenda-span 'week)
                  (org-agenda-format-date "\n%a %d")
                  ;; (org-agenda-date-weekend ... new face ...)
                  (org-agenda-time-grid nil))) t)

  (add-to-list 'org-agenda-custom-commands
               '("rw" "Weekly review"
                 ((tags "CATEGORY={@REFILE}&LEVEL<=2"
                        ((org-agenda-overriding-header "NEW TASKS")))
                  (agenda ""
                          ((org-agenda-clockreport-mode t)
                           (org-agenda-format-date
                            (concat "\n"
                                    "%Y-%m-%d" " %a "
                                    (make-string (window-width) ?_)))
                           (org-agenda-overriding-header "PAST WEEK")
                           (org-agenda-prefix-format " %?-11t %i %-12:c% s")
                           (org-agenda-show-log 'clockcheck)
                           (org-agenda-span 7)
                           (org-agenda-start-day "-1w")
                           (org-deadline-warning-days 0)))
                  (agenda ""
                          ((org-agenda-overriding-header "NEXT MONTH")
                           (org-agenda-span 'month)
                           (org-agenda-start-day "+0d")
                           (org-deadline-warning-days 0)))
                  (todo "PROJECT"
                        ((org-agenda-overriding-header "PROJECT LIST")))
                  (todo "DONE|PROJECTDONE"
                        ((org-agenda-overriding-header
                          "Candidates to be archived"))))))

  (use-package org-super-agenda
    :ensure t
    :quelpa (org-super-agenda :fetcher github :repo "alphapapa/org-super-agenda")
    :config
    (org-super-agenda-mode t)
    (add-to-list 'org-agenda-custom-commands
                 '("rag" "Grouped Tasks"
                   ((todo "" ((org-super-agenda-groups
                               '((:name "All Tasks"
                                        :auto-category t))))))))
    (add-to-list 'org-agenda-custom-commands
                 '("f1" "Projects"
                   ((tags "+project" ((org-super-agenda-groups
                                       '((:name "Projects"
                                                :auto-category t
                                                :children t
                                                :todo ("NEXT" "TODO" "WAITING")
                                                :order 1))))))))
    (add-to-list 'org-agenda-custom-commands
                 '("f2" "Score 2 Tasks"
                   ((tags "+Score=2" ((org-super-agenda-groups
                                       '((:name "Score 1 Tasks" :auto-category t))))))))
    (add-to-list 'org-agenda-custom-commands
                 '("f3" "Score 3 Tasks"
                   ((tags "+Score=3" ((org-super-agenda-groups
                                       '((:name "Score 1 Tasks" :auto-category t))))))))
    (add-to-list 'org-agenda-custom-commands
                 '("f5" "Score 5 Tasks"
                   ((tags "+Score=5" ((org-super-agenda-groups
                                       '((:name "Score 1 Tasks" :auto-category t))))))))
    (add-to-list 'org-agenda-custom-commands
                 '("f8" "Score 8 Tasks"
                   ((tags "+Score=8" ((org-super-agenda-groups
                                       '((:name "Score 1 Tasks" :auto-category t)))))))))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23954 59890 535382 601000) :init (23954 59890 535343 195000) :config (23954 59890 534977 377000) :config-secs (0 0 839 245000) :init-secs (0 0 1423 687000) :use-package-secs (0 0 1750 202000)))

Phew! That is a lot of lisp! It is easiest to describe each view by the key that triggers it.

a Agenda with tip (keystroke tip)
w Tasks waiting on something
r Refile New notes and tasks
n Next Any task with the NEXT tag
A Tasks ready for Archive
u Upcoming tasks Scheduled or due in the next week.
U Unscheduled tasks
P Printable agenda Formats tasks at the top with upcoming items below.
S Scoreless tasks Use this to get the scoreless tasks and edit in column mode
h Habits
# Stuck projects
z Agenda with Personal Files
c Select default clocking task

** COMMENT Examples by Alphapapa

#+begin_src emacs-lisp :tangle yes
  (use-package org-super-agenda
    :quelpa (org-super-agenda :fetcher github :repo "alphapapa/org-super-agenda")
    :config
    (org-super-agenda-mode t))

  (setq org-super-agenda-groups
        '((:name "Next Items"
                 :time-grid t
                 :habit t
                 :tag ("NEXT"))
          (:name "Projects"
                 :children t
                 :todo ("NEXT" "TODO" "WAITING")
                 :order 1)
          ))

#+end_src

#+RESULTS:
| :name | Next Items | :time-grid | t | :habit | t                   | :tag   | (NEXT) |
| :name | Projects   | :children  | t | :todo  | (NEXT TODO WAITING) | :order |      1 |

#+begin_src emacs-lisp :tangle no
  ;; Reset everything to nil
  (setq org-agenda-custom-commands nil)

  (use-package org-super-agenda
    :ensure t
    :quelpa (org-super-agenda :fetcher github :repo "alphapapa/org-super-agenda")
    :config
    (org-super-agenda-mode t))

  (setq org-agenda-custom-commands
        '(("z" "Super zaen view"
           ((agenda "" ((org-agenda-span 'day)
                        (org-super-agenda-groups
                         '((:name "Today"
                                  :time-grid t
                                  :date today
                                  :todo "TODAY"
                                  :scheduled today
                                  :order 1)
                           (:name "Quick Picks"
                                  :effort <= "0:30")
                           ))
                        )))
           (alltodo "" ((org-agenda-overriding-header "")
                        (org-super-agenda-groups
                         '((:name "Next to do"
                                  :todo "NEXT"
                                  :order 1)
                           (:name "Waiting"
                                  :todo "WAITING"
                                  :order 20)
                           (:name "Due Today"
                                  :deadline today
                                  :order 2)
                           (:name "Due Soon"
                                  :deadline future
                                  :order 8)
                           (:name "Overdue"
                                  :deadline past
                                  :order 7)
                           (:name "Projects"
                                  :tag "project"
                                  :order 14)
                           ;; (:discard (:tag ("Chore" "Routine" "Daily")))
                           ))))))))

#+end_src

#+RESULTS:
| z | Super zaen view | ((agenda  ((org-agenda-span 'day) (org-super-agenda-groups '((:name Today :time-grid t :date today :todo TODAY :scheduled today :order 1) (:name Quick Picks :effort <= 0:30)))))) | (alltodo  ((org-agenda-overriding-header ) (org-super-agenda-groups '((:name Next to do :todo NEXT :order 1) (:name Waiting :todo WAITING :order 20) (:name Due Today :deadline today :order 2) (:name Due Soon :deadline future :order 8) (:name Overdue :deadline past :order 7) (:name Projects :tag project :order 14))))) |

** org-ql

- https://github.com/alphapapa/org-ql

org-ql is a lispy query language for Org files. It allows you to find Org entries matching certain criteria and return a list of them or perform actions on them. Commands are also provided which display matching results.

#+begin_src emacs-lisp :tangle yes
  (require 'org-ql)

  (use-package org-ql)
  ;;  :quelpa (org-ql :fetcher github :repo "alphapapa/org-ql"))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23960 47870 865728 276000) :init (23960 47870 865703 945000) :config (23960 47870 865411 131000) :config-secs (0 0 13 882000) :init-secs (0 0 738 217000) :use-package-secs (0 0 935 669000)))

** org-sideline

- https://github.com/alphapapa/org-sidebar

#+begin_src emacs-lisp :tangle yes
  (use-package org-sidebar)
  ;;  :quelpa (org-sidebar :fetcher github :repo "alphapapa/org-sidebar"))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23960 48128 850470 636000) :init (23960 48128 850459 899000) :config (23960 48128 850303 367000) :config-secs (0 0 3 871000) :init-secs (0 0 38013 165000) :use-package-secs (0 0 38157 554000)))

* org-super-agenda

- Read: https://github.com/mwfogleman/.emacs.d/blob/master/michael.org
#+begin_src emacs-lisp :tangle yes
  (use-package org-super-agenda
    :init
    (org-super-agenda-mode)

    (defun my-org-super-agenda ()
      (interactive)
      (let ((org-super-agenda-groups
             '(
               (:name "Scheduled"
                      :time-grid t
                      :scheduled today)
               (:name "Flagged" ;; Not to forget stuff
                      :tag "FLAGGED")
               ;; After the last group, the agenda will display items that didn't
               ;; match any of these groups, with the default order position of 99
               ;; To prevent this, add this code:
               ;; (:discard (:anything t))
               (:discard (:not
                          (:and
                           (:todo "PROJECT"))))
             )
            ))
            (org-todo-list))
            (org-agenda nil "a"))

        (defun my-projects-agenda ()
          (interactive)
          (let ((org-super-agenda-groups
                 '((:name "Projects" ;; monastery work
                          :todo "PROJECT"
                          :children t)
                   ;; After the last group, the agenda will display items that didn't
                   ;; match any of these groups, with the default order position of 99
                   ;; To prevent this, add this code:
                   (:discard (:anything t)))))
            (org-todo-list)
            (org-agenda nil "a")
            ))

        (bind-keys ("C-c 1" . my-projects-agenda)
                   ("C-c 0" . my-org-super-agenda)))
        
        ;; :config ;; I don't use it
        ;; Enable folding
        ;; (use-package origami
        ;;  :bind (:map org-super-agenda-header-map
        ;;              ("TAB" . origami-toggle-node))
        ;;  :hook ((org-agenda-mode . origami-mode))))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23977 51559 253628 701000) :init (23977 51559 253602 436000) :config (23977 51559 253300 629000) :config-secs (0 0 15 942000) :init-secs (0 0 1434 508000) :use-package-secs (0 0 1677 929000)))

* Settings from org-query
- https://github.com/remyhonig/org-query

#+begin_src emacs-lisp :tangle yes
  (require 'org-query)
  (require 'org-query-gtd)
#+end_src

#+RESULTS:
: org-query-gtd

* Settings from Pragmatic Emacs
** Reorder TODO items 
:PROPERTIES:
:ID:       81742c80-0d32-4949-8462-cb6e3da0c5fe
:END:
- http://pragmaticemacs.com/emacs/reorder-todo-items-in-your-org-mode-agenda/

#+begin_src emacs-lisp :tangle yes
  (defun bjm/org-headline-to-top ()
    "Move the current org headline to the top of its section"
    (interactive)
    ;; check if we are at the top level
    (let ((lvl (org-current-level)))
      (cond
       ;; above all headlines so nothing to do
       ((not lvl)
        (message "No headline to move"))
       ((= lvl 1)
        ;; if at top level move current tree to go above first headline
        (org-cut-subtree)
        (beginning-of-buffer)
        ;; test if point is now at the first headline and if not then
        ;; move to the first headline
        (unless (looking-at-p "*")
          (org-next-visible-heading 1))
        (org-paste-subtree))
       ((> lvl 1)
        ;; if not at top level then get position of headline level above
        ;; current section and refile to that position. Inspired by
        ;; https://gist.github.com/alphapapa/2cd1f1fc6accff01fec06946844ef5a5
        (let* ((org-reverse-note-order t)
               (pos (save-excursion
                      (outline-up-heading 1)
                      (point)))
               (filename (buffer-file-name))
               (rfloc (list nil filename nil pos)))
          (org-refile nil nil rfloc))))))

  (defun bjm/org-agenda-item-to-top ()
    "Move the current agenda item to the top of the subtree in its file"
    (interactive)
    ;; save buffers to preserve agenda
    (org-save-all-org-buffers)
    ;; switch to buffer for current agenda item
    (org-agenda-switch-to)
    ;; move item to top
    (bjm/org-headline-to-top)
    ;; go back to agenda view
    (switch-to-buffer (other-buffer (current-buffer) 1))
    ;; refresh agenda
    (org-agenda-redo)
    )

  ;; bind to key 1
  (define-key org-agenda-mode-map (kbd "1") 'bjm/org-agenda-item-to-top)
#+end_src

#+RESULTS:
: bjm/org-agenda-item-to-top

** Use org-mode tables and structures in emails and elsewhere

I love the way that org-mode allows you to add simple clean structures to your text, with lists and tables. You can get some of that functionality in other modes by using
orgstruct-mode and orgtbl-mode, which are part of org-mode. 

Enable these minor modes in any major mode for one-off use with M-x orgstruct++-mode or M-x orgtbl-mode and you can use the normal org-mode commands to create lists and
tables. I find this especially useful in emails, so I use this code in my emacs config file to automatically enable these for message-mode 

DGM: already under [[id:48af1742-2872-4dbc-8f3d-ff8940e64c39][Org functionality in compose buffer]]  in the =mu4e.org= file. 

#+begin_src emacs-lisp :tangle no
  ;; use org structures and tables in message mode
  ;;(add-hook 'message-mode-hook 'turn-on-orgtbl)
  ;;(add-hook 'message-mode-hook 'turn-on-orgstruct++)
#+end_src

#+RESULTS:
| turn-on-orgstruct++ | turn-on-orgtbl | org-contacts-setup-completion-at-point |

* Settings from Yiu Fung
- https://yiufung.net/post/org-mode-hidden-gems-pt1/

** Increase sub-item indentation

#+begin_src emacs-lisp :tangle yes
  (setq org-list-indent-offset 1)
#+end_src

** Hierarchical todo statistics

=org-hierarchical-todo-statistics= controls whether TODO statistics should cover only direct children. This can be set on a per-subtree basis.

#+begin_src emacs-lisp :tangle yes
  (setq org-hierarchical-todo-statistics nil) ; t will make it cover only direct children
#+end_src

** Change log note templates
If any of =org-log-(done/refile/repeat/reschedule/redeadline)= is set to =note=, then a status change would trigger insertion of a note in the :LOGBOOK: drawer. It’s possible to define template for notes via =org-log-note-headings=. Here’s my setting, which adds new timestamp (=%s=) to  =reschedule= and =redeadline=:

#+begin_src emacs-lisp :tangle yes
  (setq org-log-note-headings '((done        . "CLOSING NOTE %t")
                                (state       . "State %-12s from %-12S %t")
                                (note        . "Note taken on %t")
                                (reschedule  . "Schedule changed on %t: %S -> %s")
                                (delschedule . "Not scheduled, was %S on %t")
                                (redeadline  . "Deadline changed on %t: %S -> %s")
                                (deldeadline . "Removed deadline, was %S on %t")
                                (refile      . "Refiled on %t")
                                (clock-out   . "")))
#+end_src

These days I set many of =org-log-*= to note to keep verbose log of task progress. Whenever a task is =delayed/rescheduled/redeadlined=, the reasons are kept as notes in logbook drawer. In this way, a full history is retained while not intervening normal edits. Verbose timestamps also helps in keeping a daily working journal, and when using Org Sparse Trees (especially with the c option).

#+RESULTS:
: ((done . CLOSING NOTE %t) (state . State %-12s from %-12S %t) (note . Note taken on %t) (reschedule . Schedule changed on %t: %S -> %s) (delschedule . Not scheduled, was %S on %t) (redeadline . Deadline changed on %t: %S -> %s) (deldeadline . Removed deadline, was %S on %t) (refile . Refiled on %t) (clock-out . ))

* Org-contacts

#+begin_src emacs-lisp :tangle yes
  (use-package org-contacts
    :ensure nil
    :after org
    :custom
    (org-contacts-files '("/home/dgm/Dropbox/gtd/contacts.org")))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23971 22201 764284 712000) :init (23971 22201 764185 251000) :config (23971 22201 763607 281000) :config-secs (0 0 15 830000) :init-secs (0 0 990 627000) :use-package-secs (0 0 1149 302000) ...))

* Remapping of keys for headings' movement

#+begin_src emacs-lisp :tangle yes
;;(define-key org-mode-map (kbd "M-<right>") 'org-shiftmetaright)
;;(define-key org-mode-map [M-<right>] 'org-shiftmetaright)
(with-eval-after-load 'org
    (define-key org-mode-map (kbd "M-<right>") nil)
    (define-key org-mode-map (kbd "M-<right>") 'org-shiftmetaright)
    (define-key org-mode-map (kbd "M-<left>") nil)
    (define-key org-mode-map (kbd "M-<left>") 'org-shiftmetaleft)
    (define-key org-mode-map (kbd "M-S-<right>") nil)
    (define-key org-mode-map (kbd "M-S-<right>") 'org-metaright)
    (define-key org-mode-map (kbd "M-S-<left>") nil)
    (define-key org-mode-map (kbd "M-S-<left>") 'org-metaleft))
#+end_src

#+RESULTS:
: org-metaleft

* Save all org buffers...
... at 1 minute before the hour:

#+begin_src emacs-lisp :tangle no
(run-at-time "00:59" 3600 'org-save-all-org-buffers)
#+end_src

#+RESULTS:
: [nil 24003 24132 0 3600 org-save-all-org-buffers nil nil 0]

* Provide

#+BEGIN_SRC emacs-lisp :tangle yes
  (provide 'starter-kit-org)
#+END_SRC

#+RESULTS:
: starter-kit-org

* Final message
#+source: message-line
#+begin_src emacs-lisp :tangle yes
  (message "Starter Kit Org loaded.")
#+end_src

