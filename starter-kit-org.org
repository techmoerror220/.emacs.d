# -*- coding: utf-8 -*-
# -*- find-file-hook: org-babel-execute-buffer -*-

#+TITLE: Starter Kit Org
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Org
Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also implemented using Org-mode and [[http://git-scm.com/][git]].

The [Local Org-mode XeLaTeX Export Settings] section has
 references to fonts that you may not have available on your
 system. Change the references as appropriate, or comment out or
 delete the lines.

** Overview
Here are the Org files I use. I should probably organize them better.  Inspired by Sacha Chua.

| archive.org      | Archived subtrees                                                        |
| articles.org     | Huge file with artilce notes                                             |
| bibliography.org | Needed for =org-ref= workflow, I think.                                  |
| business.org     | Business-related notes and TODOs                                         |
| compras.org      |                                                                          |
| contacts.org     | Contact information and people-related tasks                             |
| gtd.org          | Main document for outlining projects                                     |
| inbox.org        | My main Org file. Inbox for M-x org-capture, tasks, weekly reviews, etc. |
| journal.org      | Stoic journal                                                            |
| learning.org     | Learning plan                                                            |
| math.org         | Math notes                                                               |
| medidas.org      |                                                                          |
| notes.org        | Notes without a TODO flag                                                |
| programming.org  | Programming projects, fabric tracking, etc.                              |
| tickler.org      | TODOs and events with a date                                             |
| someday.org      | Plans without due date                                                   |


** Export Settings and Helpful Packages
*** Markdown 
HTML and LaTeX exporters are shown by default. We add the Markdown exporter to the menu.

#+begin_src emacs-lisp :tangle yes
  ;; Autocomplete for orgmode
  ;; (require 'org-ac)
  ;; (org-ac/config-default)

  ;; Markdown exporter
  (require 'ox-md)

  ;; (setq org-completion-use-ido t)  ;; dgm disables in case it interferes with helm
  ;; (require 'org-special-blocks)
  ;; (if window-system (require 'org-mouse))

  ;; Compatibility with WindMove
  ;; Make windmove work in org-mode:
;;  (add-hook 'org-shiftup-final-hook 'windmove-up)
;;  (add-hook 'org-shiftleft-final-hook 'windmove-left)
;;  (add-hook 'org-shiftdown-final-hook 'windmove-down)
;;  (add-hook 'org-shiftright-final-hook 'windmove-right)
  ;; (if window-system (require 'org-mouse))
#+end_src

*** Pandoc 

Following Daniel Mai we add the exporter for Pandoc as well (remember to install Pandoc on your system!). Pandoc converts between a huge number of different file formats.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ox-pandoc
  :ensure t)
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23561 372 145757 865000) :init (23561 372 145716 931000) :init-secs (0 0 1074 531000) :use-package-secs (0 0 1398 100000) :config (23561 372 145174 215000) :config-secs (0 0 33 101000)))

*** Local Pandoc Support

A pandoc menu for markdown and tex files.

#+src-name: pandoc_mode
#+begin_src emacs-lisp :tangle yes
(use-package pandoc-mode
	:ensure t
  :config
  (add-hook 'markdown-mode-hook 'pandoc-mode)
  (add-hook 'TeX-mode-hook 'pandoc-mode)  
  (add-hook 'org-mode-hook 'pandoc-mode)
  (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings))
  ;; (global-set-key (kbd "C-c C-p") 'pandoc-main-hydra/body) ;; not sure it is taken
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23561 617 539596 896000) :init (23561 617 539564 637000) :config (23561 617 539347 779000) :config-secs (0 0 432 56000) :init-secs (0 0 824 478000) :use-package-secs (0 0 1011 280000)))

*** Export options 

Taken from Caolan on Publishing (https://caolan.org/dotfiles/emacs.html)
Remove section numbers, table of contents etc. from =HTML= output plus some other sensible defaults. These can be overridden in =org-publish-project-alist=.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-export-with-section-numbers nil)
(setq org-html-include-timestamps nil)
(setq org-export-with-sub-superscripts nil)
(setq org-export-with-toc nil)
(setq org-html-toplevel-hlevel 2)
(setq org-export-htmlize-output-type 'css)
(setq org-export-html-coding-system 'utf-8-unix)
(setq org-html-viewport nil)
(setq org-export-with-smart-quotes t)
#+END_SRC

And from https://stackoverflow.com/questions/24904208/emacs-windows-org-mode-encoding this tip to avoid problems with utf-8 encoding in org, though someone says it doesn't do anything.

#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list
 'file-coding-system-alist '("\\.org" . utf-8-unix))
#+END_SRC


*** Html export settings

Create =html= files form the =org= sources, to help with documentation. To set up org-mode for publishing projects to HTML you will need to change these settings, as they apply only to the Starter Kit.

#+source: html-export-settings
#+begin_src emacs-lisp :tangle yes
(setq org-publish-project-alist
      '(("org"
         :base-directory "~/.emacs.d/"
         :publishing-directory "/media/dgm/blue/documents/websites/esk/"
         :publishing-function org-html-publish-to-html
         :auto-sitemap t
         :sitemap-filename "index.org"
         :sitemap-title "Emacs Starter Kit for the Social Sciences: Documentation"
         :section-numbers t
         ;;:table-of-contents t
         :html-head "<link rel=\"stylesheet\"
                   href=\"http://kieranhealy.org/css/org.css\"
                   type=\"text/css\"/>"            )))

(setq org-html-postamble nil)
#+end_src

#+RESULTS: html-export-settings

*** =twbs= or html made cool 

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ox-twbs
  :ensure t)
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23561 790 48242 633000) :init (23561 790 48205 768000) :config (23561 790 47836 935000) :config-secs (0 0 26 942000) :init-secs (0 0 707 567000) :use-package-secs (0 0 940 130000)))

***  Configure Org-babel
- Add LaTeX to the list of languages Org-babel will recognize.
#+srcname: add-latex
#+begin_src emacs-lisp :tangle yes
(require 'ob-latex)
;; (org-babel-add-interpreter "latex")
;; (add-to-list 'org-babel-tangle-langs '("latex" "tex"))
#+end_src
- Add LaTeX to a list of languages that raise noweb-type errors.
#+srcname: noweb-error
#+begin_src emacs-lisp :tangle yes
(add-to-list 'org-babel-noweb-error-langs "latex")
#+end_src

*** Links in Org mode
A global binding for Org-mode (see [[file:starter-kit-org.org][starter-kit-org]])

Org-mode supports [[http://orgmode.org/manual/Hyperlinks.html#Hyperlinks][links]], this command allows you to store links
globally for later insertion into an Org-mode buffer.  See
[[http://orgmode.org/manual/Handling-links.html#Handling-links][Handling-links]] in the Org-mode manual.

#+begin_src emacs-lisp :tangle yes
(define-key global-map "\C-cl" 'org-store-link)
#+end_src

#+RESULTS:
: org-store-link
*** ebib and citation settings
ebib is a bibtex database manager that works inside emacs. It can
talk to org-mode. See [[http://orgmode.org/worg/org-tutorials/org-latex-export.html#sec-17_2][this Worg tutorial]] for details.
#+source: ebib-setup
#+begin_src emacs-lisp :tangle yes
(org-add-link-type "ebib" 'ebib)

(org-add-link-type
 "cite" 'ebib
 (lambda (path desc format)
   (cond
    ((eq format 'latex)
     (if (or (not desc) (equal 0 (search "cite:" desc)))
         (format "\\cite{%s}" path)
       (format "\\cite[%s]{%s}" desc path)
       )))))

(org-add-link-type
 "parencite" 'ebib
 (lambda (path desc format)
   (cond
    ((eq format 'latex)
     (if (or (not desc) (equal 0 (search "parencite:" desc)))
         (format "\\parencite{%s}" path)
       (format "\\parencite[%s]{%s}" desc path)
       )))))

(org-add-link-type
 "textcite" 'ebib
 (lambda (path desc format)
   (cond
    ((eq format 'latex)
     (if (or (not desc) (equal 0 (search "textcite:" desc)))
         (format "\\textcite{%s}" path)
       (format "\\textcite[%s]{%s}" desc path)
       )))))

(org-add-link-type
 "autocite" 'ebib
 (lambda (path desc format)
   (cond
    ((eq format 'latex)
     (if (or (not desc) (equal 0 (search "autocite:" desc)))
         (format "\\autocite{%s}" path)
       (format "\\autocite[%s]{%s}" desc path)
       )))))

(org-add-link-type
 "footcite" 'ebib
 (lambda (path desc format)
   (cond
    ((eq format 'latex)
     (if (or (not desc) (equal 0 (search "footcite:" desc)))
         (format "\\footcite{%s}" path)
       (format "\\footcite[%s]{%s}" desc path)
       )))))

(org-add-link-type
 "fullcite" 'ebib
 (lambda (path desc format)
   (cond
    ((eq format 'latex)
     (if (or (not desc) (equal 0 (search "fullcite:" desc)))
         (format "\\fullcite{%s}" path)
       (format "\\fullcite[%s]{%s}" desc path)
       )))))

(org-add-link-type
 "citetitle" 'ebib
 (lambda (path desc format)
   (cond
    ((eq format 'latex)
     (if (or (not desc) (equal 0 (search "citetitle:" desc)))
         (format "\\citetitle{%s}" path)
       (format "\\citetitle[%s]{%s}" desc path)
       )))))

(org-add-link-type
 "citetitles" 'ebib
 (lambda (path desc format)
   (cond
    ((eq format 'latex)
     (if (or (not desc) (equal 0 (search "citetitles:" desc)))
         (format "\\citetitles{%s}" path)
       (format "\\citetitles[%s]{%s}" desc path)
       )))))

(org-add-link-type
 "headlessfullcite" 'ebib
 (lambda (path desc format)
   (cond
    ((eq format 'latex)
     (if (or (not desc) (equal 0 (search "headlessfullcite:" desc)))
         (format "\\headlessfullcite{%s}" path)
       (format "\\headlessfullcite[%s]{%s}" desc path)
       )))))
#+end_src

#+RESULTS: ebib-setup
: Created headlessfullcite link.


*** Org-protocol

Org-protocol from https://caolan.org/dotfiles/emacs.html#orgd96aeb0
Use org-protocol to trigger org-mode interactions from external programs. Useful for capturing links from Firefox using the org-mode-capture add-on.

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'org-protocol)
#+END_SRC

#+RESULTS:
: org-protocol

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-protocol
  :ensure nil)
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23753 63985 355912 309000) :init (23753 63985 355860 329000) :config (23753 63985 354999 573000) :config-secs (0 0 25 970000) :init-secs (0 0 1586 604000) :use-package-secs (0 0 1654 354000)))

** Org-Mode Hooks
Make yasnippet work properly with org-mode.

#+begin_src emacs-lisp :tangle yes
;;  (defun yas/org-very-safe-expand ()
;;    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

(defun yas-org-very-safe-expand ()
  (let ((yas-fallback-behavior 'return-nil))
    (and (fboundp 'yas-expand) (yas-expand))))

(add-hook 'org-mode-hook
          (lambda ()
            (add-to-list 'org-tab-first-hook
                         'yas-org-very-safe-expand)
            ))

#+end_src

#+RESULTS:
| (lambda nil (highlight-symbol-mode)) | org-table-stripes-enable | org-mode-reftex-setup | org-ref-org-menu | (lambda nil (org-bullets-mode)) | turn-off-auto-fill | ambrevar/turn-off-indent-tabs | ambrevar/turn-off-linum | (lambda nil (visual-line-mode 1)) | org-indent-mode | (lambda nil (set-face-attribute 'org-level-1 nil :height 1.5) (set-face-attribute 'org-level-2 nil :height 1.2) (set-face-attribute 'org-level-3 nil :height 1.1) (set-face-attribute 'org-level-4 nil :height 1.1) (set-face-attribute 'org-level-5 nil :height 1.1)) | (lambda nil (local-set-key \216 'outline-next-visible-heading) (local-set-key \220 'outline-previous-visible-heading) (local-set-key \225 'outline-up-heading) (local-set-key \227 'org-table-copy-region) (local-set-key \231 'org-table-paste-rectangle) (local-set-key \214 'org-table-sort-lines) (local-set-key \311 'org-toggle-iimage-in-org)) | (lambda nil (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |

#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook
          (lambda ()
            (local-set-key "\M-\C-n" 'outline-next-visible-heading)
            (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
            (local-set-key "\M-\C-u" 'outline-up-heading)
            ;; table
            (local-set-key "\M-\C-w" 'org-table-copy-region)
            (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
            (local-set-key "\M-\C-l" 'org-table-sort-lines)
            ;; display images
            (local-set-key "\M-I" 'org-toggle-iimage-in-org)
            ;;(local-set-key "<M-up>" 'org-move-item-up)
            ;;(local-set-key "<M-down>" 'org-move-item-down)
            ;; yasnippet (using the new org-cycle hooks)
            ;;(make-variable-buffer-local 'yas/trigger-key)
            ;;(setq yas/trigger-key [tab])
            ;;(add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
            ;;(define-key yas/keymap [tab] 'yas/next-field)
            ))
#+end_src

#+RESULTS:
| (lambda nil (local-set-key \216 'outline-next-visible-heading) (local-set-key \220 'outline-previous-visible-heading) (local-set-key \225 'outline-up-heading) (local-set-key \227 'org-table-copy-region) (local-set-key \231 'org-table-paste-rectangle) (local-set-key \214 'org-table-sort-lines) (local-set-key \311 'org-toggle-iimage-in-org) (local-set-key <M-up> 'org-move-item-up) (local-set-key <M-down> 'org-move-item-down)) | (lambda nil (highlight-symbol-mode)) | org-table-stripes-enable | org-mode-reftex-setup | org-display-inline-images | org-ref-org-menu | (lambda nil (org-bullets-mode)) | turn-off-auto-fill | ambrevar/turn-off-indent-tabs | ambrevar/turn-off-linum | (lambda nil (visual-line-mode 1)) | org-indent-mode | (lambda nil (set-face-attribute 'org-level-1 nil :height 1.5) (set-face-attribute 'org-level-2 nil :height 1.2) (set-face-attribute 'org-level-3 nil :height 1.1) (set-face-attribute 'org-level-4 nil :height 1.1) (set-face-attribute 'org-level-5 nil :height 1.1)) | (lambda nil (local-set-key \216 'outline-next-visible-heading) (local-set-key \220 'outline-previous-visible-heading) (local-set-key \225 'outline-up-heading) (local-set-key \227 'org-table-copy-region) (local-set-key \231 'org-table-paste-rectangle) (local-set-key \214 'org-table-sort-lines) (local-set-key \311 'org-toggle-iimage-in-org)) | (lambda nil (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)) | pandoc-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |


Original hook from =dgm.org=

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'org-mode-hook
          (lambda ()
            (set-face-attribute 'org-level-1 nil :height 1.5)
            (set-face-attribute 'org-level-2 nil :height 1.2)
            (set-face-attribute 'org-level-3 nil :height 1.1)
            (set-face-attribute 'org-level-4 nil :height 1.1)
            (set-face-attribute 'org-level-5 nil :height 1.1)))
#+END_SRC

#+RESULTS:
| (lambda nil (highlight-symbol-mode)) | org-table-stripes-enable | org-mode-reftex-setup | org-ref-org-menu | (lambda nil (org-bullets-mode)) | turn-off-auto-fill | ambrevar/turn-off-indent-tabs | ambrevar/turn-off-linum | (lambda nil (visual-line-mode 1)) | org-indent-mode | (lambda nil (set-face-attribute 'org-level-1 nil :height 1.5) (set-face-attribute 'org-level-2 nil :height 1.2) (set-face-attribute 'org-level-3 nil :height 1.1) (set-face-attribute 'org-level-4 nil :height 1.1) (set-face-attribute 'org-level-5 nil :height 1.1)) | (lambda nil (local-set-key \216 'outline-next-visible-heading) (local-set-key \220 'outline-previous-visible-heading) (local-set-key \225 'outline-up-heading) (local-set-key \227 'org-table-copy-region) (local-set-key \231 'org-table-paste-rectangle) (local-set-key \214 'org-table-sort-lines) (local-set-key \311 'org-toggle-iimage-in-org)) | (lambda nil (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |

*** Hooks by Uncle David

Hook from Uncle Dave at https://github.com/daedreth/UncleDavesEmacs

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

#+RESULTS:
| er/add-org-mode-expansions | (lambda nil (org-bullets-mode)) | turn-off-auto-fill | ambrevar/turn-off-indent-tabs | ambrevar/turn-off-linum | (lambda nil (visual-line-mode 1)) | org-indent-mode | (lambda nil (highlight-symbol-mode)) | org-table-stripes-enable | (lambda nil (set-face-attribute 'org-level-1 nil :height 1.5) (set-face-attribute 'org-level-2 nil :height 1.2) (set-face-attribute 'org-level-3 nil :height 1.1) (set-face-attribute 'org-level-4 nil :height 1.1) (set-face-attribute 'org-level-5 nil :height 1.1)) | org-mode-reftex-setup | org-ref-org-menu | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |


Line wrapping from Uncle Dave at https://github.com/daedreth/UncleDavesEmacs.

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'org-mode-hook
          '(lambda ()
             (visual-line-mode 1)))
#+END_SRC

#+RESULTS:
| (lambda nil (highlight-symbol-mode)) | org-table-stripes-enable | org-mode-reftex-setup | org-ref-org-menu | (lambda nil (org-bullets-mode)) | turn-off-auto-fill | ambrevar/turn-off-indent-tabs | ambrevar/turn-off-linum | (lambda nil (visual-line-mode 1)) | org-indent-mode | (lambda nil (set-face-attribute 'org-level-1 nil :height 1.5) (set-face-attribute 'org-level-2 nil :height 1.2) (set-face-attribute 'org-level-3 nil :height 1.1) (set-face-attribute 'org-level-4 nil :height 1.1) (set-face-attribute 'org-level-5 nil :height 1.1)) | (lambda nil (local-set-key \216 'outline-next-visible-heading) (local-set-key \220 'outline-previous-visible-heading) (local-set-key \225 'outline-up-heading) (local-set-key \227 'org-table-copy-region) (local-set-key \231 'org-table-paste-rectangle) (local-set-key \214 'org-table-sort-lines) (local-set-key \311 'org-toggle-iimage-in-org)) | (lambda nil (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |


*** Hooks by Ambrevar

#+BEGIN_SRC emacs-lisp :tangle yes
(dolist (fun '(ambrevar/turn-off-linum ambrevar/turn-off-indent-tabs turn-off-auto-fill))
  (add-hook 'org-mode-hook fun))

(when (require 'org-contacts nil t)
  ;;  (let ((contacts "~/personal/contacts/contacts.org.gpg"))
  (let ((contacts "/media/dgm/blue/documents/dropbox/org/contacts.org.gpg"))
    (when (file-exists-p contacts)
      ;; When used to auto-complete e-mail addresses, the file is automatically
      ;; loaded.  The buffer usually need not be restored by a desktop session.
      (when desktop-save-mode
        (setq desktop-files-not-to-save
              (concat (substring desktop-files-not-to-save 0 -2) "\\|" (regexp-quote (expand-file-name contacts)) "\\)")))
      (setq org-contacts-files (list contacts)))))
#+END_SRC

#+RESULTS:

** Speed keys
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

Speed commands are a nice and quick way to perform certain actions while at the beginning of a heading. It’s not activated by default.

See the =org-speed-commands-default= variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to =org-babel-describe-bindings=) will
display a list of the code blocks commands and their related keys.

#+begin_src emacs-lisp :tangle yes
(setq org-use-speed-commands t)
#+end_src

#+RESULTS:
: t

** Code blocks
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
=org-babel-load-languages= variable, or with an elisp form like the
one below.  The customize interface of =org-babel-load-languages=
contains an up to date list of the currently supported languages.

DGM 30 dic 2018: tangle no as I've moved this to =-stats.org=.

#+begin_src emacs-lisp :tangle no
(require 'ob-stata)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (R . t)
   (perl . t)
   (ruby . t)
   (python . t)
   (js . t)
   (haskell . t)
   (stata . t)
   (shell . t)
   (latex . t)
   ))

;; (sh . t)
;; (scheme . t)


;; I am following Ista Zahn here: don't include (stata . t) but do (require 'ob-stata) afterwards. Stil, when I do so, I get the Debugger entered--Lisp error: (void-variable inferior-STA-program-name)
;; eval(inferior-STA-program-name) so the problem comes from =ob-stata=.
#+end_src

#+RESULTS:

The next block makes org-babel aware that a lower-case 'r' in a =src= block header should be processed as R. 

#+source: add-r
#+begin_src emacs-lisp :tangle yes
(add-to-list 'org-src-lang-modes
             '("r" . ess-mode))

(add-to-list 'org-src-lang-modes
             '("stata" . ess-mode))
#+end_src

#+RESULTS: add-r
: ((stata . ess-mode) (r . ess-mode) (ocaml . tuareg) (elisp . emacs-lisp) (ditaa . artist) (asymptote . asy) (dot . fundamental) (sqlite . sql) (calc . fundamental) (C . c) (cpp . c++) (C++ . c++) (screen . shell-script) (shell . sh) (bash . sh))

** Code block fontification
:PROPERTIES:
:CUSTOM_ID: code-block-fontification
:END:

The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.

Added from Daniel Mai at https://github.com/danielmai/.emacs.d/blob/master/config.org as well

#+begin_src emacs-lisp :tangle yes
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src

#+RESULTS:
: t

Don't ask for confirmation on every =C-c C-c= code-block compile. 

#+source: turn-off-code-block-confirm
#+begin_src emacs-lisp :tangle yes
(setq org-confirm-babel-evaluate nil)
#+end_src

#+RESULTS: turn-off-code-block-confirm


*** More on syntax highlighting 

We'll need the =htmlize= package for syntax highlighting of code blocks (in Caolan's and Uncle Dave's dot files).

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package htmlize
  :ensure t)
#+END_SRC

#+RESULTS:

** Ensure the Latest Org-mode manual is in the info directory

By placing the =doc/= directory in Org-mode at the front of the
=Info-directory-list= we can be sure that the latest version of the
Org-mode manual is available to the =info= command (bound to =C-h i=).

#+begin_src emacs-lisp :tangle yes
(unless (boundp 'Info-directory-list)
  (setq Info-directory-list Info-default-directory-list))
(setq Info-directory-list
      (cons (expand-file-name
             "doc"
             (expand-file-name
              "org"
              (expand-file-name "src" dotfiles-dir)))
            Info-directory-list))
#+end_src

#+RESULTS:
| /home/dgm/.emacs.d/src/org/doc | /home/dgm/.emacs.d/src/org/doc | /home/dgm/.emacs.d/elpa/auctex-12.1.1 | /home/dgm/.emacs.d/elpa/ebib-20180817.1024 | /home/dgm/.emacs.d/elpa/editorconfig-20181025.421 | /home/dgm/.emacs.d/elpa/magit-20180915.1359 | /home/dgm/.emacs.d/elpa/ghub-20180914.802 | /home/dgm/.emacs.d/elpa/magit-popup-20180726.2037 | /home/dgm/.emacs.d/elpa/org-plus-contrib-20180910 | /home/dgm/.emacs.d/elpa/pandoc-mode-20180727.2201 | /home/dgm/.emacs.d/elpa/r-autoyas-20140101.1510 | /home/dgm/.emacs.d/elpa/ess-20180911.2135 | /home/dgm/.emacs.d/elpa/slime-20181031.31 | /home/dgm/.emacs.d/elpa/ivy-20180911.1701 | /home/dgm/.emacs.d/elpa/use-package-20180715.1801 | /home/dgm/.emacs.d/elpa/with-editor-20180726.2044 | /usr/local/share/info/ | /usr/share/info/ | /usr/local/share/info/ |

** Nice Bulleted Lists

#+name: org-bullets
#+begin_src emacs-lisp :tangle yes
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src

#+RESULTS: org-bullets
: t

** More customization

Disable line splitting on M-RET.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-M-RET-may-split-line '((default)))
#+END_SRC

#+RESULTS:
| default |

Replace ellipsis with ellipsis in brackets

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-ellipsis " […]")
#+END_SRC

#+RESULTS:
:  […]

Indentation.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-adapt-indentation nil)
#+END_SRC

#+RESULTS:


** Local Org-mode Settings
*** Smart-quote binding

When in an org-mode buffer, bind TeX-insert-quote to =C-c "=. Turned off by default.

DGM: on 27 dic 2018 I disable the smart-quote-keys function as it was causing C-c ' to not work for editing src block editing in org mode.

Commented out on 27 feb 2019 as =makefile= complains it doesnt have this program and, in effect, I don't have it on Elpa, so I don't know how it works! Also, I don't even know what it does. 

#+source: org-mode-smartquote-key
#+begin_src emacs-lisp :tangle no
;;;;; (require 'typopunct) ;; I don't have this.
;;;;; (typopunct-change-language 'english t)

;; (defun smart-quote-keys () 
;;  (local-set-key (kbd "\C-c \'") 'typopunct-insert-single-quotation-mark)
;;  (local-set-key (kbd "\C \"") 'typopunct-insert-quotation-mark))

;; (add-hook 'org-mode-hook 'smart-quote-keys)
#+end_src

#+RESULTS: org-mode-smartquote-key


*** Archive Settings
Where archived projects and tasks go.
#+source: orgmode-archive
#+begin_src emacs-lisp :tangle yes
(setq org-archive-location "/home/dgm/Dropbox/gtd/archive.org::From %s")
#+end_src

#+RESULTS: orgmode-archive
: /home/dgm/Dropbox/gtd/archive.org::From %s

** Daniel Mai's costumization

From https://github.com/danielmai/.emacs.d/blob/master/config.org

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-image-actual-width 550)
(setq org-highlight-latex-and-related '(latex script entities))
#+END_SRC

#+RESULTS:
| latex | script | entities |

*** SRC block exectuation, watch out!

On Org mode version 9 I wasn’t able to execute source blocks out of the box. Others have ran into the same issue too. The solution is to remove the .elc files from the package directory: =rm ${ORG_DIR}/*.elc=.
*** Org tags

The default value is -77, which is weird for smaller width windows. I’d rather have the tags align horizontally with the header. 45 is a good column number to do that.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-tags-column 45)
#+END_SRC

#+RESULTS:
: 45

** =org-ref= 

=org-ref= from https://github.com/jkitchin/org-ref and the Reddit workflow from https://www.reddit.com/r/emacs/comments/4gudyw/help_me_with_my_orgmode_workflow_for_notetaking/

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-ref
  :ensure t
  :init
  (setq org-ref-completion-library 'org-ref-helm-bibtex)
  (setq org-ref-notes-directory "/media/dgm/blue/documents/elibrary/org/references"
        org-ref-bibliography-notes "/media/dgm/blue/documents/elibrary/org/references/readings.org"
        org-ref-default-bibliography '("/media/dgm/blue/documents/bibs/socbib.bib")
        org-ref-pdf-directory "/media/dgm/blue/documents/elibrary/org/references/pdfs/"))

(require 'org-id)
(require 'org-ref-wos)
(require 'org-ref-scopus)
(require 'org-ref-pubmed)

;; (add-to-list 'org-ref-bibtex-completion-actions '("Edit notes" . helm-bibtex-edit-notes))
#+END_SRC

#+RESULTS:
: org-ref-pubmed

*** Org-ref default citation type

According to https://emacs.stackexchange.com/questions/36430/cant-choose-citation-types-using-org-ref, if I do =C-u C-c ]= I should be able to choose citation type (cite, citep, etc). But I can't. 

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-ref-default-citation-link "textcite")
#+END_SRC

#+RESULTS:
: textcite

*** Pre/post text support from Kitchin
- From: https://github.com/jkitchin/org-ref/blob/master/org-ref.org
org-ref has basic and limited support for pre/post text in citations. You can get pre/post text by using a description in a cite link, with pre/post text separated by ::. For example, See page 20::, for example. It is not easy (maybe not possible) to extend this for the humanities style of citations (e.g. harvard) with nested pre/post text on multiple citations. If anyone knows how to do it, pull requests are welcome! There is an ongoing effort in org-mode for a new citation syntax that may make this more feasible.

If you use helm-bibtex and would like pre/post text support enabled, you can add org-ref-format-citation to bibtex-completion-format-citation-functions:

Tangled to no until I understand what is this Pre/Post thingy.

#+BEGIN_SRC emacs-lisp :tangle no
;;(setf (cdr (assoc 'org-mode bibtex-completion-format-citation-functions)) 'org-ref-format-citation)
#+END_SRC

#+RESULTS:
: org-ref-format-citation

*** For internal citation of labels

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-latex-prefer-user-labels t)
#+END_SRC

#+RESULTS:
: t

** Goodies

Template Lists from Daniel Mai at https://github.com/danielmai/.emacs.d/blob/master/config.org.

I don't know why it doesn't work 

#+BEGIN_SRC emacs-lisp :tangle no
;; (add-to-list 'org-structure-template-alist
;;             '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
;; (add-to-list 'org-structure-template-alist
;;             '("py" "#+BEGIN_SRC python\n?\n#+END_SRC" ""))
;; (add-to-list 'org-structure-template-alist
;;             '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC" ""))
;; (add-to-list 'org-structure-template-alist
;;             '("md" "#+BEGIN_SRC markdown\n?\n#+END_SRC" ""))
#+END_SRC

#+RESULTS:

* Agenda 
** Shortcuts

#+BEGIN_SRC emacs-lisp :tangle yes
;;   (setq org-default-notes-file (concat org-directory "/notes.org")) ;; i disable this to see if I can choose between notes and tasks.
;;    this is not working for some reason: (define-key global-map "\C-c c" 'org-capture)
(define-key global-map (kbd "C-c c") 'org-capture)

;; other bindings from http://orgmode.org/manual/Activation.html
;;     (global-set-key "\C-c l" 'org-store-link)  este binding ya estaba listo
;;     (global-set-key "\C-c a" 'org-agenda) ;; este binding puesto así no funcionaba
;;    (global-set-key "\C-c b" 'org-iswitch);; este binding puesto así no funcionaba

(define-key global-map (kbd "C-c a") 'org-agenda)
;;(define-key global-map (kbd "C-c b") 'org-iswitch) ;; I need C-c b for ido-switch-buffer
#+END_SRC

#+RESULTS:
: org-agenda

Shortcuts that should work in Org but do not. Besides, they used to be bound to =windmove= but no more because I'd rather use =ace-window=

#+BEGIN_SRC emacs-lisp :tangle yes
(define-key global-map (kbd "S-<left>") 'org-timestamp-down-day)
(define-key global-map (kbd "S-<right>") 'org-timestamp-up-day)
(define-key global-map (kbd "S-<up>") 'org-timestamp-up)
(define-key global-map (kbd "S-<down>") 'org-timestamp-down)
#+END_SRC

#+RESULTS:
: org-timestamp-down

** Customization

#+BEGIN_SRC emacs-lisp :tangle yes
(setq
 org-insert-heading-respect-content t
 org-enforce-todo-dependencies t
 org-deadline-warning-days 7
 org-agenda-default-appointment-duration 60
 org-agenda-columns-add-appointments-to-effort-sum t
 ;; Add keywords.
                                        ; org-todo-keywords '((sequence "TODO" "REVIEW" "DONE"))  ;; commented
                                        ; out by dgm
                                        ; Customizations in:
                                        ; http://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html added
                                        ; by dgm
 org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "WAITING(w)"  "|" "DONE(d)" "CANCELED(c)"))
                                        ; comments out
 ;; org-todo-keyword-faces '(("REVIEW" :inherit org-done))
 ;; Priorities.
 org-priority-start-cycle-with-default nil
 org-default-priority 67
 ;; Org-mode aligns text.
 indent-tabs-mode nil)
#+END_SRC

#+RESULTS:

*** Sacha Chua's config for faces

#+BEGIN_SRC emacs-lisp :tangle no
(setq org-todo-keyword-faces
      '(("TODO" . (:foreground "green" :weight bold))
        ("DONE" . (:foreground "cyan" :weight bold))
        ("WAITING" . (:foreground "red" :weight bold))
        ("SOMEDAY" . (:foreground "gray" :weight bold))))
#+END_SRC

*** Set to the location of your Org files on your local system.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-directory "/home/dgm/Dropbox/gtd")
;; Set to <your Dropbox root directory>/MobileOrg.
(setq org-mobile-directory "/media/dgm/blue/documents/dropbox/mobileorg")
;; Set to the files (or directory of files) you want sync'd
;;   (setq org-agenda-files (quote ("/home/dgm/Dropbox/gtd")))  ;; this is the original line by kieran healy.

;; organization by: https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html
;; Org agenda view scans these files and collects all the heading with a TODO (or related) keyword
(setq org-agenda-files (list "/home/dgm/Dropbox/gtd/inbox.org"
                             "/home/dgm/Dropbox/gtd/gtd.org"
                             "/home/dgm/Dropbox/gtd/journal.org"
                             "/media/dgm/blue/documents/proyectos/mtj/mtj_gtd.org" ; i could add it with =C-c [= but that action does not survive across sections
                             "/media/dgm/blue/documents/proyectos/iat_methods/iat_methods.org"
                             "/media/dgm/blue/documents/proyectos/laBussola/laBussola_gtd.org"
                             "/home/dgm/Dropbox/gtd/tickler.org"))
#+END_SRC

#+RESULTS:
| /home/dgm/Dropbox/gtd/inbox.org | /home/dgm/Dropbox/gtd/gtd.org | /home/dgm/Dropbox/gtd/journal.org | /media/dgm/blue/documents/proyectos/mtj/mtj_gtd.org | /media/dgm/blue/documents/proyectos/iat_methods/iat_methods.org | /media/dgm/blue/documents/proyectos/laBussola/laBussola_gtd.org | /home/dgm/Dropbox/gtd/tickler.org |


From https://stackoverflow.com/questions/10635989/emacs-org-agenda-list-destroy-my-windows-splits. 

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-agenda-window-setup 'current-window)
#+END_SRC

#+RESULTS:
: current-window

** Custom agenda commands in overview  
Tip from https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html.

Useful for using custom agenda commands to get an overview of actions by context or tag. Here’s an example custom agenda command that will display all actions for the =@office= context. Following the GTD principle, what I usually want is to only show the first action to be done (or next action) for each project with the =@office= tag. That can be achieved using a skipping condition. I've tweak it so that I can have it work for entries tagged for the context "work" and for the context "home".

HOWEVER I am not 100% sure how useful is all this  because I have a nice option in C-c a to choose filtering by tag (/), etc.  Anyways, more info on agenda-custom-commands in http://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html.


#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-agenda-custom-commands
      '(("w" "Weekly Review"
         ((agenda "" ((org-agenda-span 7)))  ;; review upcoming deadlines and appointments
          ;; old code ((org-agenda-fortnight-view)))
          ;; type "l" in the agenda to review logged items
          ;;            (stuck "") ;; review stuck projects as designated by org-stuck-projects
          (todo "STARTED") ;; review  actions that have started
          (todo "NEXT") ;; review next actions
          (todo "TODO") ;; review pending actions waiting for "next actiosn" to be fulfilled
          (todo "WAITING"))) ;; review waiting items
        ("f" "Fortnight Review"
         ((agenda "" ((org-agenda-span 14))) ;; review upcoming deadlines and appointments
          ;; type "l" in the agenda to review logged items
          ;;            (stuck "") ;; review stuck projects as designated by org-stuck-projects
          (todo "STARTED") ;; review  actions that have started
          (todo "NEXT") ;; review next actions
          (todo "TODO") ;; review pending actions waiting for "next actiosn" to be fulfilled
          (todo "WAITING"))) ;; review waiting items
        ("r" "Monthly Review"
         ((agenda "" ((org-agenda-span 31))) ;; review upcoming deadlines and appointments
          ;; type "l" in the agenda to review logged items
          ;;            (stuck "") ;; review stuck projects as designated by org-stuck-projects
          (todo "STARTED") ;; review  actions that have started
          (todo "NEXT") ;; review next actions
          (todo "TODO") ;; review pending actions waiting for "next actiosn" to be fulfilled
          (todo "WAITING"))) ;; review waiting items
        ("y" "Yearly Review"
         ((agenda "" ((org-agenda-span (quote year))))))
        ("p" "Project Review"
         ((tags "project")
          (todo "STARTED") ;; review  actions that have started
          (todo "NEXT") ;; review next actions
          (todo "TODO")))  ;; review pending actions waiting for "next actions" to be fulfilled
        ;;          ("l" "Monthly (Long-Term) Review"
        ;;           ((agenda "" ((org-agenda-span (quote month))))))
        ("o" "Office and home agenda"
         ((agenda "" ((org-agenda-ndays 1))) ;; esto no me funciona... debe ser que (setq org-agenda-span (quote month)) en starter-kit-org.org tiene prioridad
          ;; limits the agenda display to a single day
          (tags-todo "@office|@home")
          (tags-todo "office|home")
          ;;            (tags "project+CATEGORY=\"elephants\"")
          ;;            (tags "review" ((org-agenda-files '("~/org/circuspeanuts.org"))))
          ;; limits the tag search to the file circuspeanuts.org
          ;;            (todo "WAITING")
          )
         ((org-agenda-compact-blocks t))) ;; options set here apply to the entire block
        ;; ...other commands here
        ))

(defun my-org-agenda-skip-all-siblings-but-first ()
  "Skip all but the first non-done entry."
  (let (should-skip-entry)
    (unless (org-current-is-todo)
      (setq should-skip-entry t))
    (save-excursion
      (while (and (not should-skip-entry) (org-goto-sibling t))
        (when (org-current-is-todo)
          (setq should-skip-entry t))))
    (when should-skip-entry
      (or (outline-next-heading)
          (goto-char (point-max))))))

(defun org-current-is-todo ()
  (string= "TODO" (org-get-todo-state)))
#+END_SRC

#+RESULTS:
: org-current-is-todo


Set to the name of the file where new notes will be stored

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-mobile-inbox-for-pull "/media/dgm/blue/documents/dropbox/org/fromMobile.org")
#+END_SRC

#+RESULTS:
: /media/dgm/blue/documents/dropbox/org/fromMobile.org

Finally, as Carsten Dominik says here: http://thread.gmane.org/gmane.emacs.orgmode/523, with the project list You may run into problems with this approach if you have set =org-tags-match-list-sublevels= to a non-nil value, because then, due to tag inheritance, every headline *inside* each project will also show up in the resulting list.  To work around this, you may define your own special command like this:

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my-org-project-list ()
  "Get me a list of projects."
  (interactive)
  (let ((org-tags-match-list-sublevels nil))
    (org-tags-view nil "project")))
#+END_SRC

#+RESULTS:
: my-org-project-list

And guess what?? It works!!!


** Agenda costumization from Ambrevar

Set PDF association in Org-mode (original is ='default=).

#+BEGIN_SRC emacs-lisp :tangle yes
(setcdr (assoc "\\.pdf\\'" org-file-apps) 'emacs)
#+END_SRC

#+RESULTS:
: emacs

** Further customization of agenda

Remove DONE tasks from agenda view. Tip from: https://stackoverflow.com/questions/8281604/remove-done-tasks-from-agenda-view

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done t)
#+END_SRC

#+RESULTS:
: t

*** Globally defined tags. 

Tip from: https://orgmode.org/manual/Setting-tags.html

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-tag-alist '(("airbnb" . ?a) ("algebra" . ?b) ("calculus" . ?c) ("errands" . ?e) ("drill" . ?d)  ("tfg" . ?g) ("@home" . ?h) ("informatica" . ?i) ("kenedy" . ?k) ("leo" . ?l)  ("maths" . ?m) ("@office" . ?o)  ("probability" . ?o) ("project" . ?p) ("reading" . ?r) ("salud" . ?s) ("@telefono" . ?t) ("uned" . ?u) ("writing" . ?w)))
#+END_SRC

#+RESULTS:
: ((airbnb . 97) (algebra . 98) (calculus . 99) (errands . 101) (drill . 100) (tfg . 103) (@home . 104) (informatica . 105) (kenedy . 107) (leo . 108) (maths . 109) (@office . 111) (probability . 111) (project . 112) (reading . 114) (salud . 115) (@telefono . 116) (uned . 117) (writing . 119))

** Public holidays 

Public holidays in Spain. Tip from: https://www.emacswiki.org/emacs/CalendarLocalization
And Calendario de fiestas moviles hasta 2100 en http://www.antonioburgos.com/antologia/semana_santa/curiosidades/zzcurioaalmaque.html
Check another cool customization here: http://www.gnomon.org.uk/diary.html
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'org-agenda)
(require 'holidays)
(setq calendar-holidays holiday-other-holidays)
(setq org-agenda-include-diary t)

;; (setq holiday-other-holidays  ;; with this holidays don't show up in agenda.
;; with the following holidays show up in org-agenda but still it does not show up in orgzly so watch out! 
(setq calendar-holidays          
      '((holiday-fixed 1 1 "Año Nuevo / New Year's Day")
        (holiday-fixed 1 6 "Día de Reyes / Epiphany") 
        (holiday-fixed 2 14 "Valentine's Day")
        ;;          (holiday-fixed 3 5 "Martes de Carnaval")
        ;;          (holiday-fixed 3 6 "Miércoles de Ceniza")
        (holiday-easter-etc -47 "Martes de Carnaval / Shrove Tuesday") 
        (holiday-easter-etc -46 "Miércoles de Ceniza / Ash Friday")
        (holiday-sexp '(calendar-nth-named-day 1 1 3 year 19) "Día de San José")
        (holiday-easter-etc -7 "Domingo de Ramos / Palm Sunday")
        (holiday-easter-etc -3 "Jueves Santo / Maundy Thursday")
        (holiday-easter-etc -2 "Viernes Santo / Good Friday")
        (holiday-easter-etc 0 "Domingo de Resurrección o Pascua / Easter Sunday")
        (holiday-easter-etc +1 "Lunes de Pascua")
        (holiday-fixed 5 1 "Día Internacional del Trabajo")
        (holiday-fixed 5 2 "Día de la Comunidad de Madrid")
        (holiday-fixed 5 6 "Día de la Madre")
        (holiday-fixed 5 15 "Día de San Isidro")
        (holiday-fixed 5 31 "Corpus Christi (Madrid)")
        ;;  (holiday-easter-etc +43 "Día de la Ascención")
        ;;  (holiday-easter-etc +64 "Corpus Christi")
        (holiday-easter-etc 60 "Corpus Christi") ;; en http://lists.gnu.org/archive/html/emacs-devel/2004-07/msg00494.html
        (holiday-fixed 10 12 "Día de la Hispanidad")
        (holiday-fixed 11 1  "Todos los santos")
        (holiday-fixed 11 9  "Día de la Almudena")
        (holiday-fixed 12 25 "Natividad del Señor")
        (holiday-fixed 12 6 "Día de la Constitución")
        (holiday-fixed 12 8 "Inmaculada Concepción") ;; en 2018. En 2019 se trasladará al lunes 9. Ojo! Cambiar con el nuevo agno!!
        ))
#+END_SRC

#+RESULTS:
| holiday-fixed      |                                       1 |                                                1 | Año Nuevo / New Year's Day    |
| holiday-fixed      |                                       1 |                                                6 | Día de Reyes / Epiphany       |
| holiday-fixed      |                                       2 |                                               14 | Valentine's Day               |
| holiday-easter-etc |                                     -47 |              Martes de Carnaval / Shrove Tuesday |                               |
| holiday-easter-etc |                                     -46 |                 Miércoles de Ceniza / Ash Friday |                               |
| holiday-sexp       | '(calendar-nth-named-day 1 1 3 year 19) |                                  Día de San José |                               |
| holiday-easter-etc |                                      -7 |                   Domingo de Ramos / Palm Sunday |                               |
| holiday-easter-etc |                                      -3 |                   Jueves Santo / Maundy Thursday |                               |
| holiday-easter-etc |                                      -2 |                      Viernes Santo / Good Friday |                               |
| holiday-easter-etc |                                       0 | Domingo de Resurrección o Pascua / Easter Sunday |                               |
| holiday-easter-etc |                                       1 |                                  Lunes de Pascua |                               |
| holiday-fixed      |                                       5 |                                                1 | Día Internacional del Trabajo |
| holiday-fixed      |                                       5 |                                                2 | Día de la Comunidad de Madrid |
| holiday-fixed      |                                       5 |                                                6 | Día de la Madre               |
| holiday-fixed      |                                       5 |                                               15 | Día de San Isidro             |
| holiday-fixed      |                                       5 |                                               31 | Corpus Christi (Madrid)       |
| holiday-easter-etc |                                      60 |                                   Corpus Christi |                               |
| holiday-fixed      |                                      10 |                                               12 | Día de la Hispanidad          |
| holiday-fixed      |                                      11 |                                                1 | Todos los santos              |
| holiday-fixed      |                                      11 |                                                9 | Día de la Almudena            |
| holiday-fixed      |                                      12 |                                               25 | Natividad del Señor           |
| holiday-fixed      |                                      12 |                                                6 | Día de la Constitución        |
| holiday-fixed      |                                      12 |                                                8 | Inmaculada Concepción         |


Thanks to the following declaration, the above holidays show up in my computer's Org Agenda view  (though not in orgzly) Basically you tell agenda to display events from calendar diary:

(Tip from https://emacs.stackexchange.com/questions/10965/easiest-way-to-customize-holidays-that-appear-in-org-agenda.)

#+BEGIN_SRC emacs-lisp :tangle yes
'(org-agenda-include-diary t) 
#+END_SRC

#+RESULTS:
| org-agenda-include-diary | t |


*** Make calendar start on Monday instead of Sunday

#+BEGIN_SRC emacs-lisp :tangle yes
(setq calendar-week-start-day 1)
#+END_SRC

#+RESULTS:
: 1

** Refiling

From Caolan at https://caolan.org/dotfiles/emacs.html#orgd96aeb0. 
Provide refile targets as paths, so a level 3 headline will be available as level1/level2/level3. Offer completions in hierarchical steps.

Targets. (Nota que solo con =maxlevel= I get the refiling to someday's second level---two stars---to work).

Explanation: 

Take for example =("/home/dgm/Dropbox/gtd/tickler.org" :level . 2)=. This gave lots of low level headings but not the overall =tickler= heading. So if I wanted to refile something to this upper-level heading I could not. 

When I changed this to =("/home/dgm/Dropbox/gtd/tickler.org" :maxlevel . 2)= I got it working for low-level headings and for the upper-level heading =tickler=.s

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-refile-targets '(("/home/dgm/Dropbox/gtd/gtd.org" :maxlevel . 3)
                           ("/media/dgm/blue/documents/proyectos/mtj/mtj_gtd.org" :level . 2)
                           ("/media/dgm/blue/documents/proyectos/laBussola/laBussola_gtd.org" :level . 2)
                           ("/media/dgm/blue/documents/proyectos/iat_methods/iat_methods.org" :level . 2)
                           ("/home/dgm/Dropbox/gtd/someday.org" :maxlevel . 2)                    
                           ("/home/dgm/Dropbox/gtd/inbox.org" :level . 2)
                           ("/home/dgm/Dropbox/gtd/notes.org" :maxlevel . 2)
                           ("/home/dgm/Dropbox/gtd/tickler.org" :maxlevel . 2)))
#+END_SRC

#+RESULTS:
: ((/home/dgm/Dropbox/gtd/gtd.org :maxlevel . 3) (/media/dgm/blue/documents/proyectos/mtj/mtj_gtd.org :level . 2) (/media/dgm/blue/documents/proyectos/laBussola/laBussola_gtd.org :level . 2) (/media/dgm/blue/documents/proyectos/iat_methods/iat_methods.org :level . 2) (/home/dgm/Dropbox/gtd/someday.org :maxlevel . 2) (/home/dgm/Dropbox/gtd/inbox.org :level . 2) (/home/dgm/Dropbox/gtd/notes.org :maxlevel . 2) (/home/dgm/Dropbox/gtd/tickler.org :maxlevel . 2))

New from https://www.reddit.com/r/emacs/comments/4366f9/how_do_orgrefiletargets_work/

#+BEGIN_SRC emacs-lisp :tangle no
(setq org-refile-targets '((nil :maxlevel . 9)
                           (org-agenda-files :maxlevel . 9)))
#+END_SRC

#+RESULTS:
: ((nil :maxlevel . 9) (org-agenda-files :maxlevel . 9))

This first element of org-refile-targets decides the heading levels to consider within current file, the second element - within other agenda files. (https://stackoverflow.com/questions/22200312/refile-from-one-file-to-other)

Create any missing parent nodes during refile (after asking for confirmation). (From Caolan at  https://caolan.org/dotfiles/emacs.html#orgd96aeb0.)

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

#+RESULTS:
: confirm

The last two variables are useful because I'm using helm. Instead of having to step through the headings Foo, Bar, and Go to the the Store, I just get a giant list of targets in the form Foo/Bar/Go to the Store. Makes it super easy to jump to whatever I'm looking for.
From: https://www.reddit.com/r/emacs/comments/4366f9/how_do_orgrefiletargets_work/

Also, https://emacs.stackexchange.com/questions/32617/how-to-jump-directly-to-an-org-headline
notes that 
"Users of completion packages like ido/ivy/helm will probably want to change the following setting in order to see the whole target path at once:"

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-refile-use-outline-path t)          ;; show full paths to refiling
(setq org-outline-path-complete-in-steps nil) ;; Change to nil to refile in a single go.
#+END_SRC

#+RESULTS:


** Ambrevar's agenda stuff

#+BEGIN_SRC emacs-lisp :tangle yes
(autoload 'ambrevar/org-switch-agenda-file "org")
(autoload 'ambrevar/org-switch-agenda-file-other-window "org")
#+END_SRC

#+RESULTS:
: ambrevar/org-switch-agenda-file-other-window

* Ido =Imenu='s depth of search

Depth of search for =Imenu= in Org buffers. From https://www.reddit.com/r/emacs/comments/8v6fny/how_to_change_the_depth_of_imenulist_for_org_files/

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-imenu-depth 5)
#+END_SRC

#+RESULTS:
: 5

* Initial visibility 
I want to see properties by default but this is of no help. I'm using =s-h= for visible mode.

#+BEGIN_SRC emacs-lisp :tangle yes
;;(setq org-startup-folded 'showeverything)
;;(setq org-inhibit-startup-visibility-stuff t)
;;(setq org-save-outline-visibility t)
#+END_SRC

#+RESULTS:
: t

* Inserting graphical ouptut
- Tip from Erik Riverson's blog on org-mode and R for inserting images generated in code blocks inline in our Emacs buffer.

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)   
(add-hook 'org-mode-hook 'org-display-inline-images)   
#+END_SRC

#+RESULTS:
| org-display-inline-images | (lambda nil (highlight-symbol-mode)) | org-table-stripes-enable | org-mode-reftex-setup | org-ref-org-menu | (lambda nil (org-bullets-mode)) | turn-off-auto-fill | ambrevar/turn-off-indent-tabs | ambrevar/turn-off-linum | (lambda nil (visual-line-mode 1)) | org-indent-mode | (lambda nil (set-face-attribute 'org-level-1 nil :height 1.5) (set-face-attribute 'org-level-2 nil :height 1.2) (set-face-attribute 'org-level-3 nil :height 1.1) (set-face-attribute 'org-level-4 nil :height 1.1) (set-face-attribute 'org-level-5 nil :height 1.1)) | (lambda nil (local-set-key \216 'outline-next-visible-heading) (local-set-key \220 'outline-previous-visible-heading) (local-set-key \225 'outline-up-heading) (local-set-key \227 'org-table-copy-region) (local-set-key \231 'org-table-paste-rectangle) (local-set-key \214 'org-table-sort-lines) (local-set-key \311 'org-toggle-iimage-in-org)) | (lambda nil (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)) | pandoc-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

* Font-lock

#+BEGIN_SRC emacs-lisp :tangle yes
(setq font-lock-maximum-decoration        
      '((org-mode . 1)))
#+END_SRC

#+RESULTS:
: ((org-mode . 1))

** Strike through DONE headlines

From Sacha's dotfiles: I wanted a quick way to visually distinguish DONE tasks from tasks I still need to do. This handy snippet from the Emacs Org-mode mailing list does the trick by striking through the headlines for DONE tasks. 

DGM: lo he probado pero no me convence.
Alternative for =org-done=: "PaleGreen"

#+BEGIN_SRC emacs-lisp :tangle no
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (:foreground "#66aa9baa32aa"
                             :weight normal
                             :strike-through t))))
 '(org-headline-done
   ((((class color) (min-colors 16) (background dark))
     (:foreground "LightSalmon" :strike-through t)))))
#+END_SRC

#+RESULTS:

* Idle timer

This snippet is from John Wiegley - http://lists.gnu.org/archive/html/emacs-orgmode/2010-03/msg00367.html by way of Sacha Chua. It shows the org agenda when Emacs is idle. 

Thanks to winner-mode, I can get back to my previous buffers with C-c left. 

#+BEGIN_SRC emacs-lisp :tangle no
(defun jump-to-org-agenda ()
  (interactive)
  (let ((buf (get-buffer "*Org Agenda*"))
        wind)
    (if buf
        (if (setq wind (get-buffer-window buf))
            (select-window wind)
          (if (called-interactively-p 'any)
              (progn
                (select-window (display-buffer buf t t))
                (org-fit-window-to-buffer)
                ;; (org-agenda-redo)
                )
            (with-selected-window (display-buffer buf)
              (org-fit-window-to-buffer)
              ;; (org-agenda-redo)
              )))
      (call-interactively 'org-agenda-list)))
  ;;(let ((buf (get-buffer "*Calendar*")))
  ;;  (unless (get-buffer-window buf)
  ;;    (org-agenda-goto-calendar)))
  )

(run-with-idle-timer 300 t 'jump-to-org-agenda)
#+END_SRC

* Sacha Chua config

I use the clock a lot.

#+BEGIN_SRC emacs-lisp :tangle no
(with-eval-after-load 'org-agenda
  (bind-key "i" 'org-agenda-clock-in org-agenda-mode-map))
#+END_SRC

#+RESULTS:
*** Speed commands

These are great for quickly acting on tasks. 

DGM: but they're not working for me.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-use-effective-time t)

(defun my/org-use-speed-commands-for-headings-and-lists ()
  "Activate speed commands on list items too."
  (or (and (looking-at org-outline-regexp) (looking-back "^\**"))
      (save-excursion (and (looking-at (org-item-re)) (looking-back "^[ \t]*")))))
(setq org-use-speed-commands 'my/org-use-speed-commands-for-headings-and-lists)

(with-eval-after-load 'org
  (add-to-list 'org-speed-commands-user '("x" org-todo "DONE"))
  (add-to-list 'org-speed-commands-user '("y" org-todo-yesterday "DONE"))
  (add-to-list 'org-speed-commands-user '("!" my/org-clock-in-and-track))
  (add-to-list 'org-speed-commands-user '("s" call-interactively 'org-schedule))
  (add-to-list 'org-speed-commands-user '("d" my/org-move-line-to-destination))
  (add-to-list 'org-speed-commands-user '("i" call-interactively 'org-clock-in))
  ;;   (add-to-list 'org-speed-commands-user '("P" call-interactively 'org2blog/wp-post-subtree))
  (add-to-list 'org-speed-commands-user '("o" call-interactively 'org-clock-out))
  (add-to-list 'org-speed-commands-user '("$" call-interactively 'org-archive-subtree))
  (bind-key "!" 'my/org-clock-in-and-track org-agenda-mode-map))
#+END_SRC

#+RESULTS:
: my/org-clock-in-and-track

*** Navigation

From http://stackoverflow.com/questions/15011703/is-there-an-emacs-org-mode-command-to-jump-to-an-org-heading

DGM 28 march changes first line following 
https://emacs.stackexchange.com/questions/32617/how-to-jump-directly-to-an-org-headline

Note that
"Setting org-goto-interface to one of the two recognised values does not mean sacrificing the alternative interface. Calling org-goto with a prefix argument (i.e. C-u C-c C-j or C-u M-x org-goto RET) automatically selects the alternative interface for the current completion. This way, you can set org-goto-interface to the interface you are likely to use most often and use the prefix argument when you wish to temporarily switch behaviour. If even this does not suit your needs, you can always write your own wrapper around org-goto, as per Att Righ's example."

See 
https://irreal.org/blog/?p=4170
for another presentation of =org-goto=.

#+begin_src emacs-lisp  :tangle yes
;;  (setq org-goto-interface 'outline
(setq org-goto-interface 'outline-path-completion
      org-goto-max-level 10)
(require 'imenu)
(setq org-startup-folded nil)
(bind-key "C-c j" 'org-clock-goto) ;; jump to current task from anywhere
(bind-key "C-c C-w" 'org-refile)
(setq org-cycle-include-plain-lists 'integrate)
#+end_src

#+RESULTS:
: integrate

*** Link Org subtrees and navigate between them
The following code makes it easier for me to link trees with entries, as in http://sachachua.com/evil-plans

#+begin_src emacs-lisp  :tangle yes
(defun my/org-follow-entry-link ()
  "Follow the defined link for this entry."
  (interactive)
  (if (org-entry-get (point) "LINK")
      (org-open-link-from-string (org-entry-get (point) "LINK"))
    (org-open-at-point)))

(defun my/org-link-projects (location)
  "Add link properties between the current subtree and the one specified by LOCATION."
  (interactive
   (list (let ((org-refile-use-cache nil))
           (org-refile-get-location "Location"))))
  (let ((link1 (org-store-link nil)) link2)
    (save-window-excursion
      (org-refile 4 nil location)
      (setq link2 (org-store-link nil))
      (org-set-property "LINK" link1))
    (org-set-property "LINK" link2)))
#+end_src

*** Viewing, navigating, and editing the Org tree

I often cut and paste subtrees. This makes it easier to cut something and paste it elsewhere in the hierarchy.

#+begin_src emacs-lisp  :tangle yes
(with-eval-after-load 'org
  (bind-key "C-c k" 'org-cut-subtree org-mode-map)
  (setq org-yank-adjusted-subtrees t))
#+end_src

#+RESULTS:
: t

*** Date trees

This quickly adds a same-level heading for the succeeding day.

#+begin_src emacs-lisp  :tangle yes
(defun my/org-insert-heading-for-next-day ()
  "Insert a same-level heading for the following day."
  (interactive)
  (let ((new-date
		 (seconds-to-time
		  (+ 86400.0
			 (float-time
			  (org-read-date nil 'to-time (elt (org-heading-components) 4)))))))
	(org-insert-heading-after-current)
	(insert (format-time-string "%Y-%m-%d\n\n" new-date))))
#+end_src

*** Allow refiling in the middle(ish) of a capture

This lets me use =C-c C-r= to refile a capture and then jump to the
new location. I wanted to be able to file tasks under projects so that
they could inherit the QUANTIFIED property that I use to track time
(and any Beeminder-related properties too), but I also wanted to be
able to clock in on them.

#+begin_src emacs-lisp :tangle yes
(defun my/org-refile-and-jump ()
  (interactive)
  (if (derived-mode-p 'org-capture-mode)
      (org-capture-refile)
    (call-interactively 'org-refile))
  (org-refile-goto-last-stored))
(eval-after-load 'org-capture
  '(bind-key "C-c C-r" 'my/org-refile-and-jump org-capture-mode-map))
#+end_src

#+RESULTS:
: my/org-refile-and-jump

*** Refiling

=org-refile= lets you organize notes by typing in the headline to file them under.

#+begin_src emacs-lisp :tangle yes
(setq org-reverse-note-order t)
;; (setq org-refile-use-outline-path nil) ;; set to t above
;; (setq org-refile-allow-creating-parent-nodes 'confirm)
;; (setq org-refile-use-cache nil)
;; (setq org-refile-targets '((org-agenda-files . (:maxlevel . 3)))) ;; check if this is more efficient than my current code
(setq org-blank-before-new-entry nil)
#+end_src

*** Estimating WPM

I'm curious about how fast I type some things.

#+begin_src emacs-lisp :tangle yes
(require 'org-clock)
(defun my/org-entry-wpm ()
  (interactive)
  (save-restriction
    (save-excursion
      (org-narrow-to-subtree)
      (goto-char (point-min))
      (let* ((words (count-words-region (point-min) (point-max)))
	         (minutes (org-clock-sum-current-item))
	         (wpm (/ words minutes)))
	    (message "WPM: %d (words: %d, minutes: %d)" wpm words minutes)
	    (kill-new (number-to-string wpm))))))
#+end_src


#+RESULTS:
: my/org-entry-wpm

*** Time

#+begin_src emacs-lisp :tangle yes
(setq org-log-done 'time)
#+end_src

*** Projects

Projects are headings with the =:project:= tag, so we generally don't
want that tag inherited, except when we display unscheduled tasks that
don't belong to any projects.

#+begin_src emacs-lisp :tangle yes
(setq org-tags-exclude-from-inheritance '("project"))
#+end_src

This code makes it easy for me to focus on one project and its tasks.

#+begin_src emacs-lisp :tangle yes
(add-to-list 'org-speed-commands-user '("N" org-narrow-to-subtree))
(add-to-list 'org-speed-commands-user '("W" widen))

(defun my/org-agenda-for-subtree ()
  (interactive)
  (when (derived-mode-p 'org-agenda-mode) (org-agenda-switch-to))
  (my/org-with-current-task
   (let ((org-agenda-view-columns-initially t))
     (org-agenda nil "t" 'subtree))))
(add-to-list 'org-speed-commands-user '("T" my/org-agenda-for-subtree))
#+end_src

There's probably a proper way to do this, maybe with =<=. Oh, that would work nicely. =< C-c a t= too.

And sorting:

#+begin_src emacs-lisp :tangle yes
(add-to-list 'org-speed-commands-user '("S" call-interactively 'org-sort))
#+end_src

*** Track time

#+begin_src emacs-lisp :tangle yes
(use-package org
  :init
  (progn
    (setq org-expiry-inactive-timestamps t)
    (setq org-clock-idle-time nil)
    (setq org-log-done 'time)
    (setq org-clock-continuously nil)
    (setq org-clock-persist t)
    (setq org-clock-in-switch-to-state "STARTED")
    (setq org-clock-in-resume nil)
    (setq org-show-notification-handler 'message)
    (setq org-clock-report-include-clocking-task t))
  :config
  (org-clock-persistence-insinuate))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23591 51264 374669 726000) :init (23591 51264 374630 666000) :config (23591 51264 373428 839000) :config-secs (0 0 2560 615000) :init-secs (0 0 4380 447000) :use-package-secs (0 0 4592 236000)))

Too many clock entries clutter up a heading.

#+begin_src emacs-lisp :tangle yes
(setq org-log-into-drawer "LOGBOOK")
(setq org-clock-into-drawer 1)
#+end_src

#+RESULTS:
: 1

*** Modules
Org has a whole bunch of optional modules. These are the ones I'm
currently experimenting with.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-modules '(;;org-bbdb
                    ;;org-gnus
                    org-drill
                    ;;org-info
                    ;;org-jsinfo
                    ;;org-irc
                    ;;org-mouse
                    org-protocol
                    org-eww
                    ;;org-annotate-file
                    ;;org-eval
                    ;;org-expiry
                    ;;org-interactive-query
                    ;;org-man
                    ;;org-collector
                    ;;org-panel
                    ;;org-screen
                    ;;org-toc
                    org-habit))
(eval-after-load 'org
  '(org-load-modules-maybe t))
#+END_SRC

#+RESULTS:
: t

On the other hand, https://www.youtube.com/watch?v=wwW_1BQKGZ0 recommends using =use-package= for =org-drill= but if I try to download it, it doesn't exist!

#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-drill
  :ensure t)
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23740 30446 277086 757000) :init (23740 30446 277078 344000) :config (23740 30446 276902 462000) :config-secs (0 0 65 157000) :init-secs (0 0 497 24000) :use-package-secs (0 4 248697 983000)))

**** Org-drill customization

Enable random "noise" for item itervals.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-drill-add-random-noise-to-intervals-p t)
#+END_SRC

#+RESULTS:
: t

*** Habits

I like using org-habits to track consistency. My task names tend
to be a bit long, though, so I've configured the graph column to
show a little bit more to the right.

#+begin_src emacs-lisp :tangle yes
(setq org-habit-graph-column 80)
(setq org-habit-show-habits-only-for-today nil)
#+end_src

If you want to use habits, be sure to schedule your tasks and add a STYLE property with the value of =habit= to the tasks you want displayed.

*** Modifying org agenda so that I can display a subset of tasks

I want to create an agenda command that displays a list of tasks by
context. That way, I can quickly preview a bunch of contexts and
decide what I feel like doing the most.

#+begin_src emacs-lisp :tangle yes
(defvar my/org-agenda-limit-items nil "Number of items to show in agenda to-do views; nil if unlimited.")
(eval-after-load 'org
  '(defadvice org-agenda-finalize-entries (around sacha activate)
     (if my/org-agenda-limit-items
         (progn
           (setq list (mapcar 'org-agenda-highlight-todo list))
           (setq ad-return-value
                 (subseq list 0 my/org-agenda-limit-items))
           (when org-agenda-before-sorting-filter-function
             (setq list (delq nil (mapcar org-agenda-before-sorting-filter-function list))))
           (setq ad-return-value
                 (mapconcat 'identity
                            (delq nil
                                  (subseq
                                   (sort list 'org-entries-lessp)
                                   0
                                   my/org-agenda-limit-items))
                            "\n")))
       ad-do-it)))
#+end_src

*** Task dependencies

#+begin_src emacs-lisp :tangle yes
;; (setq org-enforce-todo-dependencies t)
(setq org-track-ordered-property-with-tag t)
(setq org-agenda-dim-blocked-tasks t)
#+end_src

*** Structure templates

Org makes it easy to insert blocks by typing =<s[TAB]=, etc. I hardly ever use LaTeX, but I insert a lot of Emacs Lisp blocks, so I redefine =<l= to insert a Lisp block instead. 

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-structure-template-alist
      '(("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
        ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
        ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
        ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
        ("c" "#+BEGIN_COMMENT\n?\n#+END_COMMENT")
        ("p" "#+BEGIN_PRACTICE\n?\n#+END_PRACTICE")
        ("l" "#+begin_src emacs-lisp\n?\n#+end_src" "<src lang=\"emacs-lisp\">\n?\n</src>")
        ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
        ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
        ("H" "#+html: " "<literal style=\"html\">?</literal>")
        ("a" "#+begin_ascii\n?\n#+end_ascii")
        ("A" "#+ascii: ")
        ("i" "#+index: ?" "#+index: ?")
        ("I" "#+include %file ?" "<include file=%file markup=\"?\">")))
#+END_SRC

*** Great for quickly going through the to-do list. Gets rid of one extra keystroke. ;) 

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my/org-agenda-done (&optional arg)
  "Mark current TODO as done.
This changes the line at point, all other lines in the agenda referring to
the same tree node, and the headline of the tree node in the Org-mode file."
  (interactive "P")
  (org-agenda-todo "DONE"))
;; Override the key definition for org-exit
(define-key org-agenda-mode-map "x" 'my/org-agenda-done)
#+END_SRC

#+RESULTS:
: my/org-agenda-done

*** Make it easy to mark a task as done and create a follow-up task

#+begin_src emacs-lisp :tangle yes
(defun my/org-agenda-mark-done-and-add-followup ()
  "Mark the current TODO as done and add another task after it.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings."
  (interactive)
  (org-agenda-todo "DONE")
  (org-agenda-switch-to)
  (org-capture 0 "t"))
;; Override the key definition
(define-key org-agenda-mode-map "X" 'my/org-agenda-mark-done-and-add-followup)
#+end_src

#+RESULTS:
: my/org-agenda-mark-done-and-add-followup

*** Capture something based on the agenda

#+begin_src emacs-lisp :tangle yes
(defun my/org-agenda-new ()
  "Create a new note or task at the current agenda item.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings."
  (interactive)
  (org-agenda-switch-to)
  (org-capture 0))
;; New key assignment
;;;;; (define-key org-agenda-mode-map "N" 'my/org-agenda-new)
#+end_src

*** Preventing things from falling through the cracks

This helps me keep track of unscheduled tasks, because I sometimes
forget to assign tasks a date. I also want to keep track of stuck projects.

#+begin_src emacs-lisp :tangle yes
(defun my/org-agenda-list-unscheduled (&rest ignore)
  "Create agenda view for tasks that are unscheduled and not done."
  (let* ((org-agenda-todo-ignore-with-date t)
	     (org-agenda-overriding-header "List of unscheduled tasks: "))
    (org-agenda-get-todos)))
(setq org-stuck-projects
      '("+PROJECT-MAYBE-DONE"
        ("TODO")
        nil
        "\\<IGNORE\\>"))
#+end_src

*** Projects

#+begin_src emacs-lisp :tangle yes
(defun my/org-show-active-projects ()
  "Show my current projects."
  (interactive)
  (org-tags-view nil "project-inactive-someday"))
#+end_src

*** Quickly refiling Org Mode notes to headings in the same file

I wanted a quick way to organize random notes from my inbox into an
outline, organizing from the bottom up instead of starting with a
top-down hierarchy. My old code for refiling to an Org heading in the
current buffer didn't work any more, but =helm-org-in-buffer-headings=
seems to be promising. I made it a speed command (see the value of
=org-use-speed-commands= elsewhere in my config) so that I can easily
refile. 

#+begin_src emacs-lisp :tangle yes
(defvar my/org-last-refile-marker nil "Marker for last refile")
(defun my/org-refile-in-file (&optional prefix)
  "Refile to a target within the current file."
  (interactive)
  (let ((helm-org-headings-actions
         '(("Refile to this heading" . helm-org-heading-refile))))
    (save-excursion
      (helm-org-in-buffer-headings)
      (org-end-of-subtree t)
      (setq my/org-last-refile-marker (point-marker)))))

(defun my/org-refile-to-previous ()
  "Refile subtree to last position from `my/org-refile-in-file'."
  (interactive)
  (save-selected-window
    (when (eq major-mode 'org-agenda-mode)
      (org-agenda-switch-to))
    (org-cut-subtree)
    (save-excursion
      (let* ((marker my/org-last-refile-marker)
             (target-level
              (with-current-buffer (marker-buffer marker)
                (goto-char (marker-position marker))
                (org-current-level))))
        (helm-org-goto-marker marker)
        (org-end-of-subtree t t)
        (org-paste-subtree target-level)))))

(add-to-list 'org-speed-commands-user '("w" call-interactively 'my/org-refile-in-file))
(add-to-list 'org-speed-commands-user '("." call-interactively 'my/org-refile-to-previous))
#+end_src

TODO: Figure out why I'm getting duplicates. Next step might be to fiddle with =helm-org-in-buffer-headings= so that it preselects the previous candidate, but that can happen later.

Tech note: helm-org doesn't use the usual org-refile mechanism. Instead, it
cuts the subtree, goes to the marker, and pastes it in at the
appropriate level.

*** Inserting code

#+begin_src emacs-lisp  :eval no :tangle yes
(defun my/org-insert-defun (function)
  "Inserts an Org source block with the definition for FUNCTION."
  (interactive (find-function-read))
  (let* ((buffer-point (condition-case nil (find-definition-noselect function nil) (error nil)))
         (new-buf (car buffer-point))
         (new-point (cdr buffer-point))
         definition)
    (if buffer-point        
        (with-current-buffer new-buf ;; Try to get original definition
          (save-excursion
            (goto-char new-point)
            (setq definition (buffer-substring-no-properties (point) (save-excursion (end-of-defun) (point))))))
      ;; Fallback: Print function definition
      (setq definition (concat (prin1-to-string (symbol-function function)) "\n")))
    (insert "#+begin_src emacs-lisp :tangle yes\n" definition "#+end_src\n")))
#+end_src

*** Counting

Good way to remind myself that I have lots of STARTED tasks.

#+begin_src emacs-lisp :tangle yes
(defun my/org-summarize-task-status ()
  "Count number of tasks by status.
Probably should make this a dblock someday."
  (interactive)
  (let (result)
    (org-map-entries
     (lambda ()
       (let ((todo (elt (org-heading-components) 2)))
         (if todo
             (if (assoc todo result)
                 (setcdr (assoc todo result)
                         (1+ (cdr (assoc todo result))))
               (setq result (cons (cons todo 1) result)))))))
    (message "%s" (mapconcat (lambda (x) (format "%s: %d" (car x) (cdr x)))
                             result "\n"))))
#+end_src

*** Spreadsheets
#+begin_src emacs-lisp :tangle yes
(defun my/org-days-between (start end)
  "Number of days between START and END (exclusive).
  This includes START but not END."
  (- (calendar-absolute-from-gregorian (org-date-to-gregorian end))
     (calendar-absolute-from-gregorian (org-date-to-gregorian start))))
#+end_src

*** Autosave

Could be handy, especially when synchronizing with Orgzly. From
https://www.reddit.com/r/orgmode/comments/7ke3hv/orgzly_best_practice/ 

#+BEGIN_SRC emacs-lisp :tangle yes
(run-with-idle-timer 30 t 'org-save-all-org-buffers)
#+END_SRC

*** Org agenda
**** Basic configuration
:PROPERTIES:
:CUSTOM_ID: project_subtasks
:END:
I have quite a few Org files, but I keep my agenda items and TODOs in
only a few of them for faster scanning.

I like looking at two days at a time when I plan using the Org
agenda. I want to see my log entries, but I don't want to see
scheduled items that I've finished. I like seeing a time grid so that
I can get a sense of how appointments are spread out.

#+begin_src emacs-lisp :tangle yes
;;  (setq org-agenda-span 2)
(setq org-agenda-tags-column -100) ; take advantage of the screen width
(setq org-agenda-sticky nil)
(setq org-agenda-inhibit-startup t)
(setq org-agenda-use-tag-inheritance t)
(setq org-agenda-show-log t)
;;  (setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
;;  (setq org-agenda-time-grid
;;        '((daily today require-timed)
;;         "----------------"
;;         (800 1000 1200 1400 1600 1800)))
;; (setq org-columns-default-format "%14SCHEDULED %Effort{:} %1PRIORITY %TODO %50ITEM %TAGS") ;; I don't have some of these
#+end_src

#+RESULTS:
: pre-scheduled

*** Display projects with associated subtasks
:PROPERTIES:
:CUSTOM_ID: agenda_commands
:END:

I wanted a view that showed projects with a few subtasks underneath
them. Here's a sample of the output:

#+begin_example
Headlines with TAGS match: +PROJECT
Press `C-u r' to search again with new search string
  organizer:  Set up communication processes for Awesome Foundation Toronto
  organizer:  TODO Announce the next pitch night
  organizer:  TODO Follow up with the winner of the previous pitch night for any news to include in the updates

  organizer:  Tidy up the house so that I can find things quickly
  organizer:  TODO Inventory all the things in closets and boxes         :@home:
  organizer:  TODO Drop things off for donation                       :@errands:

  organizer:  Learn how to develop for Android devices
#+end_example

#+begin_src emacs-lisp :tangle yes
(defun my/org-agenda-project-agenda ()
  "Return the project headline and up to `my/org-agenda-limit-items' tasks."
  (save-excursion
    (let* ((marker (org-agenda-new-marker))
           (heading
            (org-agenda-format-item "" (org-get-heading) (org-get-category) nil))
           (org-agenda-restrict t)
           (org-agenda-restrict-begin (point))
           (org-agenda-restrict-end (org-end-of-subtree 'invisible))
           ;; Find the TODO items in this subtree
           (list (org-agenda-get-day-entries (buffer-file-name) (calendar-current-date) :todo)))
      (org-add-props heading
          (list 'face 'defaults
                'done-face 'org-agenda-done
                'undone-face 'default
                'mouse-face 'highlight
                'org-not-done-regexp org-not-done-regexp
                'org-todo-regexp org-todo-regexp
                'org-complex-heading-regexp org-complex-heading-regexp
                'help-echo
                (format "mouse-2 or RET jump to org file %s"
                        (abbreviate-file-name
                         (or (buffer-file-name (buffer-base-buffer))
                             (buffer-name (buffer-base-buffer))))))
        'org-marker marker
        'org-hd-marker marker
        'org-category (org-get-category)
        'type "tagsmatch")
      (concat heading "\n"
              (org-agenda-finalize-entries list)))))

(defun my/org-agenda-projects-and-tasks (match)
  "Show TODOs for all `org-agenda-files' headlines matching MATCH."
  (interactive "MString: ")
  (let ((todo-only nil))
    (if org-agenda-overriding-arguments
        (setq todo-only (car org-agenda-overriding-arguments)
              match (nth 1 org-agenda-overriding-arguments)))
    (let* ((org-tags-match-list-sublevels
            org-tags-match-list-sublevels)
           (completion-ignore-case t)
           rtn rtnall files file pos matcher
           buffer)
      (when (and (stringp match) (not (string-match "\\S-" match)))
        (setq match nil))
      (when match
        (setq matcher (org-make-tags-matcher match)
              match (car matcher) matcher (cdr matcher)))
      (catch 'exit
        (if org-agenda-sticky
            (setq org-agenda-buffer-name
                  (if (stringp match)
                      (format "*Org Agenda(%s:%s)*"
                              (or org-keys (or (and todo-only "M") "m")) match)
                    (format "*Org Agenda(%s)*" (or (and todo-only "M") "m")))))
        (org-agenda-prepare (concat "TAGS " match))
        (org-compile-prefix-format 'tags)
        (org-set-sorting-strategy 'tags)
        (setq org-agenda-query-string match)
        (setq org-agenda-redo-command
              (list 'org-tags-view `(quote ,todo-only)
                    (list 'if 'current-prefix-arg nil `(quote ,org-agenda-query-string))))
        (setq files (org-agenda-files nil 'ifmode)
              rtnall nil)
        (while (setq file (pop files))
          (catch 'nextfile
            (org-check-agenda-file file)
            (setq buffer (if (file-exists-p file)
                             (org-get-agenda-file-buffer file)
                           (error "No such file %s" file)))
            (if (not buffer)
                ;; If file does not exist, error message to agenda
                (setq rtn (list
                           (format "ORG-AGENDA-ERROR: No such org-file %s" file))
                      rtnall (append rtnall rtn))
              (with-current-buffer buffer
                (unless (derived-mode-p 'org-mode)
                  (error "Agenda file %s is not in `org-mode'" file))
                (save-excursion
                  (save-restriction
                    (if org-agenda-restrict
                        (narrow-to-region org-agenda-restrict-begin
                                          org-agenda-restrict-end)
                      (widen))
                    (setq rtn (org-scan-tags 'my/org-agenda-project-agenda matcher todo-only))
                    (setq rtnall (append rtnall rtn))))))))
        (if org-agenda-overriding-header
            (insert (org-add-props (copy-sequence org-agenda-overriding-header)
                        nil 'face 'org-agenda-structure) "\n")
          (insert "Headlines with TAGS match: ")
          (add-text-properties (point-min) (1- (point))
                               (list 'face 'org-agenda-structure
                                     'short-heading
                                     (concat "Match: " match)))
          (setq pos (point))
          (insert match "\n")
          (add-text-properties pos (1- (point)) (list 'face 'org-warning))
          (setq pos (point))
          (unless org-agenda-multi
            (insert "Press `C-u r' to search again with new search string\n"))
          (add-text-properties pos (1- (point)) (list 'face 'org-agenda-structure)))
        (org-agenda-mark-header-line (point-min))
        (when rtnall
          (insert (mapconcat 'identity rtnall "\n") ""))
        (goto-char (point-min))
        (or org-agenda-multi (org-agenda-fit-window-to-buffer))
        (add-text-properties (point-min) (point-max)
                             `(org-agenda-type tags
                                               org-last-args (,todo-only ,match)
                                               org-redo-cmd ,org-agenda-redo-command
                                               org-series-cmd ,org-cmd))
        (org-agenda-finalize)
        (setq buffer-read-only t)))))
#+end_src

#+RESULTS:
: my/org-agenda-projects-and-tasks

*** Org agenda custom commands

There are quite a few custom commands here, and I often forget to use
them. =) But it's good to define them, and over time, I'll get the
hang of using these more!

| Key         | Description                                                                                    |
| .           | What am I waiting for?                                                                         |
| T           | Not really an agenda command - shows the to-do tree in the current file                        |
| b           | Shows business-related tasks                                                                   |
| o           | Shows personal tasks and miscellaneous tasks (o: organizer)                                    |
| w           | Show all tasks for the upcoming week                                                           |
| W           | Show all tasks for the upcoming week, aside from the routine ones                              |
| g ...       | Show tasks by context: b - business; c - coding; w - writing; p - phone; d - drawing, h - home |
| 0           | Show common contexts with up to 3 tasks each, so that I can choose what I feel like working on |
| ) (shift-0) | Show common contexts with all the tasks associated with them                                   |
| 9           | Show common contexts with up to 3 unscheduled tasks each                                       |
| ( (shift-9) | Show common contexts with all the unscheduled tasks associated with them                       |
| d           | Timeline for today (agenda, clock summary)                                                     |
| u           | Unscheduled tasks to do if I have free time                                                    |
| U           | Unscheduled tasks that are not part of projects                                                |
| P           | Tasks by priority                                                                              |
| p           | My projects                                                                                    |
| 2           | Projects with tasks                                                                            |

*** Archiving
    
From http://stackoverflow.com/questions/6997387/how-to-archive-all-the-done-tasks-using-a-single-command

#+begin_src emacs-lisp :tangle yes
(defun my/org-archive-done-tasks ()
  "Archive finished or cancelled tasks."
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   "TODO=\"DONE\"|TODO=\"CANCELED\"" (if (org-before-first-heading-p) 'file 'tree)))
#+end_src

Also, don't ask me for confirmation:

#+begin_src emacs-lisp :tangle yes
(add-to-list 'org-speed-commands-user '("a" call-interactively 'org-archive-subtree-default))
#+end_src

*** Self-tracking, statistics, and other data transformations
**** Quantified Awesome
:PROPERTIES:
:CUSTOM_ID: clock-in
:END:
<<clock-in>>

#+begin_src emacs-lisp :tangle yes
(defmacro my/org-with-current-task (&rest body)
  "Execute BODY with the point at the subtree of the current task."
  `(if (derived-mode-p 'org-agenda-mode)
       (save-window-excursion
         (org-agenda-switch-to)
         ,@body)
     ,@body))

(defun my/org-clock-in-and-track ()
  "Start the clock running. Clock into Quantified Awesome."
  (interactive)
  (my/org-with-current-task
   (org-clock-in)
   (call-interactively 'my/org-quantified-track)
   (when (org-entry-get (point) "AUTO")
     (org-open-link-from-string (org-entry-get (point) "AUTO")))))
;;;;  (bind-key "!" 'my/org-clock-in-and-track org-agenda-mode-map)

(defmacro my/with-org-task (&rest body)
  "Run BODY within the current agenda task, clocked task, or cursor task."
  `(cond
    ((derived-mode-p 'org-agenda-mode)
     (let* ((marker (org-get-at-bol 'org-marker))
            (buffer (marker-buffer marker))
            (pos (marker-position marker)))
       (with-current-buffer buffer
         (save-excursion
           (save-restriction
             (widen)
             (goto-char pos)
             ,@body)))))
    ((and (derived-mode-p 'org-mode) (org-at-heading-p)) (save-excursion ,@body))
    ((org-clocking-p) (save-excursion (org-clock-goto) ,@body))
    ((derived-mode-p 'org-mode) ,@body)))

(defun my/org-quantified-track (&optional category note)
  "Create a tracking record using CATEGORY and NOTE.
  Default to the current task in the agenda, the currently-clocked
  entry, or the current subtree in Org."
  (interactive (list nil nil))
  (unless (and category note)
    (my/with-org-task
     (setq category (or category
                        (org-entry-get-with-inheritance "QUANTIFIED")))
     (cond
      ((null category)
       (setq category (read-string "Category: "))
       (org-set-property "QUANTIFIED" category))
      ((string= category "ask")
       (setq category (read-string "Category: "))))
     (setq note
           (concat
            (if (string= (or (org-entry-get-with-inheritance "QUANTIFIEDQUIET") "") "t")
                "!private "
              "")
            (or note (elt (org-heading-components) 4) (read-string "Note: "))))))
  (quantified-track (concat category " | " note)))

(defun my/org-quick-clock-in-task (location jump)
  "Track and clock in on the specified task.
  If JUMP is non-nil or the function is called with the prefix argument, jump to that location afterwards."
  (interactive (list (save-excursion (my/org-refile-get-location "Location")) current-prefix-arg))
  (when location
    (if jump
        (progn (org-refile 4 nil location) (my/org-clock-in-and-track))
      (save-window-excursion
        (org-refile 4 nil location)
        (my/org-clock-in-and-track)))))
(bind-key "C-c q" 'my/org-quick-clock-in-task)

(require 'quantified nil t)
#+end_src

**** Compare times and effort estimates
:PROPERTIES:
:CUSTOM_ID: compare-time
:END:
<<compare-time>>

This is for comparing times in column view and in tables.

#+begin_src emacs-lisp :tangle yes
(defun my/compare-times (clocked estimated)
  (if (and (> (length clocked) 0) estimated)
      (format "%.2f"
              (/ (* 1.0 (org-hh:mm-string-to-minutes clocked))
                 (org-hh:mm-string-to-minutes estimated)))
    ""))
#+end_src

Use with =#+COLUMNS: %40ITEM %17Effort(Estimated){:} %CLOCKSUM=, =#+BEGIN: columnview :hlines 1= ... =#+END:=, and

#+begin_src org :tangle yes
,#+TBLFM: $4='(my/compare-times $3 $2)
#+end_src

*** Org - send things to the bottom of the list

Handy for collecting items together.

#+begin_src emacs-lisp :tangle yes
(defun my/org-send-to-bottom-of-list ()
  "Send the current line to the bottom of the list."
  (interactive)
  (beginning-of-line)
  (let ((kill-whole-line t))
    (save-excursion
      (kill-line 1)
      (org-end-of-item-list)
      (yank))))
#+end_src

#+RESULTS:
: my/org-send-to-bottom-of-list

*** List upcoming tasks so that I can see if I'm overloaded

#+begin_src emacs-lisp :tangle yes
(defun my/org-summarize-upcoming-week ()
  "Summarize upcoming tasks as a list."
  (interactive)
  (org-agenda nil "w")
  (let ((string (buffer-string))
        business relationships life)
    (with-temp-buffer
      (insert string)
      (goto-char (point-min))
      (while (re-search-forward my/weekly-review-line-regexp nil t)
        (cond
         ((string= (match-string 1) "routines") nil) ; skip routine tasks
         ((string= (match-string 1) "business")
          (add-to-list 'business (concat "  - [ ] " (match-string 3))))
         ((string= (match-string 1) "people")
          (add-to-list 'relationships (concat "  - [ ] " (match-string 3))))
         (t (add-to-list 'life (concat "  - [ ] " (match-string 3)))))))
    (setq string
          (concat
           "*Plans for next week*\n"
           "- Business\n"
           (mapconcat 'identity business "\n")
           "\n- Relationships\n"
           (mapconcat 'identity relationships "\n")
           "\n- Life\n"
           (mapconcat 'identity life "\n")))
    (if (called-interactively-p 'any)
        (kill-new string)
      string)))
#+end_src

* Org-web-tools

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-web-tools
  :ensure t)
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23755 232 222653 744000) :init (23755 232 222644 807000) :config (23755 232 222456 56000) :config-secs (0 0 4 907000) :init-secs (0 0 10147 497000) :use-package-secs (0 6 598165 48000)))

* Org-wiki

#+begin_src emacs-lisp :tangle yes
(require 'org-wiki)
(setq org-wiki-location "/media/dgm/blue/documents/dropbox/notes/org-wiki")
#+end_src

#+RESULTS:
: /media/dgm/blue/documents/dropbox/notes/org-wiki

* Tuhdo's =org-recipes=

#+begin_src emacs-lisp :tangle yes
(add-to-list 'load-path "/home/dgm/.emacs.d/src/org-recipes")
(require 'org-recipes)
(setq org-recipes-file-list '("/media/dgm/blue/documents/dropbox/notes/org-recipes/recipes.org"))
#+end_src

#+RESULTS:
| /media/dgm/blue/documents/dropbox/notes/org-recipes/recipes.org |

* Provide

#+BEGIN_SRC emacs-lisp :tangle yes
(provide 'starter-kit-org)
#+END_SRC

#+RESULTS:
: starter-kit-org

* Final message
#+source: message-line
#+begin_src emacs-lisp :tangle yes
  (message "Starter Kit Org loaded.")
#+end_src
