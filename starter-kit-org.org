#+TITLE: Starter Kit Org
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Org
Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also implemented using Org-mode and [[http://git-scm.com/][git]].

** Exporter Settings and Helpful Packages
HTML and LaTeX exporters are shown by default. We add the Markdown exporter to the menu.
#+begin_src emacs-lisp

  ;; Autocomplete for orgmode
  ;; (require 'org-ac)
  ;; (org-ac/config-default)

  ;; Markdown exporter
  (require 'ox-md)

  (setq org-completion-use-ido t)
  ;; (require 'org-special-blocks)
  ;; (if window-system (require 'org-mouse))

  ;; Compatibility with WindMove
  ;; Make windmove work in org-mode:
;;  (add-hook 'org-shiftup-final-hook 'windmove-up)
;;  (add-hook 'org-shiftleft-final-hook 'windmove-left)
;;  (add-hook 'org-shiftdown-final-hook 'windmove-down)
;;  (add-hook 'org-shiftright-final-hook 'windmove-right)
  ;; (if window-system (require 'org-mouse))
#+end_src

** Org-Mode Hooks
Make yasnippet work properly with org-mode.

#+begin_src emacs-lisp
;;  (defun yas/org-very-safe-expand ()
;;    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

(defun yas-org-very-safe-expand ()
  (let ((yas-fallback-behavior 'return-nil))
    (and (fboundp 'yas-expand) (yas-expand))))

(add-hook 'org-mode-hook
          (lambda ()
            (add-to-list 'org-tab-first-hook
                         'yas-org-very-safe-expand)
            ))

#+end_src

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\M-\C-n" 'outline-next-visible-heading)
              (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
              (local-set-key "\M-\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-iimage-in-org)
              ;; yasnippet (using the new org-cycle hooks)
              ;;(make-variable-buffer-local 'yas/trigger-key)
              ;;(setq yas/trigger-key [tab])
              ;;(add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
              ;;(define-key yas/keymap [tab] 'yas/next-field)
              ))
#+end_src

** Speed keys
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

See the =org-speed-commands-default= variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to =org-babel-describe-bindings=) will
display a list of the code blocks commands and their related keys.

#+begin_src emacs-lisp
  (setq org-use-speed-commands t)
#+end_src

** Code blocks
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
=org-babel-load-languages= variable, or with an elisp form like the
one below.  The customize interface of =org-babel-load-languages=
contains an up to date list of the currently supported languages.

#+begin_src emacs-lisp
(require 'ess) 
(require 'ob-stata)

  (org-babel-do-load-languages
   'org-babel-load-languages
  '((emacs-lisp . t)
    (sh . t)
    (R . t)
    (perl . t)
    (ruby . t)
    (python . t)
    (js . t)
    (haskell . t)
    (stata . t)
    (shell . t)
    (latex . t)
    ))


;; I am following Ista Zahn here: don't include (stata . t) but do (require 'ob-stata) afterwards. Stil, when I do so, I get the Debugger entered--Lisp error: (void-variable inferior-STA-program-name)
;; eval(inferior-STA-program-name) so the problem comes from =ob-stata=.


#+end_src

#+RESULTS:

The next block makes org-babel aware that a lower-case 'r' in a =src= block header should be processed as R. 

#+source: add-r
#+begin_src emacs-lisp
    (add-to-list 'org-src-lang-modes
                 '("r" . ess-mode))

    (add-to-list 'org-src-lang-modes
                 '("stata" . ess-mode))
#+end_src

#+RESULTS: add-r
: ((stata . ess-mode) (r . ess-mode) (ocaml . tuareg) (elisp . emacs-lisp) (ditaa . artist) (asymptote . asy) (dot . fundamental) (sqlite . sql) (calc . fundamental) (C . c) (cpp . c++) (C++ . c++) (screen . shell-script) (shell . sh) (bash . sh))

** Code block fontification
   :PROPERTIES:
   :CUSTOM_ID: code-block-fontification
   :END:

The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+end_src

Don't ask for confirmation on every =C-c C-c= code-block compile. 

#+source: turn-off-code-block-confirm
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

** Ensure the Latest Org-mode manual is in the info directory
By placing the =doc/= directory in Org-mode at the front of the
=Info-directory-list= we can be sure that the latest version of the
Org-mode manual is available to the =info= command (bound to =C-h i=).
#+begin_src emacs-lisp
  (unless (boundp 'Info-directory-list)
    (setq Info-directory-list Info-default-directory-list))
  (setq Info-directory-list
        (cons (expand-file-name
               "doc"
               (expand-file-name
                "org"
                (expand-file-name "src" dotfiles-dir)))
              Info-directory-list))
#+end_src

** Nice Bulleted Lists
#+name: org-bullets
#+begin_src emacs-lisp :tangle no
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

#+source: message-line
#+begin_src emacs-lisp
  (message "Starter Kit Org loaded.")
#+end_src

** DGM customization

Customizations in: http://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "WAITING(w)"  "|" "DONE(d)" "CANCELED(c)")))
#+END_SRC

#+RESULTS:
| sequence | TODO(t) | NEXT(n) | STARTED(s) | WAITING(w) |   |   | DONE(d) | CANCELED(c) |


Customization in: http://orgmode.org/manual/Capture-templates.html
Organization copied from: https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html


Old code that worked alright but I've changed it to reflect the simpler code in: https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html

  (setq org-capture-templates
        '(("n" "Notes" entry (file+headline "/media/dgm/blue/documents/dropbox/org/notes.org" "Notes")
           "* Added on: %U\nDescription: %i %?\nEntry created from this heading or email: %a")
          ("t" "Todo" entry (file+headline "/media/dgm/blue/documents/dropbox/gtd/inbox.org" "Tasks")
           "* TODO %?\nDescription: %i\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\nEntry added on: %T\nEntry created from this heading or email: %a")
          ("j" "Journal" entry (file+datetree "/media/dgm/blue/documents/dropbox/org/journal.org")
           "* %?\nAdded on: %U\n  %i\n  %a")))

Old code for Tickler for when I didn't know that i could schedule with <C-c C-s>

                                ("T" "Tickler" entry
                                 (file+headline "/media/dgm/blue/documents/dropbox/gtd/tickler.org" "Tickler")
                                 "* %i%? 
                                  \nScheduled: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))
                                  \nDeadline:  %(org-insert-time-stamp (org-read-date nil t \"+0d\")) 
                                  \nEntry added on: %U
                                  \nEntry created from this heading or email: %a")))


#+BEGIN_SRC emacs-lisp

  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "/media/dgm/blue/documents/dropbox/gtd/inbox.org" "Tasks")
                                 "* TODO %i%? \nEntry added on: %U
                                                  \nEntry created from this heading or email: %a")
                                ("T" "Tickler" entry
                                 (file+headline "/media/dgm/blue/documents/dropbox/gtd/tickler.org" "Tickler")
                                 "* %i%? 
                                      \nEntry added on: %U
                                      \nEntry created from this heading or email: %a")
                                ("j" "Journal" entry 
                                 (file+datetree "/media/dgm/blue/documents/dropbox/gtd/journal.org")
                                 "* %?
                                      \n Added on: %U")))

#+END_SRC

#+RESULTS:
| t | Todo [inbox] | entry | (file+headline /media/dgm/blue/documents/dropbox/gtd/inbox.org Tasks) | * TODO %i%? |


tip from https://lists.gnu.org/archive/html/emacs-orgmode/2007-08/msg00253.html
for having agenda show 30 days

#+BEGIN_SRC emacs-lisp 
;; (setq org-agenda-span (quote month))

#+END_SRC

#+RESULTS:


Public holidays in Spain. Tip from: https://www.emacswiki.org/emacs/CalendarLocalization

#+BEGIN_SRC emacs-lisp 

  (setq holiday-other-holidays
        '((holiday-fixed 1 1 "Año Nuevo")
          (holiday-fixed 1 6 "Día de Reyes")
          (holiday-fixed 2 14 "Miércoles de Ceniza")
          (holiday-sexp '(calendar-nth-named-day 1 1 3 year 19) "Día de San José")
          (holiday-easter-etc -7 "Domingo de Ramos")
          (holiday-easter-etc -3 "Jueves Santo")
          (holiday-easter-etc -2 "Viernes Santo")
          (holiday-easter-etc +1 "Lunes de Pascua")
          (holiday-fixed 5 1 "Día Internacional del Trabajo")
          (holiday-fixed 5 2 "Día de la Comunidad de Madrid")
          (holiday-fixed 5 6 "Día de la Madre")
          (holiday-fixed 5 15 "Día de San Isidro")
          (holiday-fixed 5 31 "Corpus Christi (Madrid)")
;;          (holiday-easter-etc +43 "Día de la Ascención")
          (holiday-easter-etc +64 "Corpus Christi")
          (holiday-fixed 10 12 "Día de la Hispanidad")
          (holiday-fixed 11 1  "Todos los santos")
          (holiday-fixed 12 25 "Navidad")
          (holiday-fixed 12 6 "Día de la Constitución")
          (holiday-fixed 12 8 "Inmaculada Concepción")
          ))                                                                                  


  (require 'org-agenda)
  (require 'holidays)
  (setq calendar-holidays holiday-other-holidays)
  (setq org-agenda-include-diary t)



#+END_SRC

#+RESULTS:
: t





*** COMMENT Customizations from Ista Zahn: 
Check "Note taking and outlining (Org-mode)"  https://github.com/izahn/dotemacs

#+begin_src emacs-lisp
(with-eval-after-load "org"
  (setq org-replace-disputed-keys t)
  (setq org-support-shift-select t)
  (setq org-export-babel-evaluate nil)

  ;; (setq org-startup-indented t)
  ;; increase imenu depth to include third level headings

  (setq org-imenu-depth 4)

  ;; Update images from babel code blocks automatically
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

  ;; configure org-mode when opening first org-mode file
  ;; Load additional export formats
  (require 'ox-odt)
;;  (require 'ox-freemind)
  (require 'ox-bibtex)
)
#+end_src



