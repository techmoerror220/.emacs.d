
* Set default engine 
Custom variables kludge. Why can't I get these to work via =setq=?
DGM: Originally this was at the end of =kjhealy.org=.
What if I don't set one by default?

Watch out! If I want to change to latex (instead of xelatex), and I have a =custom.el= file, then I have to get rid of this =custom.el= file

#+BEGIN_SRC emacs-lisp :tangle no
(setq-default TeX-engine (quote default))
;;(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
;; '(LaTeX-XeTeX-command "latex -synctex=1 -shell-escape")
;; '(TeX-engine (quote default))
 ;; '(TeX-view-program-list (quote (("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline %n %o %b"))))
 ;; '(TeX-view-program-selection (quote (((output-dvi style-pstricks) "dvips and gv") (output-dvi "xdvi") (output-pdf "Skim") (output-html "xdg-open"))))
;; '(blink-cursor-mode nil)
;; '(text-mode-hook (quote (text-mode-hook-identify)))
;; )
#+END_SRC

DGM changed from yes to no to try new setting
#+begin_src emacs-lisp :tangle no
;; custom variables kludge. Why can't I get these to work via setq?
  (custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  '(LaTeX-XeTeX-command "xelatex -synctex=1")
  '(TeX-engine (quote xetex))
  ;; '(TeX-view-program-list (quote (("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline %n %o %b"))))
  ;; '(TeX-view-program-selection (quote (((output-dvi style-pstricks) "dvips and gv") (output-dvi "xdvi") (output-pdf "Skim") (output-html "xdg-open"))))
  '(blink-cursor-mode nil)
  '(text-mode-hook (quote (text-mode-hook-identify)))
  )
#+END_SRC

#+RESULTS:
: default

#+RESULTS:
: my-auto-tex-cmd

* COMMENT Passing options to preamble packages in the =texmf= dir
In addition, if you want to pass any options to =hyperref= or =url= (which is loaded
automically by =hyperref=), then you can use a command of the form (notice the escaped
backslash):

#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-default-packages-alist "\\PassOptionsToPackage{hyphens}{url}")
#+END_SRC


* org-export

From: https://orgmode.org/worg/org-tutorials/org-latex-export.html

#+BEGIN_SRC emacs-lisp :tangle yes

(defun org-export-latex-no-toc (depth)
    (when depth
      (format "%% Org-mode is exporting headings to %s levels.\n"
              depth)))

  (setq org-export-latex-format-toc-function 'org-export-latex-no-toc)
#+END_SRC

#+RESULTS:
: org-export-latex-no-toc

* COMMENT My default =sty= file
:PROPERTIES:
:ID:       006444f6-8639-42da-82d0-0f930e4a6d73
:END:
DGM 3 nov 2019:  hey, I've noticed that now I don't have =org-preamble-pdflatex.sty= loaded by default when I export to latex!! Trying to fix it with this:

elisp: Note that when I did ='(("org-preamble-pdflatex" t)))= the =sty= "loaded" was =t.sty=. And if I did ='(("org-preamble-pdflatex")= I got the =nil.sty=... so I don't really know how =setq= works.

DGM, 8 dic 2019: here's why I get =org-preamble-pdflatex.sty= loaded every time I export... but now that I am using =org-tufte= I don't really want this to happen...

Again, this is something to include in the org-skeleton

#+begin_src emacs-lisp :tangle no
(setq org-latex-packages-alist
        '(( "" "org-preamble-pdflatex" nil)))
#+end_src

#+RESULTS:
|   | org-preamble-pdflatex | nil |


* Beamer

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'ox-beamer)
#+END_SRC

#+RESULTS:
: ox-beamer

** COMMENT =listings= with Beamer

#+BEGIN_SRC emacs-lisp :tangle no
(with-eval-after-load 'ox-beamer 
  (add-to-list 'org-latex-packages-alist '("" "listings" nil))
  (setq org-latex-listings t)
  (setq org-latex-listings-options '(("breaklines" "true"))))
  #+END_SRC

  #+RESULTS:
  | breaklines | true |

#+BEGIN_SRC emacs-lisp :tangle no
(with-eval-after-load 'ox-beamer 
  (add-to-list 'org-latex-packages-alist '("" "listings" nil))
  (setq org-latex-listings t)
  (setq org-latex-listings-options '(("breaklines" "true"))))
  #+END_SRC

  #+RESULTS:
  | breaklines | true |

Taken from Sacha Chua's config files. 
Reading https://orgmode.org/worg/exporters/beamer/ox-beamer.html I think as of Orgmode 8.0.3 this setup is not necessary anymore.

Deleted:               "\\documentclass\[presentation\]\{beamer\}"

#+BEGIN_SRC emacs-lisp :tangle no
(with-eval-after-load 'org
  (require 'ox-latex)
  (add-to-list 'org-latex-classes
             '("beamer
               "\\documentclass\[xcolor=x11names,compress\]\{beamer\}"
               "\\mode<presentation> \{"
               "    \\usetheme\{Hannover\}"
               "    \\usecolortheme\{beaver\}" 
               "\}"
               ("\\section\{%s\}" . "\\section*\{%s\}")
               ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
               ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}"))))
#+END_SRC

#+RESULTS:
| beamer  | \documentclass[xcolor=x11names,compress]{beamer}\n | \mode<presentation> {\n | \usetheme{Hannover}\n | \usecolortheme{beaver}\n | }\n | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |
| beamer  | \documentclass[xcolor=x11names,compress]{beamer}   | \mode<presentation> {   | \usetheme{Hannover}   | \usecolortheme{beaver}   | }   | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |
| membook | \documentclass[11pt,oneside]{memoir}               |                         |                       |                          |     |                                |                                      |                                            |

Of course we need to load  =beamer= for it to show up in the menu after =C-c C-e=.

** =pdfLaTeX= Org Export Settings 

    Configure org-mode to export directly to PDF using xelatex, compiling the bibliography as it goes, with my preferred setup in each case. There is a good deal of local stuff in this section. The required style files used below are available at https://github.com/kjhealy/latex-custom-kjh. You may need to adjust or remove some of these settings depending on your preferences and local configuration.

LaTeX compilation command. For orgmode docs we just always use xelatex for convenience. You can change it to pdflatex if you like, just remember to make the adjustments to the packages-alist below.
<<export>>

Also, if I change to latex instead of xelatex, then change tangle option to no or else latex will use xelatex options the compilation will fail. Update: it's enough if I comment out the following heading.

#+BEGIN_SRC emacs-lisp :tangle no
;; (setq org-latex-pdf-process '("latexmk -pdflatex='pdflatex -synctex=1 --shell-escape -bibtex -f' -pdf %f")) ;; with this it doesn't work
;; (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))  ;; this is Kitchin's way
(setq org-latex-pdf-process (list "latexmk -synctex=1 -shell-escape -bibtex -f -pdf %f"))  ;; this is Kitchin's way customized

;; the alternative, if you want a regular pdflatex would be, I think
;; (setq org-latex-pdf-process '("latexmk -pdf %f"))
#+END_SRC

#+RESULTS:
| latexmk -synctex=1 -shell-escape -bibtex -f -pdf %f |

*** Listings vs Minted for Code Higlighting
Originally the package =minted= was not working with /LaTeX/ even though it worked with /XeLaTeX/. I found the solution reading this https://emacs.stackexchange.com/questions/27982/export-code-blocks-in-org-mode-with-minted-environment

Now I've tangled it to "no" because I have created the =sanchez-dgm.sty= where I want to use =listings= and I think this code may interfere with it.

#+BEGIN_SRC emacs-lisp :tangle no

(setq org-latex-listings 'minted
      org-latex-default-packages-alist nil)     
(setq org-latex-packages-alist
        '(("minted" "org-preamble-pdflatex" t)
          ;;("" "graphicx" t)
          ;;("" "longtable" nil)
          ;;("" "float" )
          ))

   #+END_SRC

   #+RESULTS:
   | minted | org-preamble-pdflatex | t |

My new option comes from here: https://emacs.stackexchange.com/questions/33010/how-to-word-wrap-within-code-blocks

A commonly used environment for source code is =lstlisting=, provided by the LaTeX package =listings=. To get Org-mode to use it, add it to =org-latex-packages-alist= and set the variable =org-latex-listings= to =t=:

And to then get listings to wrap, the ~breaklines=true~ option needs to be supplied to listings. Org-mode can do this:

#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-packages-alist '("" "listings" nil))
(setq org-latex-listings t)
(setq org-latex-listings-options '(("breaklines" "true")))
#+END_SRC

#+RESULTS:
| breaklines | true |

The equivalente in =minted= would be: 

#+BEGIN_EXAMPLE
(setq org-latex-minted-options '(("breaklines" "true")
                                 ("breakanywhere" "true")))
#+END_EXAMPLE

* The /LaTeX/ route 

** LaTeX options 

Turn off the default toc behavior; deal with it properly in headers to files.

#+BEGIN_SRC emacs-lisp :tangle yes

(defun org-latex-no-toc (depth)  
  (when depth
      (format "%% Org-mode is exporting headings to %s levels.\n"
              depth)))

(setq org-latex-format-toc-function 'org-latex-no-toc)

#+END_SRC

#+RESULTS:
: org-latex-no-toc

*** Disable default list of packages

The reason is that my style files have a list of their own. If not, in  Beamer, for example, I got this list of packages automatically included:

#+BEGIN_EXAMPLE2
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{grffile}
\usepackage{longtable}
\usepackage{wrapfig}
\usepackage{rotating}
\usepackage[normalem]{ulem}
\usepackage{amsmath}
\usepackage{textcomp}
\usepackage{amssymb}
\usepackage{capt-of}
\usepackage{hyperref}
\usepackage{listings}
#+END_EXAMPLE

which then my style file duplicated.

* The /XeLaTeX/ way
** XeLaTeX and pdfLaTeX Org Export Settings 

** My default =sty= file with XeLaTeX
Problema: if I leave this, every time I export to LaTeX I get this and the process fails. I better include the line in the skeleton for XeLaTeX documents.

#+begin_src emacs-lisp :tangle no

(setq org-latex-packages-alist
        '(( "minted" "org-preamble-xelatex" nil)))

#+end_src

#+RESULTS:
|   | org-preamble-pdflatex | nil |

:PROPERTIES:
:ID:       e9f6cdbc-2253-4c86-a7b2-d77ded4807e9
:END:

    Configure org-mode to export directly to PDF using xelatex, compiling the bibliography as it goes, with my preferred setup in each case. There is a good deal of local stuff in this section. The required style files used below are available at https://github.com/kjhealy/latex-custom-kjh. You may need to adjust or remove some of these settings depending on your preferences and local configuration.

LaTeX compilation command. For orgmode docs we just always use xelatex for convenience. You can change it to pdflatex if you like, just remember to make the adjustments to the packages-alist below.
<<export>>

Also, if I change to latex instead of xelatex, then change tangle option to no or else latex will use xelatex options the compilation will fail. Update: it's enough if I comment out the following heading.

*** XeLaTeX options (Comment out if default latex is used instead)  <<options>>

**** Listings and Minted
Choose either listings or minted for exporting source code blocks. Using minted (as here) requires pygments be installed. 
I don't tangle it now because I set the default to =minted= in =/home/dgm/texmf/tex/generic/latex-custom-kjh/needs-org-mode/org-preamble-xelatex.sty=

#+BEGIN_SRC emacs-lisp :tangle no
;;   (setq org-latexg-listings t)
  ;; and change references to "minted" below to "listings"
;;;;;;;;;;;;;;;;  (setq org-latex-listings 'minted)  ;; already included in =~/texmf/tex/generic/latex-custom-kjh/needs-org-mode/org-preamble-xelatex.sty=
#+END_SRC

Default settings for minted code blocks. =bg= will need to be defined in the preamble of your document. Now I don't use them and I don't see differences in the documents produced \dots Why?

#+BEGIN_SRC emacs-lisp :tangle no
;;(setq org-latex-minted-options
;;      '(;("frame" "single")
;;        ("bgcolor" "bg") 
;;        ("fontsize" "\\small")
;;        ))
#+END_SRC

My new option comes from here: https://emacs.stackexchange.com/questions/33010/how-to-word-wrap-within-code-blocks

A commonly used environment for source code is lstlisting, provided by the LaTeX package listings. To get Org-mode to use it, add it to org-latex-packages-alist and set the variable org-latex-listings to t:

And to then get listings to wrap, the breaklines=true option needs to be supplied to listings. Org-mode can do this:

#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-latex-packages-alist '("" "listings" nil))
(setq org-latex-listings t)
(setq org-latex-listings-options '(("breaklines" "true")))
#+END_SRC

#+RESULTS:
| breaklines | true |

The equivalente in =minted= would be: 

#+BEGIN_EXAMPLE
(setq org-latex-minted-options '(("breaklines" "true")
                                 ("breakanywhere" "true")))
#+END_EXAMPLE

From https://github.com/kjhealy/emacs-starter-kit/blob/master/kjhealy.org


    #+source: orgmode-latex-export
    #+BEGIN_SRC emacs-lisp :tangle no
    
(require 'ox-latex)

    #+END_SRC

*** Set a Path to Executables (optional)
    - The location of the LaTeX excecutables is system
      dependent. AUCTeX calls everything through a shell, so you may
      or may not need this.  This source-code block is turned off by
      default as it should be added to the user's personal
      configuration as needed.

#+srcname: set-exec-path
#+begin_src emacs-lisp :tangle no

      (setenv "PATH" (concat "/usr/texbin:" (getenv "PATH")))

#+end_src

This is the original solution: 
#+begin_src emacs-lisp :tangle no
;; Default packages included in every tex file, pdflatex or xelatex. Currently included in the .sty files, so that's why I don't need this.
;(setq org-latex-packages-alist
;      '(("" "graphicx" t)
;        ("" "longtable" nil)
;        ("" "float" nil)))

;; source: https://lists.gnu.org/archive/html/emacs-orgmode/2013-06/msg00240.html
(defun my-auto-tex-cmd (backend)
  "When exporting from .org with latex,
  automatically run latex, pdflatex, or xelatex as appropriate,
  using latexmk."
  (let ((texcmd))
    (setq texcmd "latexmk -pdf %f")
    (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
        (progn
          (setq texcmd "latexmk -pdf -pdflatex='pdflatex -file-line-error --shell-escape -synctex=1' %f")))
    (if (string-match "LATEX_CMD: xelatex" (buffer-string))
        (progn
          (setq texcmd "latexmk -pdflatex='xelatex -file-line-error --shell-escape -synctex=1' -pdf %f")))

    (setq org-latex-pdf-process (list texcmd))))
(add-hook 'org-export-before-parsing-hook 'my-auto-tex-cmd)
#+end_src


#+RESULTS:
| my-auto-tex-cmd | org-latex-header-blocks-filter |

Here is the same but
