# -*- coding: utf-8 -*-
# -*- find-file-hook: org-babel-execute-buffer -*-

#+TITLE: Helm Customizations
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args :tangle yes

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

It controls helm and projectile.

* First, make sure that =ido-everywhere= is disabled

See https://github.com/emacs-helm/helm/issues/2085

#+BEGIN_SRC emacs-lisp :tangle no
;;(cl-assert (null ido-everywhere)
;;             nil "ido-everywhere is incompatible with helm, please disable it")
#+END_SRC

* Starting out the helm magic

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm
    :diminish helm-mode
    :bind-keymap (("C-c h"    . helm-command-map)
                  ("C-c h"    . helm-command-prefix))
    :bind  (("M-x"            . helm-M-x)
            ("M-y"            . helm-show-kill-ring)
            ("C-x b"          . helm-mini)
            ("M-i"            . helm-semantic-or-imenu)
            ("s-o"            . helm-occur)
            ("C-x C-f"        . helm-find-files)
            ("s-<return>"     . helm-all-mark-rings)
            ("s-x"            . helm-register)
            ("s-t"            . helm-top)
            ("s-m"            . helm-man-woman)
            ("s-\("           . helm-eval-expression-with-eldoc)
            ([remap find-tag] . helm-etags-select)
            ("s-\)"           . ap/helm-info-emacs-elisp-cl)
            ;;("C-g"          . helm-keyboard-quit)
            ("s-e"            . helm-run-external-command)
            ("s-D"            . helm-locate)
            ("s-d"            . helm-find)
            :map helm-command-map
            ("<tab>"          . helm-execute-persistent-action)
            ("C-i"            . helm-execute-persistent-action)
            ("C-z"            . helm-select-action)
            ("g"              . helm-google-suggest)
            ("w"              . helm-wikipedia-suggest)
            :map helm-find-files-map
            ("C-b"            . helm-find-files-up-one-level)
            :map helm-grep-mode-map
            ("<return>"       . helm-grep-mode-jump-other-window)
            ("n"              . helm-grep-mode-jump-other-window-forward)
            ("p"              . helm-grep-mode-jump-other-window-backward)
            :map shell-mode-map
            ("C-c C-l"        . helm-comint-input-ring) ; in shell mode
            :map minibuffer-local-map
            ("C-c C-l"        . helm-minibuffer-history)
            ("M-p"            . helm-minibuffer-history)
            ("M-n"            . helm-minibuffer-history)
            :map helm-buffer-map
            ("C-g"            . helm-keyboard-quit)
            :map helm-map
            ("C-g"            . helm-keyboard-quit))
    :init
    (global-unset-key (kbd "C-x c"))
    (setq helm-command-prefix-key "C-c h")
    (global-set-key (kbd "C-c h") 'helm-command-prefix)
    (require 'helm-config)
    (require 'helm-grep)
    (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)
    (add-hook 'helm-after-initialize-hook
                (lambda()
                  (define-key helm-buffer-map (kbd "C-g") 'helm-keyboard-quit)
                  (define-key helm-map (kbd "C-g") 'helm-keyboard-quit)))
    :config
      (when (executable-find "curl")
        (setq helm-google-suggest-use-curl-p t))

      (setq helm-google-suggest-use-curl-p t
            helm-scroll-amount 4
            helm-ff-search-library-in-sexp t
            helm-split-window-in-side-p t
            helm-echo-input-in-header-line t
            helm-ff-file-name-history-use-recentf t
            helm-move-to-line-cycle-in-source t ; move to end or beginning of source when reaching top or bottom of source.
            helm-buffer-skip-remote-checking t
            helm-mode-fuzzy-match t
            helm-buffers-fuzzy-matching t
            helm-org-headings-fontify t
            helm-semantic-fuzzy-match t
            helm-display-header-line nil)

       (setq helm-candidate-number-limit 100)

       (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
             helm-input-idle-delay 0.01  ; this actually updates things
                                          ; reeeelatively quickly.
             helm-yas-display-key-on-candidate t
             helm-quick-update t
             helm-M-x-requires-pattern nil
             helm-ff-skip-boring-files t)

          (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x

          (setq helm-recentf-fuzzy-match t)

          (setq helm-follow-input-idle-delay 0.5)
          (setq helm-imenu-fuzzy-match  t)

          (setq helm-locate-fuzzy-match t)

          (unless (executable-find "locate")
            (setq helm-locate-recursive-dirs-command "find %s -type d -regex .*%s.*$"))

          (setq helm-lisp-fuzzy-completion t)

          (setq
           helm-follow-mode-persistent t
           helm-reuse-last-window-split-state t
           helm-findutils-search-full-path t
           helm-show-completion-display-function nil
           helm-completion-mode-string ""
           helm-dwim-target 'completion
           helm-use-frame-when-more-than-two-windows nil
           helm-man-or-woman-function nil
           helm-buffers-end-truncated-string "…"
           helm-buffer-max-length 22
           helm-window-show-buffers-function 'helm-window-mosaic-fn
           helm-window-prefer-horizontal-split t)

          (setq helm-apropos-fuzzy-match t)

          (helm-top-poll-mode)

          (defun ap/helm-info-emacs-elisp-cl ()
            "Helm for Emacs, Elisp, and CL-library info pages."
            (interactive)
            (helm :sources '(helm-source-info-emacs
                             helm-source-info-elisp
                             helm-source-info-cl)))
    (helm-mode 1))
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24474 40412 608146 733000) :init (24474 40412 607481 774000) :config (24474 40412 607468 854000) :config-secs (0 0 528 336000) :init-secs (0 0 646 127000) :use-package-secs (0 0 1391 692000)))



* Daniel Mai's stuff 

From: https://github.com/danielmai/.emacs.d/blob/master/config.org

** =helm-swoop=
From https://wikemacs.org/wiki/Helm-swoop

helm-swoop, based on Helm, allows to show interactively lines that match a pattern in another (helm) buffer. It updates while we type, and usually starts with the word at point. When we navigate around this helm list, the cursor in the original buffer jumps to the corresponding line, without loosing the helm session.

Conclusion: it's like a helm-occur bound to =s-;=

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-swoop
    :after helm-mode
    :bind (:map helm-command-map
           ("C-c h o" . helm-swoop)           ; esto no está funcionando
           ("C-c s" . helm-multi-swoop-all))  ; esto no está funcionando
    :config
    ;; When doing isearch, hand the word over to helm-swoop
    (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)

    ;; From helm-swoop to helm-multi-swoop-all
    (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)

    ;; Save buffer when helm-multi-swoop-edit complete
    (setq helm-multi-swoop-edit-save t)

    ;; If this value is t, split window inside the current window
    (setq helm-swoop-split-with-multiple-windows t)

    ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
    (setq helm-swoop-split-direction 'split-window-vertically)

    ;; If nil, you can slightly boost invoke speed in exchange for text color
    (setq helm-swoop-speed-or-color t))
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24468 17905 246966 751000) :init (24468 17905 246699 37000) :init-secs (0 0 39 231000) :use-package-secs (0 0 413 902000)))


* And more Ambrevar's stuff

TODO: =helm-ff= should allow opening several marks externally, e.g.  sxiv for pics. See https://github.com/emacs-helm/helm/wiki/Find-Files#open-files-externally.
What about the default program?  It currently defaults to ~/.mailcap, which is not so customizable.  Would ranger's rifle be useful here?  See https://github.com/emacs-helm/helm/issues/1796.  There is the `openwith' package.

TODO: Batch-open torrent files automatically.  Add to mailcap?  Same as above, C-c C-x does not allow for opening several files at once.

TODO: helm-find in big folders sometimes leads bad results, like exact match not appearing first. Better sorting?

TODO: Implement alternating-color multiline lists. See https://github.com/emacs-helm/helm/issues/1790.

Note: =wgrep-helm= allows you to edit a helm-grep-mode buffer and apply those changes to the file buffer.

#+BEGIN_SRC emacs-lisp :tangle yes
;; (when (< emacs-major-version 26)
;;   (when (require 'linum-relative nil t)
;;     (helm-linum-relative-mode 1)))

;; (when (require 'helm-descbinds nil t)
;;    (helm-descbinds-mode))

(when (require 'wgrep-helm nil t)
  (setq wgrep-auto-save-buffer t))
;;        wgrep-enable-key (kbd "C-c h w")))

;; From Ambrevar: wgrep-face is not so pretty. Commented out as not working
;; (set-face-attribute 'wgrep-face nil :inherit 'ediff-current-diff-C :foreground 'unspecified :background 'unspecified :box nil)

;; (when (require 'helm-ls-git nil t)
;;   ;; `helm-source-ls-git' must be defined manually.
;;   ;; See https://github.com/emacs-helm/helm-ls-git/issues/34.
;;   (setq helm-source-ls-git
;;         (and (memq 'helm-source-ls-git helm-ls-git-default-sources)
;;              (helm-make-source "Git files" 'helm-ls-git-source
;;                :fuzzy-match helm-ls-git-fuzzy-match))))
#+END_SRC

#+RESULTS:
: t


* Eshell

Por alguna razon el keybind no se registra, asi que lo quito.

DMG on 9 sept changes M-l binding to M-p but it doesn't work... don't know why

#+BEGIN_SRC emacs-lisp :tangle yes
;; Command: helm-eshell-history
(require 'helm-eshell)

;; (add-hook 'eshell-mode-hook
;;          '(lambda ()
;;             (define-key eshell-mode-map (kbd "C-c h C-c h")  'helm-eshell-history))) 
    (add-hook 'eshell-mode-hook
              #'(lambda ()
                  (define-key eshell-mode-map (kbd "M-p")  'helm-eshell-history)))
#+END_SRC

#+RESULTS:
| (lambda nil (define-key eshell-mode-map (kbd M-p) 'helm-eshell-history)) | tramp-eshell-directory-change |

** Ambrevar's eshell

This doesn't work either...

#+BEGIN_SRC emacs-lisp :tangle yes
;;; Eshell
(defun ambrevar/helm/eshell-set-keys ()
  (define-key eshell-mode-map [remap eshell-pcomplete] 'helm-esh-pcomplete)
  (define-key eshell-mode-map (kbd "M-p") 'helm-eshell-history))
  ;; dgm comments out on 4 sept 2019
  ;;(define-key eshell-mode-map (kbd "M-s") nil) ; Useless when we have 'helm-eshell-history.
  ;;(define-key eshell-mode-map (kbd "M-s f") 'helm-eshell-prompts-all)) ;; this one doesn't work... I don't know what it'd do.
(add-hook 'eshell-mode-hook 'ambrevar/helm/eshell-set-keys)
#+END_SRC

#+RESULTS:
| ambrevar/helm/eshell-set-keys | (lambda nil (define-key eshell-mode-map (kbd M-p) 'helm-eshell-history)) | tramp-eshell-directory-change |

* helm-descbinds

List active key bindings:

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package helm-descbinds
  :config 
   (helm-descbinds-mode))
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24468 17971 209261 348000) :init (24468 17971 209249 42000) :config (24468 17971 209127 266000) :config-secs (0 0 363 856000) :init-secs (0 0 10448 137000) :use-package-secs (0 0 10550 8000)))

* Helm, etags and gtags
** etags

#+begin_src emacs-lisp :tangle no
(define-key global-map [remap find-tag] 'helm-etags-select)
#+end_src

#+RESULTS:
: helm-etags-select

** gtags
Further customization of =gtags= with =helm=, from http://tuhdo.github.io/c-ide.html.

Check out: http://tuhdo.github.io/c-ide.html and https://github.com/syohex/emacs-helm-gtags

Also of interest this setup: https://github.com/tuhdo/emacs-c-ide-demo/blob/master/custom/setup-helm-gtags.el
and https://github.com/yusekiya/dotfiles/blob/master/.emacs.d/config/packages/my-helm-config.el

** TODO Understand how =gtags= differ from =etags=

Old setup

#+begin_src emacs-lisp :tangle no
(use-package helm-gtags
    :after helm
    :init
    ;; Enable helm-gtags-mode
    (add-hook 'dired-mode-hook 'helm-gtags-mode)
    (add-hook 'eshell-mode-hook 'helm-gtags-mode)
    (add-hook 'c-mode-hook 'helm-gtags-mode)
    (add-hook 'c++-mode-hook 'helm-gtags-mode)
    (add-hook 'asm-mode-hook 'helm-gtags-mode)
    ;; (add-hook 'python-mode-hook 'helm-gtags-mode)
    :config
    (setq
     helm-gtags-ignore-case t
     helm-gtags-auto-update t
     helm-gtags-use-input-at-cursor t
     helm-gtags-pulse-at-cursor t
     helm-gtags-prefix-key "C-c g"
     helm-gtags-suggested-key-mapping t)

    (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
    (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
    (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
    (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
    (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
    (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24468 17992 716597 721000) :init (24468 17992 716551 22000) :config (24468 17992 716333 695000) :config-secs (0 0 576 950000) :init-secs (0 0 952 360000) :use-package-secs (0 0 1067 836000)))

New setup from Tuhdo's =setup-helm-gtags.el=

#+begin_src emacs-lisp :tangle yes
(use-package ggtags
   :defer t
   :config 
   (add-hook 'c-mode-common-hook
             (lambda ()
               (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                 (ggtags-mode 1))))

   (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
   (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
   (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
   (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
   (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
   (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)
   (define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24468 18006 895172 815000) :init (24468 18006 895129 731000) :init-secs (0 0 64 825000) :use-package-secs (0 0 242 991000)))

And now on to helm. 

#+begin_src emacs-lisp :tangle yes
;; this variable must be set before load helm-gtags
;; you can change to any prefix key of your choice
;; (setq helm-gtags-prefix-key "\C-cg")

(use-package helm-gtags
  :defer t
  :init
  (setq helm-gtags-prefix-key "\C-cg")
  (progn
    (setq helm-gtags-ignore-case t
          helm-gtags-auto-update t
          helm-gtags-use-input-at-cursor t
          helm-gtags-pulse-at-cursor t
          helm-gtags-prefix-key "\C-cg"
          helm-gtags-suggested-key-mapping t)

    ;; Enable helm-gtags-mode in Dired so you can jump to any tag
    ;; when navigate project tree with Dired
    (add-hook 'dired-mode-hook 'helm-gtags-mode)

    ;; Enable helm-gtags-mode in Eshell for the same reason as above
    (add-hook 'eshell-mode-hook 'helm-gtags-mode)

    ;; Enable helm-gtags-mode in languages that GNU Global supports
    (add-hook 'c-mode-hook 'helm-gtags-mode)
    (add-hook 'c++-mode-hook 'helm-gtags-mode)
    (add-hook 'java-mode-hook 'helm-gtags-mode)
    (add-hook 'asm-mode-hook 'helm-gtags-mode)
    
    :config 
    ;; key bindings
    (with-eval-after-load 'helm-gtags
      (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
      (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
      (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
      (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
      (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
      (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history))))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24468 18018 898189 352000) :init (24468 18018 898177 103000) :config (24468 18018 898141 406000) :config-secs (0 0 15 115000) :init-secs (0 0 339 251000) :use-package-secs (0 0 452 52000)))

* Helm-bibtex
And now the bit by Ista Zahn in tip from: https://github.com/izahn/dotemacs but modified to use helm instead of ivy.
This allows you to search your BibTeX files for references to insert into the current document. For it to work you will need to set `bibtex-completion-bibliography` to the location of your BibTeX files.
Initiate a citation search with ivy-bibtex, bound to =C-c r= (not working, of course. This is the keybinding for revert buffer.)

Commented out by DGM: not sure it is working and I can use ivy with helm

From https://github.com/tmalsburg/helm-bibtex: Helm-bibtex and ivy-bibtex allow you to search and manage your BibTeX bibliography. They both share the same generic backend, =bibtex-completion=, but one uses the Helm completion framework and the other Ivy as a front-end.

=(global-set-key (kbd "<s-backspace>") 'helm-bibtex)= ;; not needed. Already in =C-c ]=. <s-backspace> relocated to helm-swoop. Aunque ojo que en Olivetti mode =C-c ]= esta' bound to another thing.

#+begin_src emacs-lisp :tangle yes
  ;; (setq ivy-bibtex-default-action 'bibtex-completion-insert-citation)
  (use-package helm-bibtex
    :defer t
    :config 
    (setq bibtex-completion-bibliography "/media/dgm/blue/documents/bibs/socbib.bib")
    (setq bibtex-completion-library-path '("/media/dgm/blue/documents/elibrary/org/references/pdfs"))
    (setq bibtex-completion-notes-path   "/media/dgm/blue/documents/elibrary/org/references")
    (setq bibtex-completion-pdf-symbol   "⌘")
    (setq bibtex-completion-notes-symbol "✎")
    (setq bibtex-completion-pdf-open-function 'org-open-file)
    (setq helm-bibtex-bibliography       "/media/dgm/blue/documents/bibs/socbib.bib" 
          helm-bibtex-library-path       "/media/dgm/blue/documents/elibrary/org/references/pdfs/"
          helm-bibtex-notes-path         "/media/dgm/blue/documents/elibrary/org/references/readings.org")
    )
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24471 7469 673543 638000) :init (24471 7469 673516 259000) :init-secs (0 0 973 82000) :use-package-secs (0 0 1088 285000) :config (24471 7469 673467 559000) :config-secs (0 0 887 595000)))

Tip from =titus= for =helm-bibtex=: I use the menu key as the prefix key for all helm commands and bind helm-bibtex to b. Helm-bibtex can then be started using <menu> b. It is also useful to bind helm-resume to <menu> in helm-command-map. With this binding, <menu> <menu> can be used to reopen the last helm search.

** Bibtex-completion

Bibtex-completion depends on helm-bibtex. That's why I paste it here. A minimal configuration involves telling =bibtex-completion= where your bibliographies can be found. I am leaving it as not a list.

#+BEGIN_EXAMPLE
(setq bibtex-completion-bibliography 
      '("/media/dgm/blue/documents/bibs/socbib.bib"))  
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp :tangle no
(setq bibtex-completion-bibliography "/media/dgm/blue/documents/bibs/socbib.bib")
#+END_SRC

#+RESULTS:
: /media/dgm/blue/documents/bibs/socbib.bib

Specify where PDFs can be found: =Bibtex-completion= assumes that the name of a PDF consists of the BibTeX key followed plus a user-defined suffix (.pdf by default). For example, if a BibTeX entry has the key Darwin1859, bibtex-completion searches for Darwin1859.pdf.

I am commenting out as I have the variable =helm-bibtex-library-path= in =starter-kit-helm.org=

#+BEGIN_SRC emacs-lisp :tangle no
(setq bibtex-completion-library-path '("/media/dgm/blue/documents/elibrary/org/references/pdfs"))
#+END_SRC

#+RESULTS:
| /media/dgm/blue/documents/elibrary/org/references/pdfs/ |


Bibtex-completion supports two methods for storing notes. It can either store all notes in one file or store notes in multiple files, one file per publication. In the first case, the customization variable bibtex-completion-notes-path has to be set to the full path of the notes file:
I am commenting it out as I have the variable =helm-bibtex-notes-path= in =starter-kit-helm.org=

#+BEGIN_SRC emacs-lisp :tangle no
(setq bibtex-completion-notes-path "/media/dgm/blue/documents/elibrary/org/references")
#+END_SRC

#+RESULTS:
: /media/dgm/blue/documents/elibrary/org/references

(See also Kitchin on setting these paths here https://github.com/jkitchin/org-ref.)

Symbols used for indicating the availability of notes and PDF files

#+BEGIN_SRC emacs-lisp :tangle no
(setq bibtex-completion-pdf-symbol "⌘")
(setq bibtex-completion-notes-symbol "✎")
#+END_SRC

#+RESULTS:
: ✎

Open pdf with system pdf viewer

#+BEGIN_SRC emacs-lisp :tangle no
(setq bibtex-completion-pdf-open-function 'org-open-file)
#+END_SRC

#+RESULTS:
: org-open-file

** The Reddit workflow

From: https://www.reddit.com/r/emacs/comments/4gudyw/help_me_with_my_orgmode_workflow_for_notetaking/

With this setup helm-bibtex points to the same notes file as =org-ref=. Just run =M-x helm-bibtex= (=C-]=) and select the article you want. Instead of pressing =<return>=, press =<tab>=. This opens up helm's alternate action list where you can choose to =Edit notes=. This opens up the exact notes file created by org-ref.

#+BEGIN_SRC emacs-lisp :tangle no
 (setq helm-bibtex-bibliography "/media/dgm/blue/documents/bibs/socbib.bib" 
       helm-bibtex-library-path "/media/dgm/blue/documents/elibrary/org/references/pdfs/"
       helm-bibtex-notes-path "/media/dgm/blue/documents/elibrary/org/references/readings.org")
#+END_SRC

#+RESULTS:
: /media/dgm/blue/documents/elibrary/org/references/readings.org

* Uncle Dave

Lines from uncle dave at https://github.com/daedreth/UncleDavesEmacs and Tuhdo  https://tuhdo.github.io/helm-intro.html

#+BEGIN_SRC emacs-lisp :tangle yes
;; (define-key helm-find-files-map (kbd "C-b") 'helm-find-files-up-one-level)
;; (define-key helm-find-files-map (kbd "C-f") 'helm-execute-persistent-action)
;;(use-package helm-files
;;  :bind
;;  (:map helm-find-files-map
;;   ("C-b" . helm-find-files-up-one-level)
;;   ("C-i" . helm-execute-persistent-action))
;;)
#+END_SRC

#+RESULTS:
: helm-find-files-up-one-level

* Projectile 

I kept loosing my projects in external drives upon re-start. My attempt to keep them thru magit is copied from https://emacs.stackexchange.com/questions/32634/how-can-the-list-of-projects-used-by-projectile-be-manually-updated/32635

Si usara =:map projectile-command-map=, las definiciones irían adjuntas al prefijo =C-c p=

=(projectile-global-mode)= needed??

#+srcname: projectile
#+BEGIN_SRC emacs-lisp :tangle yes
;; Projectile
(use-package projectile
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :delight '(:eval (concat " " (projectile-project-name))) ;; Remove the mode name for projectile-mode, but show the project name.
  :config 
  (projectile-mode +1)
  (setq projectile-project-search-path '("~/"
                                         "/media/dgm/blue/documents/dropbox/"
                                         "/media/dgm/blue/documents/UNED/"
                                         "/media/dgm/blue/documents/data/eurostat" 
                                         "/media/dgm/blue/documents/programming"
                                         "/media/dgm/blue/documents/My-Academic-Stuff"
                                         "/media/dgm/blue/documents/personal"
                                         "/home/dgm/Dropbox/gtd"
                                         "/media/dgm/blue/documents/bibs"
                                         "/media/dgm/blue/documents/templates"
                                         "/media/dgm/blue/documents/cv"
                                         "/media/dgm/blue/documents/backups"
                                         "/media/dgm/blue/documents/reviews"
                                         "/media/dgm/blue/documents/elibrary"
                                         "/media/dgm/blue/documents/proyectos"
                                         "/media/dgm/blue/documents/UNED/teaching/mis-cursos"
                                         ))
  (projectile-add-known-project "~/")
  (projectile-add-known-project "~/.emacs.d/")
  (projectile-add-known-project "/media/dgm/blue/documents/dropbox/")
  (projectile-add-known-project "/media/dgm/blue/documents/UNED/")
  (projectile-add-known-project "/media/dgm/blue/documents/data/eurostat/")
  (projectile-add-known-project "/media/dgm/blue/documents/programming/")
  (projectile-add-known-project "/media/dgm/blue/documents/My-Academic-Stuff/")
  (projectile-add-known-project "/media/dgm/blue/documents/personal/")  
  (projectile-add-known-project "/home/dgm/Dropbox/gtd/")  
  (projectile-add-known-project "/media/dgm/blue/documents/bibs/")  
  (projectile-add-known-project "/media/dgm/blue/documents/templates/")
  (projectile-add-known-project "/media/dgm/blue/documents/cv/")
  (projectile-add-known-project "/media/dgm/blue/documents/backups/")
  (projectile-add-known-project "/media/dgm/blue/documents/reviews/")
  (projectile-add-known-project "/media/dgm/blue/documents/elibrary/")
  (projectile-add-known-project "/media/dgm/blue/documents/proyectos/")
  (projectile-add-known-project "/media/dgm/blue/documents/UNED/teaching/mis-cursos/")

  (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)
    
  (when (require 'magit nil t)
    (mapc #'projectile-add-known-project
          (mapcar #'file-name-as-directory (magit-list-repos)))
    ;; Optionally write to persistent `projectile-known-projects-file'
    (projectile-save-known-projects))

    (setq projectile-enable-caching nil) ;; update 22 nov 2018. In C-h v projectile-indexing-method they recommend to have it set to alien to have this other variable set to true. If it does not work, revert to instructions in emacs's cheatsheet.
    ;; (setq projectile-enable-caching nil) ; see https://emacs.stackexchange.com/questions/2164/projectile-does-not-show-all-files-in-project
    ;; https://github.com/bbatsov/projectile/issues/1183
    ;; trying to fix slow behaviour of emacs
    (setq projectile-mode-line
          '(:eval (format " Projectile[%s]"
                          (projectile-project-name))))

    (setq projectile-other-file-alist '(("cpp" "h" "hpp" "ipp")
                                        ("ipp" "h" "hpp" "cpp")
                                        ("hpp" "h" "ipp" "cpp")
                                        ("cxx" "hxx" "ixx")
                                        ("ixx" "cxx" "hxx")
                                        ("hxx" "ixx" "cxx")
                                        ("c" "h")
                                        ("m" "h")
                                        ("mm" "h")
                                        ("h" "c" "cpp" "ipp" "hpp" "m" "mm")
                                        ("cc" "hh")
                                        ("hh" "cc")
                                        ("vert" "frag")
                                        ("frag" "vert")
                                        (nil "lock" "gpg")
                                        ("lock" "")
                                        ("gpg" "")))

    (add-to-list 'projectile-other-file-alist '("org" "el")) ;; switch from org -> el 
    (add-to-list 'projectile-other-file-alist '("el" "org")) ;; switch from el -> org 
    (add-to-list 'projectile-other-file-alist '("Rnw" "R"))
    (add-to-list 'projectile-other-file-alist '("R" "Rnw"))
    (add-to-list 'projectile-other-file-alist '("Rnw" "tex"))
    (add-to-list 'projectile-other-file-alist '("tex" "Rnw"))
    (add-to-list 'projectile-other-file-alist '("org" "tex"))
    (add-to-list 'projectile-other-file-alist '("tex" "org"))
    (add-to-list 'projectile-other-file-alist '("tex" "log"))
    (add-to-list 'projectile-other-file-alist '("log" "tex"))
    (add-to-list 'projectile-other-file-alist '("org" "html"))
    (add-to-list 'projectile-other-file-alist '("html" "org"))

    (add-to-list 'projectile-globally-ignored-files "*.png")
    (setq projectile-globally-ignored-file-suffixes '(".cache"))

     (setq helm-grep-default-command
          "grep --color=always -d skip %e -n%cH -e %p %f"
          helm-grep-default-recurse-command
          "grep --color=always -d recurse %e -n%cH -e %p %f")
)
#+END_SRC

#+RESULTS: projectile
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24468 18067 277154 589000) :init (24468 18067 276932 442000) :init-secs (0 0 34 734000) :use-package-secs (0 0 340 429000)))

Note:

#+BEGIN_EXAMPLE
"~/.emacs.d/"
                                         "~/texmf/"
                                         "~/Dropbox/gtd/"
                                         "~/Downloads/"
  (projectile-add-known-project "~/Downloads/")
  (projectile-add-known-project  "~/texmf/")
  (projectile-add-known-project "~/Dropbox/gtd/")
#+END_EXAMPLE

Not needed, I think as the they are included in =.git= of =~/=.


** Helm-Projectile

=helm-projectile=, the generic command of =helm-projectile= is not working properly. So I don't use the =s-h= for it, and use it instead for  helm-projectile-switch-project 

#+BEGIN_EXAMPLE
:bind ("C-c p h" . helm-projectile)
:after (helm projectile) ; helm-mode

:bind  (:map helm-map
("s-h" . helm-projectile))

(global-set-key (kbd "s-h") 'helm-projectile)

("s-h"    . helm-projectile)
#+END_EXAMPLE

#+srcname: helm-projectile
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package helm-projectile
  :bind (("s-g"    . helm-projectile-grep)
         ("s-h"    . helm-projectile-switch-project)
         ("s-j"    . helm-projectile-find-file)
         ([?\s-\|] . helm-projectile-find-file-dwim) 
         ([?\s-\`] . helm-projectile-find-other-file)
         ([?\s-\*] . helm-projectile-find-dir)       
         ;;([?\s-j]  . helm-projectile-find-file)       
         ([?\s-n]  . helm-projectile-switch-to-buffer))
  :init     
  (setq projectile-completion-system 'helm)
  (setq projectile-indexing-method 'alien) ;; added by DGM on 30 nov 2019
  :commands helm-projectile
  :config 
  (setq projectile-switch-project-action 'helm-projectile)
  (helm-projectile-on)
  )
#+END_SRC

#+RESULTS: helm-projectile
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24474 57201 868273 138000) :init (24474 57201 867921 7000) :init-secs (0 0 1133 439000) :use-package-secs (0 0 1623 896000) :config (24474 57201 867893 147000) :config-secs (0 0 1065 15000)))

* =helm-ag=:  Interface with Ag ("The Silver Searcher")

The Silver Searcher is grep-like program implemented by =C=. An attempt to make something better than =ack-grep=.

It searches pattern about 3–5x faster than ack-grep. It ignores file patterns from your .gitignore and .hgignore. 

[[https://github.com/ggreer/the_silver_searcher][The Silver Searcher]] is a very fast, smart code search tool, similar to ack. Install it via homebrew. The emacs interface, `ag-mode`, is [[https://github.com/Wilfred/ag.el/#agel][described here]].


NB: =helm-projectile-ag= resulta en un formato ilegible. =helm-ag= resulta en un formato legible, luego uso esta.

** Critical options: 

1. =-n --norecurse= Don't recurse into directories 
2. =-r --recurse= Recurse into directories when searching. Default it true.

#+BEGIN_SRC emacs-lisp :tangle yes
;; Originally in starter-kit-bindings.org like this
;;  (require 'ag)
;;  (define-key global-map "\C-x\C-a" 'ag) 
;;  (define-key global-map "\C-x\C-r" 'ag-regexp)

;; new bindings by DGM to try and use 'helm-ag
;;  (define-key global-map "\C-x\C-a" 'helm-ag) 
;;  (define-key global-map "\C-x\C-r" 'helm-ag-regexp)

(use-package ag)

(use-package helm-ag
  :after (helm-mode ag)
  :bind ("s-f" . helm-ag)
  :init (setq helm-ag-base-command "/usr/bin/ag"
              helm-ag-insert-at-point t
              helm-ag-fuzzy-match     t
              helm-ag-command-option " --hidden" 
              helm-ag-use-agignore t)
  :config 
   (setq helm-grep-ag-command "ag --line-numbers -S --hidden --color --color-match '31;43' --nogroup %s %s %s")
   (setq helm-grep-ag-pipe-cmd-switches '("--color-match '31;43'"))
)
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24468 18133 774470 965000) :init (24468 18133 774359 383000) :init-secs (0 0 27 213000) :use-package-secs (0 0 202 483000)))


* Allowing =ido= mode

#+BEGIN_SRC emacs-lisp :tangle yes
(defun ido-recentf-open ()
  "Use `ido-completing-read' to find a recent file."
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))

(global-set-key (kbd "C-x f") 'ido-recentf-open)

(add-to-list 'helm-completing-read-handlers-alist '(ido-recentf-open  . ido))
#+END_SRC

#+RESULTS:
: ((ido-recentf-open . ido) (find-tag . helm-completing-read-default-find-tag) (xref-find-definitions . helm-completing-read-default-find-tag) (xref-find-references . helm-completing-read-default-find-tag) (ggtags-find-tag-dwim . helm-completing-read-default-find-tag) (tmm-menubar) (find-file) (execute-extended-command) (dired-do-rename . helm-read-file-name-handler-1) (dired-do-copy . helm-read-file-name-handler-1) (dired-do-symlink . helm-read-file-name-handler-1) (dired-do-relsymlink . helm-read-file-name-handler-1) (dired-do-hardlink . helm-read-file-name-handler-1) (basic-save-buffer . helm-read-file-name-handler-1) (write-file . helm-read-file-name-handler-1) (write-region . helm-read-file-name-handler-1))


* =org-rifle=

See https://github.com/alphapapa/org-rifle

=org-rifle= searches in your notes as you type and it finds the search words in any order which makes it very easy and quick to find a given note.

What does my rifle do? It searches rapidly through my Org files. It searches both headings and contents of entries in Org buffers, and it displays entries that match all search terms, whether the terms appear in the heading, the contents, or both. Matching portions of entries’ contents are displayed with surrounding context and grouped by buffer to make it easy to acquire your target.'

In contrast with org-occur and similar commands, helm-org-rifle is entry-based (i.e. a heading and all of its contents, not including subheadings), while org-occur is line-based. So org-occur will show you entire lines that contain matching words, without any reference to the heading the line is under, while helm-org-rifle will show the heading of the entry that matches, followed by context around each matching word in the entry. In other words, helm-org-rifle is sort of like Google, while org-occur is sort of like grep.

Entries are fontified by default to match the appearance of an Org buffer, and optionally the entire path can be displayed for each entry, rather than just its own heading.

** Usage

Run one of the rifle commands, type some words, and results will be displayed, grouped by buffer. Hit RET to show the selected entry, or <C-return> to show it in an indirect buffer.

*** Helm commands: show results in a Helm buffer

- helm-org-rifle: Show results from all open Org buffers
- helm-org-rifle-agenda-files: Show results from Org agenda files
- helm-org-rifle-current-buffer: Show results from current buffer
- helm-org-rifle-directories: Show results from selected directories; with prefix, recursively
- helm-org-rifle-files: Show results from selected files
- helm-org-rifle-org-directory: Show results from Org files in org-directory

*** Occur commands: show results in an occur-like, persistent buffer

- helm-org-rifle-occur: Show results from all open Org buffers
- helm-org-rifle-occur-agenda-files: Show results from Org agenda files
- helm-org-rifle-occur-current-buffer: Show results from current buffer
- helm-org-rifle-occur-directories: Show results from selected directories; with prefix, recursively
- helm-org-rifle-occur-files: Show results from selected files
- helm-org-rifle-occur-org-directory: Show results from Org files in org-directory

*** Tips
- Select multiple entries in the Helm buffer to display selected entries in a read-only, occur-style buffer.
- Save all results in a Helm buffer to a helm-org-rifle-occur buffer by pressing C-s (like helm-grep-save-results).
- Show results from certain buffers by typing the name of the buffer (usually the filename).
- Show headings with certain to-do keywords by typing the keyword, e.g. TODO or DONE.
- Multiple to-do keywords are matched with boolean OR.
- Show headings with certain priorities by typing, e.g. #A or [#A].
- Show headings with certain tags by searching for, e.g. :tag1:tag2:.
- Negate matches with a !, e.g. pepperoni !anchovies.
- Sort results by timestamp or buffer-order (the default) by calling commands with a universal prefix (C-u).
- Show entries in an indirect buffer by selecting that action from the Helm actions list, or by pressing <C-return>.
- The keymap for helm-org-rifle-occur results buffers imitates the org-speed keys, making it quicker to navigate. You can also collapse and expand headings and drawers with TAB and S-TAB, just like in regular Org buffers. Results buffers are marked read-only so you cannot modify them by accidental keypresses.
 - Delete the result at point in helm-org-rifle-occur buffers by pressing d. This does not alter the source buffers but simply removes uninteresting results from view.
- You can customize the helm-org-rifle group if you like.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package helm-org-rifle
  :bind ("s-u" . helm-org-rifle))
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23904 2416 473789 40000) :init (23904 2416 473492 686000) :init-secs (0 0 130 631000) :use-package-secs (0 0 667 779000)))


Customization by the great malb: (https://github.com/malb/emacs.d/blob/master/malb.org)

#+begin_src emacs-lisp :tangle yes
(use-package helm-org-rifle
  :commands (helm-org-rifle-agenda-files helm-org-rifle-occur-agenda-files malb/helm-org-rifle-agenda-files)
  :config (progn
            (defun malb/helm-org-rifle-agenda-files (arg)
              (interactive "p")
              (let ((current-prefix-arg nil))
                (cond
                 ((equal arg 4) (call-interactively #'helm-org-rifle-agenda-files nil))
                 ((equal arg 16) (helm-org-rifle-occur-agenda-files))
                 (t (helm-org-agenda-files-headings))))))
  :bind ("s-u" . helm-org-rifle))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24468 18147 273934 758000) :init (24468 18147 273725 76000) :init-secs (0 0 57 634000) :use-package-secs (0 0 390 862000)))


* Org in buffer heading search

=defun= included as the function has disappeared after today's package upgrade! (2 October 2019) I need to intall =helm-org= to get it working! 

[[https://github.com/emacs-helm/helm-org][Helm for org headlines and keywords completion]]

- Used by the great malb: https://github.com/malb/emacs.d/blob/master/malb.org

-  (global-set-key (kbd "s-p") 'helm-org-in-buffer-headings))

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package helm-org
  :bind ("s-p" . helm-org-in-buffer-headings)
  :config (progn
            (setq helm-org-headings-fontify t)

            (defun malb/helm-in-buffer ()
              "The right kind™ of buffer menu."
              (interactive)
              (if (eq major-mode 'org-mode)
                  (call-interactively #'helm-org-in-buffer-headings)
                (call-interactively #'helm-semantic-or-imenu)))))
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24468 18151 118572 605000) :init (24468 18151 118405 444000) :init-secs (0 0 65 3000) :use-package-secs (0 0 342 587000)))


* EXWM buffers with helm. Also: make =helm-mini= almighty
   ;; next two lines work in the context of a helm menu like the one triggered with =C-x b=
   ;; (global-set-key (kbd "C-c h w") 'helm-buffer-switch-other-window)
   ;; (global-set-key (kbd "C-c h k") 'helm-buffer-run-kill-persistent)
   ;; Launcher
  (exwm-input-set-key (kbd "s-e") 'helm-run-external-command)
(with-eval-after-load 'helm
  (exwm-input-set-key (kbd "s-D") #'helm-locate)
  (exwm-input-set-key (kbd "s-d") #'helm-find))

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'helm-bookmark)

(use-package helm-exwm
  :after (exwm helm)
  :config
  (add-to-list 'helm-source-names-using-follow "EXWM buffers")
  (setq helm-exwm-emacs-buffers-source (helm-exwm-build-emacs-buffers-source))
  (setq helm-exwm-source (helm-exwm-build-source))
  (setq helm-mini-default-sources `(helm-exwm-emacs-buffers-source
                                    helm-exwm-source
                                    helm-source-buffers-list
                                    helm-source-recentf
                                    ,(when (boundp 'helm-source-ls-git) 'helm-source-ls-git)
                                    helm-source-bookmarks
                                    helm-source-bookmark-set
                                    helm-source-buffer-not-found)))                 
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24469 42299 367616 607000) :init (24469 42299 367458 22000) :init-secs (0 0 2976 789000) :use-package-secs (0 0 3277 826000) :config (24469 42299 367436 951000) :config-secs (0 0 2943 326000)))


* Provide

#+BEGIN_SRC emacs-lisp :tangle yes
(provide 'starter-kit-helm)
#+END_SRC

#+RESULTS:
: starter-kit-helm

* Final message
#+source: message-line
#+begin_src emacs-lisp :tangle yes
(message "Starter Kit Helm File loaded.")
#+end_src

#+RESULTS: message-line
: Starter Kit User File loaded.
