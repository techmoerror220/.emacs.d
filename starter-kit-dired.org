# -*- coding: utf-8 -*-
# -*- find-file-hook: org-babel-execute-buffer -*-

#+TITLE: Emacs Starter Kit Dired
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args :tangle yes

This is part of the [[file:starter-kit.org][Emacs Starter Kit]]. 

This file provides settings for password management.

* Dired
** Dired-x

Dired extensions. Dired-x (Dired Extra) is not like Dired-plus. The former is part of the standard distribution of emacs.

Modified following the advice in the *info* node on installation of =dired-x=.

#+source: Dired-x
#+begin_src emacs-lisp :tangle yes
  ;;  (load "dired-x")
  (add-hook 'dired-load-hook
            (lambda ()
              (load "dired-x")
              ;; Set dired-x global variables here.  For example:
              ;; (setq dired-guess-shell-gnutar "gtar")
              ;; (setq dired-x-hands-off-my-keys nil)
              ))
  (add-hook 'dired-mode-hook
            (lambda ()
              ;; Set dired-x buffer-local variables here.  For example:
              ;; (dired-omit-mode 1)
              ))
#+end_src

#+RESULTS: Dired-x
| (lambda nil) | (lambda nil (let ((now (lookup-key dired-mode-map J))) (if (and now (not (eq now 'undefined))) nil (define-key dired-mode-map J 'bmkp-dired-jump)) (setq now (lookup-key dired-mode-map |


*** Default external apps for opening files

Tip found in: https://www.reddit.com/r/emacs/comments/ct0x2q/how_to_open_docx_xlsx_and_pdf_with_external/
NB: 20 April 2021. In Emacs 28 it works no more because the variable =dired-guess-shell-alist-user= doesn't exist anymore. 

#+BEGIN_EXAMPLE
                                     ("\\.mkv\\'"  "mpv")
                                     ("\\.avi\\'"  "mpv")
                                     ("\\.mp4\\'"  "mpv")
                                     ("\\.m4v\\'"  "mpv")
                                     ("\\.flv\\'"  "mpv")
                                     ("\\.wmv\\'"  "mpv")
                                     ("\\.mpg\\'"  "mpv")
                                     ("\\.mpeg\\'" "mpv")
                                     ("\\.webm\\'"  "mpv")                                     
                                     ("\\.pdf\\'"  "evince")
                                     ("\\.djvu\\'" "evince")
#+END_EXAMPLE


#+begin_src emacs-lisp :tangle no

  (setq dired-guess-shell-alist-user '(("\\.epub\\'" "calibre ? &")
                                       ("\\.avi\\'" "vlc ? &")
                                       ("\\.mp3\\'" "vlc ? &")
                                       ("\\.mp4\\'" "vlc ? &")
                                       ("\\.pdf\\'"  "evince  ? &")
                                       ("\\.djvu\\'" "evince  ? &")
                                       ("\\.html\\'" "chromium  ? &")
                                       ("\\.ods\\'" "libreoffice  ? &")
                                       ("\\.odt\\'" "libreoffice  ? &")
                                       ("\\.xls\\'" "libreoffice  ? &")
                                       ("\\.xlsx\\'" "libreoffice  ? &")
                                       ("\\.pptx\\'" "libreoffice  ? &")
                                       ("\\.doc\\'" "libreoffice  ? &")
                                       ("\\.docx\\'" "libreoffice  ? &")
                                       ("\\.pages\\'" "libreoffice  ? &")))

#+end_src

#+RESULTS:
| \.epub\'  | calibre ? &      |
| \.avi\'   | vlc ? &          |
| \.mp3\'   | vlc ? &          |
| \.mp4\'   | vlc ? &          |
| \.pdf\'   | evince  ? &      |
| \.djvu\'  | evince  ? &      |
| \.html\'  | chromium  ? &    |
| \.ods\'   | libreoffice  ? & |
| \.odt\'   | libreoffice  ? & |
| \.xls\'   | libreoffice  ? & |
| \.xlsx\'  | libreoffice  ? & |
| \.pptx\'  | libreoffice  ? & |
| \.doc\'   | libreoffice  ? & |
| \.docx\'  | libreoffice  ? & |
| \.pages\' | libreoffice  ? & |


Then avoid the "Async Shell Command" buffer:
(https://stackoverflow.com/questions/13901955/how-to-avoid-pop-up-of-async-shell-command-buffer-in-emacs)

#+begin_src emacs-lisp :tangle yes
(add-to-list 'display-buffer-alist
  (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
#+end_src

#+RESULTS:
| \*Async Shell Command\*.* | display-buffer-no-window        |                       |
| \*Bookmark List\*         | display-buffer-same-window      | (inhibit-same-window) |
| \*password-store\*        | display-buffer-same-window      | (inhibit-same-window) |
| \*cheatsheet\*            | display-buffer-same-window      | (inhibit-same-window) |
| \*stata\*                 | display-buffer-same-window      | (inhibit-same-window) |
| \*Python\*                | display-buffer-same-window      | (inhibit-same-window) |
| \*IPython\*               | display-buffer-same-window      | (inhibit-same-window) |
| \*IPython3\*              | display-buffer-same-window      | (inhibit-same-window) |
| \*shell\*                 | display-buffer-same-window      | (inhibit-same-window) |
| \`\*Calendar\*\'          | (display-buffer-below-selected) |                       |
| \*Calendar\*              | my-position-calendar-buffer     |                       |

** Open files in external programs
Open files in external programs (from http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html
Consider replacing with https://github.com/thamer/runner.

#+BEGIN_SRC emacs-lisp :tangle yes

  (defun xah-open-in-external-app (&optional file)
    "Open the current file or dired marked files in external app.
  The app is chosen from your OS's preference."
    (interactive)
    (let (doIt
          (myFileList
           (cond
            ((string-equal major-mode "dired-mode")
             (dired-get-marked-files))
            ((not file) (list (buffer-file-name)))
            (file (list file)))))
      (setq doIt (if (<= (length myFileList) 5)
                     t
                   (y-or-n-p "Open more than 5 files? ")))
      (when doIt
        (cond
         ((string-equal system-type "windows-nt")
          (mapc
           (lambda (fPath)
             (w32-shell-execute "open" (replace-regexp-in-string "/" "\\" fPath t t)))
           myFileList))
         ((string-equal system-type "darwin")
          (mapc
           (lambda (fPath)
             (shell-command (format "open \"%s\"" fPath)))
           myFileList))
         ((string-equal system-type "gnu/linux")
          (mapc
           (lambda (fPath)
             (let ((process-connection-type nil))
               (start-process "" nil "xdg-open" fPath))) myFileList))))))
  ;; use zip/unzip to compress/uncompress zip archives
  (with-eval-after-load "dired-aux"
    (add-to-list 'dired-compress-file-suffixes
                 '("\\.zip\\'" "" "unzip"))
    ;; open files from dired with "E"
    (define-key dired-mode-map (kbd "E") 'xah-open-in-external-app))

#+END_SRC

#+RESULTS:
: xah-open-in-external-app

** Alternativa 
- https://www.emacswiki.org/emacs/RunAssoc

#+begin_src emacs-lisp :tangle no

  (require 'run-assoc)
  (setq associated-program-alist
        '(("gnochm" "\\.chm$")
          ("evince" "\\.pdf$")
          ("mplayer" "\\.mp3$")
          ("evince" "\\.ps$")
          ((lambda (file)
             (browse-url (concat "file:///" (expand-file-name file)))) "\\.html?$")))

#+end_src

** Dired open multiple files
In dired mode, visit all marked files using. Bound to the "F" key.

#+source: dired-F
#+begin_src emacs-lisp :tangle yes
  (eval-after-load "dired"
    '(progn
       (define-key dired-mode-map "F" 'my-dired-find-file)
       (defun my-dired-find-file (&optional arg)
         "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
         (interactive "P")
         (let* ((fn-list (dired-get-marked-files nil arg)))
           (mapc 'find-file fn-list)))))
#+end_src

#+RESULTS: dired-F
: my-dired-find-file


** Directories first

First I set Dired listing options. 

- Originally, among the options there was a =p= in =-alDhp= but in https://www.reddit.com/r/emacs/comments/9flask/dired_mode_move_directory/ they explain that this causes failure when moving directories. 
   + The =p= flag to =ls= appends a slash (=/=) indicator to directories.
- Directories first: Then I added to option to list directories first that I found in https://www.emacswiki.org/emacs/DiredSorting
- Detailed date: Also, from https://emacs.stackexchange.com/questions/2722/dired-listing-switches-time-style-format-with-a-space I have added =--time-style \"+%m-%d-%Y %H:%M:%S\""=. Esta ha sido la clave para que Dired me dé la fecha completa. <<dired-date>>
- =-v= is for "natural sort of (version) numbers within text" but I think this screws up my alphabetically ordering.

#+BEGIN_SRC emacs-lisp :tangle yes
  (if (eq system-type 'gnu/linux)
      (setq dired-listing-switches "-laDGh1 --group-directories-first --time-style \"+%d-%m-%Y %H:%M:%S\""))

  (defun ensure-buffer-name-ends-in-slash ()
    "change buffer name to end with slash"
    (let ((name (buffer-name)))
      (if (not (string-match "/$" name))
          (rename-buffer (concat name "/") t))))

  (add-hook 'dired-mode-hook 'ensure-buffer-name-ends-in-slash)

  (add-hook 'dired-mode-hook
            (lambda()
              (setq truncate-lines 1)))
#+END_SRC

#+RESULTS:
| (lambda nil (let ((now (lookup-key dired-mode-map J))) (if (and now (not (eq now 'undefined))) nil (define-key dired-mode-map J 'bmkp-dired-jump)) (setq now (lookup-key dired-mode-map |

*** Notes on Sorting
By default, Dired uses ‘s’ to toggle between alphabetical and date order and with prefix argument, edit listing switches:

=C-u s= prompts for switches to sort the contents of the Dired buffer by: -t for time, newest 1st; -S for file size, largest 1st; -X for extension; -r for reversing; -U for directory order. Long live Emacs and its manual!

*** Pending issues

DGM 16 july 2019: Ojo: when Dired buffer sorted alphabetically, my powermode bar includes =-alDh --group-directories-first --time-style "+-Dired -alDh --group-directories-first= for some reason. This is meaningless there and leaves no room for time information, etc. It does not occur if I sort by date. Why?


** =dired= do what I mean
- Tip from
https://emacs.stackexchange.com/questions/5603/how-to-quickly-copy-move-file-in-emacs-dired

Work like two-panelled file manager if two dired buffers opened. Very cool!

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq dired-dwim-target t)
#+END_SRC

#+RESULTS:
: t


** Visit last dired buffer

#+begin_src emacs-lisp :tangle yes
  (defun hrs/visit-last-dired-file ()
    "Open the last file in an open dired buffer."
    (interactive)
    (end-of-buffer)
    (previous-line)
    (dired-find-file))
#+end_src

#+RESULTS:
: hrs/visit-last-dired-file

** dired-narrow

Narrow dired to match filter.  From: http://pragmaticemacs.com/emacs/dynamically-filter-directory-listing-with-dired-narrow/

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dired-narrow
    :defer t
    :bind (:map dired-mode-map
                ("/" . dired-narrow)))
#+END_SRC

* Settings taken from Emacs manual

From p. 339
In 344: 

=(setq dired-copy-preserve-time t)= not needed because it is alreay non-nil so copying with =C= preserves the modification time of the old file in the copy. 

#+begin_src emacs-lisp :tangle yes
(setq dired-isearch-filenames 'dwim)
(setq delete-by-moving-to-trash t)
#+end_src

#+RESULTS:
: t

** Auto-revert dired buffer 
.... automatically when you revisit it. See this link: [[pdfview:~/documents/programming/emacs/manuals/official/emacs-manual-26-2019.pdf::373][dired-auto-revert-buffer in manual]]

#+begin_src emacs-lisp :tangle yes
(setq dired-auto-revert-buffer t)
(setq auto-revert-verbose nil)
#+end_src

#+RESULTS:

** Automatic garbage collection for latex

p. 341. Syntax for customizing this from: https://oremacs.com/2015/01/21/dired-shortcuts/

#+begin_src emacs-lisp :tangle yes
  (setq dired-garbage-files-regexp
        "\\.fdb_latexmk$\\|\\.fls$\\|\\.synctex(busy)$\\|\\.bbl$\\|\\.aux$\\|\\.blg$\\|\\.bcf$\\|\\.out$\\|\\.nav$\\|\\.snm$\\|\\.rel$\\| \\.tag$\\|\\.pp$\\|\\.tag$\\|\\.synctex.gz$\\|\\(?:\\.\\(?:aux\\|bak\\|dvi\\|orig\\|rej\\|toc\\|pyg\\)\\)\\'")
#+end_src

#+RESULTS:
: \.fdb_latexmk$\|\.fls$\|\.synctex(busy)$\|\.bbl$\|\.aux$\|\.blg$\|\.bcf$\|\.out$\|\.nav$\|\.snm$\|\.rel$\| \.tag$\|\.pp$\|\.tag$\|\.synctex.gz$\|\(?:\.\(?:aux\|bak\|dvi\|orig\|rej\|toc\|pyg\)\)\'

** Editing the dired buffer like text

p. 352

#+begin_src emacs-lisp :tangle yes
(setq wdired-allow-to-change-permissions t)
#+end_src

#+RESULTS:
: t

* Duplicate files 

From: https://emacs.stackexchange.com/questions/60661/how-to-duplicate-a-file-in-dired

#+begin_src emacs-lisp :tangle yes

(defun dired-duplicate-this-file ()
  "Duplicate file on this line."
  (interactive)
  (let* ((this  (dired-get-filename t))
         (ctr   1)
         (new   (format "%s[%d]" this ctr)))
    (while (file-exists-p new)
      (setq ctr  (1+ ctr)
            new  (format "%s[%d]" this ctr)))
     (dired-copy-file this new nil))
  (revert-buffer))

#+end_src

#+RESULTS:
: dired-duplicate-this-file

* Provide

#+BEGIN_SRC emacs-lisp :tangle yes
(provide 'starter-kit-dired)
#+END_SRC


* Final message

#+begin_src emacs-lisp :tangle yes
  (message "Starter Kit Dired loaded.")
#+end_src
