# -*- coding: utf-8 -*-
# -*- find-file-hook: org-babel-execute-buffer -*-

#+TITLE: Starter Kit Misc
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Misc
Things that don't fit anywhere else.


* Font-face setup (PragmataPro)

Read:

https://emacs.stackexchange.com/questions/1030/how-can-i-set-different-font-sizes-for-buffers-and-for-the-mode-line

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; (font-family-list) for having all installed fonts

  (defun font-existsp (font)
    "Check to see if the named FONT is available."
    (if (null (x-list-fonts font))
        nil t))

  ;; To change the default font for the current and future frames
  ;; Affects the height of the mode-line (originally at 156)
  (set-face-attribute 'default nil :family "Pragmata Pro Mono" :height 180)
  (set-face-attribute 'fixed-pitch nil :family "Pragmata Pro Mono" :height 180)
  (set-face-attribute 'variable-pitch nil :family "Pragmata Pro" :height 180)

  ;; Mode-line (This is what shrinks the mode line)
  (set-face-attribute 'mode-line nil :font "Pragmata Pro Mono-14")

  ;; my function to reduce the mode-line on the flycheck

  (defun dgm/shrink-modeline ()
    "Shrinks font size in the modeline"
    (interactive)
    (set-face-attribute 'mode-line nil :font "Pragmata Pro Mono-14"))

  ;; I believe it is not needed.
  ;; (setq default-frame-alist '((font . "Pragmata Pro Mono-18")))

#+END_SRC

#+RESULTS:
: dgm/shrink-modeline

** Line-spacing tweak
Set this to a different number depending on taste and the font selected. The value can be a integer or decimal number. 
- If integer :: it means pixels, added below each line.
- If float :: (e.g 0.02): a scaling factor relative to current window's default line height.
if nil: add no extra spacing.

Tuned for Pragmata Pro at =0.09=. =0.06= originally

#+begin_src emacs-lisp :tangle yes

    (setq-default line-spacing 0.10)
    ;; no sé por qué me da error ahora
    ;; (add-to-list 'default-frame-alist '(line-spacing . 0.06))

#+end_src

#+RESULTS:
: 0.1

** Customize minibuffer's height

My change relates to height: changed from 2 to 10 in an attempt to raise the minibuffer and be able to see more... but it doesn't work!! 

#+begin_src emacs-lisp :tangle no

 (setq minibuffer-frame-alist
       '((width . 80) (height . 10)))

#+end_src

#+RESULTS:
: ((width . 80) (height . 10))

** Minions
- Bundle all minor modes under a =[+]= symbol
- Not compatible with =spaceline= out of the box
- Customizations I don't use now that I use =doom='s mode line
- How to make it compatible with =spaceline=.

#+BEGIN_EXAMPLE
  (setq display-time-24hr-format t)
  (setq display-time-default-load-average t)
  (setq display-time-mail-string "") ;; no mail alert
  (display-time-mode 1)
#+END_EXAMPLE

*** My original, working config
#+begin_src emacs-lisp :tangle no
  (use-package minions
;;    :after (circadian)
    :config
    (setq minions-mode-line-lighter "[+]")
    (minions-mode 1))

(global-set-key [S-down-mouse-3] 'minions-minor-modes-menu)
#+end_src

#+RESULTS:
: minions-minor-modes-menu

*** DW's config 

#+begin_src emacs-lisp :tangle yes

  (use-package minions
    :hook (doom-modeline-mode . minions-mode)
    :custom
    (minions-mode-line-lighter "[+]"))

#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24699 17168 341320 576000) :init (24699 17168 341315 678000) :init-secs (0 0 36 241000) :use-package-secs (0 0 107 976000) :config (24699 17168 341303 852000) :config-secs (0 0 3 797000)))

** My mode line 
https://emacs.stackexchange.com/questions/10033/change-mode-line-buffer-id-face-for-inactive-windows/22682#22682

It's working. But turned off to try DW's 

#+begin_src emacs-lisp :tangle no

  ;;;; Commented out as Polybar takes care of this now.
  ;; (setq display-time-day-and-date t)
  ;; (setq display-time-24hr-format t)
  ;; (display-time-mode 1)

  (defvar ml-selected-window nil)

  (defun ml-record-selected-window ()
    (setq ml-selected-window (selected-window)))

  (defun ml-update-all ()
    (force-mode-line-update t))

  (add-hook 'post-command-hook 'ml-record-selected-window)

  (add-hook 'buffer-list-update-hook 'ml-update-all)

  (defface ml-active-window-face
    '((t (:foreground "#b58900")))
    "Face for active buffer identification.")

  (defface ml-inactive-window-face
    '((t (:foreground "#696969")))
    "Face for inactive buffer identification.")

  (defun ml-propertized-buffer-identification (fmt)
    "Return a list suitable for `mode-line-buffer-identification'.
  FMT is a format specifier such as \"%12b\".  This function adds
  text properties for face, help-echo, and local-map to it."
    (list (propertize fmt
                      'face
                      (if (eq ml-selected-window (selected-window))
                          'ml-active-window-face
                        'ml-inactive-window-face)
                      'help-echo
                      (purecopy "Buffer name
  mouse-1: Previous buffer\nmouse-3: Next buffer")
                      'mouse-face 'mode-line-highlight
                      'local-map mode-line-buffer-identification-keymap)))

  (setq-default mode-line-buffer-identification
                '(:eval (ml-propertized-buffer-identification "%12b")))

  (defun dgm/send-polybar-hook (module-name hook-index)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun dgm/send-polybar-exwm-workspace () 
    (dgm/send-polybar-hook "exwm-workspace" 1))

#+end_src

#+RESULTS:
: dgm/send-polybar-exwm-workspace

** DW's modeline config with doom-modeline
[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp :tangle no

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24689 35712 304431 34000) :init (24689 35712 304424 302000) :config (24689 35712 304283 121000) :config-secs (0 0 3 727000) :init-secs (0 0 590 463000) :use-package-secs (0 0 904 235000)))

More sophisticated config:

#+begin_src emacs-lisp :tangle yes

  (use-package doom-modeline
    :after eshell     ;; Make sure it gets hooked after eshell
    :hook (after-init . doom-modeline-init)
    :custom-face
    (mode-line ((t (:height 1.0)))) ;; 0.95
    (mode-line-inactive ((t (:height 0.75))))
    (mode-line-buffer-modified ((t :foreground "orange")))
    :custom
    (doom-modeline-height 10)     ;; 15
    (doom-modeline-bar-width 6)   ;; 6
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-irc nil)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-mode-icon t)
    :config
    (setq doom-modeline-icon t)
    (column-number-mode t))
 
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24699 6088 115789 610000) :use-package-secs (0 0 7375 996000) :init (24699 6088 115764 922000) :init-secs (0 0 1873 309000) :config (24699 6088 115747 941000) :config-secs (0 0 1839 697000)))

#+begin_src emacs-lisp :tangle yes

  (defun doom-modeline-conditional-buffer-encoding ()
    "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
    (setq-local doom-modeline-buffer-encoding
                (unless (and (memq (plist-get (coding-system-plist buffer-file-coding-system) :category)
                                   '(coding-category-undecided coding-category-utf-8))
                             (not (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
                  t)))

  (add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)

#+end_src

#+RESULTS:
| doom-modeline-conditional-buffer-encoding | magit-auto-revert-mode-enable-in-buffers | global-company-mode-enable-in-buffers | doom-modeline-update-buffer-file-icon | activate-default-input-method | git-commit-setup-font-lock-in-buffer | global-vi-tilde-fringe-mode-enable-in-buffers | global-subword-mode-enable-in-buffers | global-undo-tree-mode-enable-in-buffers | global-visual-line-mode-enable-in-buffers | ess-r-package-auto-activate | yas-global-mode-enable-in-buffers | delight-major-mode | global-eldoc-mode-enable-in-buffers | global-font-lock-mode-enable-in-buffers | which-func-ff-hook |


** Color Themes
Emacs 24 introduces a streamlined theming system that replaces an
older, messier one. The Starter Kit comes with Ethan Schoonover's
/Solarized/ color theme and the /Zenburn/ theme, in versions
maintained by Bozhidar Batsov. Load it with =M-x load-theme
solarized-dark= or =M-x load-theme solarized-light=. You can also try
loading the =zenburn= and =anti-zenburn= themes. 


*** Theme customization
Add =(setq custom-safe-themes t)= to your init file before you load your theme.
This will treat all themes as safe, which could be a risk in theory, but if 
you are only installing themes from trusted sources, I don't see any issue 
 https://emacs.stackexchange.com/questions/18932/stop-emacs-asking-if-a-theme-is-safe

If you don't set this up, then =load-theme= does not work.

#+source: colors
#+begin_src emacs-lisp :tangle yes
(add-to-list 'custom-theme-load-path "~/.emacs.d/elpa")
(setq custom-safe-themes t)
#+end_src

#+RESULTS: colors
: t

*** Solarized Theme

New, simplified customization. I leave =(load-theme 'solarized-light t)= as I guess the theme is chosen according to the time.

#+begin_src emacs-lisp :tangle yes

  (use-package solarized-theme
    :init
    ;; these settings need to be set before load-theme is invoked for Solarized.
    (setq solarized-distinct-fringe-background t) ;; make the fringe stand out from the background 
    (setq solarized-use-variable-pitch nil)       ;; Don't change the font for some headings and titles
    (setq solarized-high-contrast-mode-line t)  ;; make the modeline high contrast (change to t if you want it)
    ;;  (setq solarized-use-less-bold t)          ;; Use less bolding
    ;;  (setq solarized-use-more-italic t)        ;; Use more italics
    (setq solarized-emphasize-indicators nil)     ;; Use less colors for indicators such as git: gutter, flycheck and similar
    (setq solarized-scale-org-headlines nil)      ;; Don't change size of org-mode headlines (but keep other size-changes)
    ;; Avoid all font-size changes
    (setq solarized-height-minus-1 1.0)
    (setq solarized-height-plus-1 1.0)
    (setq solarized-height-plus-2 1.0)
    (setq solarized-height-plus-3 1.0)
    (setq solarized-height-plus-4 1.0)
    (setq x-underline-at-descent-line t)
    ;; Use less bolding
    (setq solarized-use-less-bold t)
    ;; Put the underline below the font bottomline instead of the baseline.
    (setq x-underline-at-descent-line t))

#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24709 8344 109024 507000) :init (24709 8344 109007 948000) :config (24709 8344 108664 943000) :config-secs (0 0 9 73000) :init-secs (0 0 701 895000) :use-package-secs (0 0 786 984000)))

**** Tweaking solarized theme
Examples taken from https://github.com/bbatsov/solarized-emacs

$base03:    #002b36;
$base02:    #073642;
$base01:    #586e75;
$base00:    #657b83;
$base0:     #839496;
$base1:     #93a1a1;
$base2:     #eee8d5;
$base3:     #fdf6e3;
$yellow:    #b58900;
$orange:    #cb4b16;
$red:       #dc322f;
$magenta:   #d33682;
$violet:    #6c71c4;
$blue:      #268bd2;
$cyan:      #2aa198;
$green:     #859900;

   + #e9e2cb is the creamy-white color from solarized,
   + and #2075c7 is the blue colour. 

  ;; Solarized accented colors
  (yellow    "#b58900")
  (orange    "#cb4b16")
  (red       "#dc322f")
  (magenta   "#d33682")
  (violet    "#6c71c4")
  (blue      "#268bd2")
  (cyan      "#2aa198")
  (green     "#859900")

The Solarized Face settings consist of a palette of colors with eight accents in addition to the darkest and brightest colors. Recent changes allow you to freely create theme files using different palettes instead of the Solarized color palette. It consists of two steps: creating a theme file and loading a theme.
Creating/Loading Theme Files

Select the darkest and lightest colors and the eight accents to pass to the function. This creates a theme file in .emacs.d/themes/. If you need to make minor modifications, you can override Face individually by specifying a free Sexp as the fourth argument.

Once you have a theme file, you can load it with load-theme, like solarized.


#+begin_src emacs-lisp :tangle yes

  ;; dgm's solarized color-theme: A less vibrant palette
  (solarized-create-theme-file-with-palette 'dark 'solarized-dgm
    '("#002b36" "#fdf6e3"  
      "#b58900" "#cb4b16" "#8b4500" "#eee8d5" "#6c71c4" "#268bd2" "#2aa198" "#859900"))            
                                  ;; #8b3a3a
  ;;      "#8b8b00" "#8b5a00" "#8b36s26" "#93115C" "#6c71c4" "#268bd2" "#2aa198" "#546E00"))            
  ;; "#8b795e" "#8b8378" "#4f94cd"  "#2075c7" "#4682b4" "#268bd2" "#2aa198" "#546E00")) 
  ;; "#839496"
  ;; #93a1a1
  ;;    "#8b8b00" "#8b5a00" "#8b3626" "#93115C" "#6c71c4" "#268bd2" "#2aa198" "#546E00"))          
  ;;
  ;;   #b58900   #cb4b16   #dc322f   #8b008b             #2075c7             #859900       
  ;;                         #8B2C02                                         #B4C342
  ;;                         #8b3626
  ;;                         #990A1B
  ;;                         #8b3626
  ;; "#8b795e"
  ;; "#Cdb38b" "#839496" SteelBlue

  ;; (load-theme 'solarized-dgm)

  ;; inspired vim's jellybeans color-theme
  (solarized-create-theme-file-with-palette 'light 'solarized-jellybeans-light
    '("#202020" "#ffffff"
      "#ffb964" "#8fbfdc" "#a04040" "#b05080" "#805090" "#fad08a" "#99ad6a" "#8fbfdc"))

  ;; (load-theme 'solarized-jellybeans-light t)


  ;; inspired emacs's mesa color-theme
  (solarized-create-theme-file-with-palette 'light 'solarized-mesa-light
    '("#000000" "#faf5ee"
      "#3388dd" "#ac3d1a" "#dd2222" "#8b008b" "#00b7f0" "#1388a2" "#104e8b" "#00688b"))

  ;; (load-theme 'solarized-mesa-light t)


  ;; inspired emacs's solarized color-theme
  (solarized-create-theme-file-with-palette 'light 'solarized-solarized-light
    '("#002b36" "#fdf6e3"
      "#b58900" "#cb4b16" "#dc322f" "#d33682" "#6c71c4" "#268bd2" "#2aa198" "#859900"))

  ;; (load-theme 'solarized-solarized-light t)


  ;; wombat color-theme with misc face definition
  (solarized-create-theme-file-with-palette 'dark 'solarized-wombat-dark
    '("#2a2a29" "#f6f3e8"
      "#e5c06d" "#ddaa6f" "#ffb4ac" "#e5786d" "#834c98" "#a4b5e6" "#7ec98f" "#8ac6f2")
    '((custom-theme-set-faces
       theme-name
       `(default ((,class (:foreground ,(solarized-color-blend base03 base3 0.15 2) :background ,base03))))
       `(highlight ((,class (:background ,violet))))
       `(font-lock-builtin-face ((,class (:foreground ,magenta))))
       `(font-lock-constant-face ((,class (:foreground ,blue))))
       `(font-lock-comment-face ((,class (:foreground ,base00))))
       `(mode-line
         ((,class (:foreground ,base2 :background ,(solarized-color-blend base03 base3 0.85 2)))))
       `(mode-line-inactive
         ((,class (:foreground ,base00 :background ,(solarized-color-blend base03 "black" 0.85 2)))))
       `(mode-line-buffer-id ((,class (:foreground ,base3 :weight bold))))
       `(minibuffer-prompt ((,class (:foreground ,base1))))
       `(vertical-border ((,class (:foreground ,base03)))))))

  ;; (load-theme 'solarized-wombat-dark t)

#+end_src

#+RESULTS:
: /home/dgm/.emacs.d/themes/solarized-wombat-dark.el




*** Other themes

#+begin_src emacs-lisp :tangle yes

  (use-package poet-theme)
  (use-package tao-theme)
  (use-package nord-theme)
  (use-package modus-themes)

#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24712 10576 773826 588000) :init (24712 10576 773814 908000) :config (24712 10576 773474 285000) :config-secs (0 0 12 112000) :init-secs (0 0 655 506000) :use-package-secs (0 0 757 268000)))


*** Change theme depending on hour of day
- From 9 am to 8 pm, light theme. Otherwise, dark theme.
- https://blog.jft.rocks/emacs/time-based-theme.html
- Disabled so that I simplify it

Note that I've moved this

#+BEGIN_EXAMPLE
    (set-face-attribute 'helm-selection nil 
                        :background nil
                        :foreground "Orange3")
    (set-face-attribute 'helm-source-header
                        nil
                        :foreground "#dcdcdc")
#+END_EXAMPLE

to the function =get-s;paceline-working=

#+begin_src emacs-lisp :tangle yes
  (defun set-light-theme ()
    "Set the light theme with some customization if needed."
    (interactive)
    (load-theme 'solarized-light t)
    (dgm/shrink-modeline))

  (defun set-dark-theme ()
    "Set the dark theme with some customization if needed."
    (interactive)
    (load-theme 'solarized-dgm t)
    (dgm/shrink-modeline))
  ;; solarized-dark originally

  ;;(let ((current-hour (string-to-number (format-time-string "%H"))))
  ;;    (if (or (< current-hour 10) (> current-hour 19)) (set-dark-theme) (set-light-theme)))
#+end_src

#+RESULTS:
: set-dark-theme


*** Same as my switching of themes based on time, but using the Circadian package

Other dark themes I like:
- solarized-zenburn
- doom-nord
- doom-solarized-dark

#+begin_src emacs-lisp :tangle yes

  (use-package circadian
    :init (minions-mode 1)  
    :config
    (setq calendar-latitude 40.4)
    (setq calendar-longitude -3.7)
    (setq circadian-themes '((:sunrise . solarized-light)
                             (:sunset  . solarized-dgm)))
    (circadian-setup)
    (dgm/shrink-modeline))
  ;;    (setq circadian-themes '((:sunrise . tao-yang)
  ;;                             (:sunset  . tao-yin)))

#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24720 22891 718293 282000) :init (24720 22891 718279 600000) :config (24720 22891 717872 115000) :config-secs (0 0 6354 565000) :init-secs (0 0 7263 994000) :use-package-secs (0 0 7402 574000)))

** More Color Themes with Doom

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp :tangle yes

  (use-package doom-themes
    :commands counsel-load-theme)

#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24608 5010 859926 262000) :init (24608 5010 859901 980000) :config (24608 5010 859859 116000) :config-secs (0 0 17 290000) :init-secs (0 0 132 216000) :use-package-secs (0 0 300 622000)))

** Protesilaos Stavrou's themes

#+begin_src emacs-lisp :tangle no

(use-package modus-themes
  :ensure                         ; omit this to use the built-in themes
  :init
  ;; Add all your customizations prior to loading the themes
  (setq modus-themes-slanted-constructs t
        modus-themes-bold-constructs nil
        modus-themes-region 'no-extend)

  ;; Load the theme files before enabling a theme (else you get an error).
  (modus-themes-load-themes)
  :config
  ;; Load the theme of your choice:
  (modus-themes-load-operandi) ;; OR (modus-themes-load-vivendi)
  :bind ("<f5>" . modus-themes-toggle))

#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24699 17929 964290 808000) :init (24699 17929 964228 374000) :config (24699 17929 964220 572000) :config-secs (0 2 928481 212000) :init-secs (0 2 928541 941000) :use-package-secs (0 2 928706 561000)))

** Transparently open compressed files
#+begin_src emacs-lisp :tangle yes
(auto-compression-mode t)
#+end_src

** COMMENT Enable syntax highlighting 
#+begin_src emacs-lisp :tangle yes
;;(global-font-lock-mode t)
#+end_src

** Show Menu Bar in Window but not in tty
If launching Emacs as in windowing system, show the menu. If launching in a tty/terminal window, don't display the menu.

Note by dgm on 16 sept 2018: I'm trying to use =exwm= so I am not going to use menu-bar-mode.
#+source: starter-kit-no-menu-in-tty
#+begin_src emacs-lisp :tangle no
;;  (if window-system
;      (menu-bar-mode t)
;;      (menu-bar-mode -1)
;;      )
#+end_src

#+RESULTS: starter-kit-no-menu-in-tty

** Save place last visited in buffer
The `saveplace` library saves the location of the point when you kill a buffer and returns to it next time you visit the associated file

#+srcname: starter-kit-saveplace
#+begin_src emacs-lisp :tangle yes
;; Code by Kieran Healy:
;; saveplace remembers your location in a file when saving files
;;  (require 'saveplace)
;;  (setq-default save-place t) for Emacs below 24.4
;;  (toggle-save-place-globally 1) ;; in Emacs above 24.4

;; My code
;; (require 'saveplace)
;; I comment saveplace out because in the documentation it says: "For GNU Emacs 25.1 and newer versions
;; Note that saveplace is auto-loaded by save-place-mode. So you do not need to explicitly require it.

  (save-place-mode 1)
#+end_src

#+RESULTS: starter-kit-saveplace
: t

#+RESULTS:
: t

** ido mode and flx-ido
Ido-mode is like magic pixie dust!

#+srcname: starter-kit-loves-ido-mode
#+begin_src emacs-lisp :tangle yes 
;;  (when (> emacs-major-version 21)
;;    (require 'flx-ido) 
;;    (ido-mode t)
;;    (ido-everywhere 1)
;;    (setq ido-enable-prefix nil
;;          ido-enable-flex-matching t
;;          ido-create-new-buffer 'always
;;          ido-use-filename-at-point nil
;;          ido-use-faces nil
;;          ido-max-prospects 10))                    
#+end_src

New setup from https://github.com/danielmai/.emacs.d/blob/master/config.org 
But I disable it as of 12 nov 2019 because it seems that you have to choose either helm or ido! 
See https://github.com/emacs-helm/helm/issues/2085 and https://github.com/emacs-helm/helm/wiki/FAQ#helm-mode-conflict-with-ido-everywhere
and https://github.com/emacs-helm/helm/issues/1527 and, finally, https://github.com/emacs-helm/helm/wiki where it says 

*** Customize helm-mode

To customize the completion interface or disable completion for specific commands in helm-mode, edit helm-completing-read-handlers-alist. See C-h v helm-completing-read-handlers-alist for details.

*** Use helm-mode and ido-mode

To use Ido for some commands and Helm for others, do not enable ido-mode. Instead, customize helm-completing-read-handlers-alist to specify which command uses Ido.

For example, suppose we want find-file-read-only to use Ido and find-file to use Helm. Then:

In your init file, turn on helm-mode.
In the helm-mode customize group, add a key to helm-completing-read-handlers-alist for find-file-read-only with value ido, i.e.

(find-file-read-only . ido)

With helm-mode active, to use Emacs default completion instead of either Helm or Ido, use nil for the key value:

(find-alternate-file . nil)


#+BEGIN_SRC emacs-lisp :tangle yes
;;(use-package ido
;;  :ensure t
;;  :init
;;  (setq ido-enable-prefix nil
;;        ido-enable-flex-matching t
;;        ido-create-new-buffer 'always
;;        ido-use-filename-at-point 'guess ;; changed from nil. If intrusive, revert to nil
;;        ido-use-faces nil             
;;        ido-max-prospects 10
;;        ido-everywhere nil ;; t conflicts with helm sometimes. See https://github.com/emacs-helm/helm/issues/2085
;;        ido-mode t)
;;  (use-package flx-ido
;;    :ensure t) 
(use-package ido-vertical-mode
    :init (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only)
    (setq ido-vertical-show-count t))

(set-face-attribute 'ido-vertical-first-match-face nil
                    :background nil
                    :foreground "#b58900")
(set-face-attribute 'ido-vertical-only-match-face nil
                    :background nil
                    :foreground nil)
(set-face-attribute 'ido-vertical-match-face nil
                    :foreground nil)
#+END_SRC

#+RESULTS:

** Other, tabs, imenu and a coding hook
#+begin_src emacs-lisp :tangle yes 
  (set-default 'indent-tabs-mode nil)
  (set-default 'indicate-empty-lines t)
  (set-default 'imenu-auto-rescan t)
  
  (add-hook 'text-mode-hook 'turn-on-auto-fill)

;; dgm, 1 july 2017: turn flyspell off
;;  (add-hook 'text-mode-hook 'turn-on-flyspell)
;;  (add-hook 'LaTeX-mode-hook 'turn-on-flyspell)
;;  (add-hook 'markdown-mode-hook 'turn-on-flyspell)
;;  (add-hook 'org-mode-hook 'turn-on-flyspell)
  
  (defvar starter-kit-coding-hook nil
    "Hook that gets run on activation of any programming mode.")
  
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Seed the random-number generator
  (random t)

;; Istan Zahn uses this instea: (https://github.com/izahn/dotemacs)
;; Use y/n instead of yes/no
;; (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** functions for prettier source code
#+begin_src emacs-lisp :tangle yes
(defun starter-kit-pretty-lambdas ()
  (font-lock-add-keywords
   nil `(("(\\(lambda\\>\\)"
          (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                    ,(make-char 'greek-iso8859-7 107))
                    nil))))))
#+end_src

#+RESULTS:
: starter-kit-pretty-lambdas

** Hippie expand: at times perhaps too hip

#+begin_src emacs-lisp :tangle yes
(delete 'try-expand-line hippie-expand-try-functions-list)
(delete 'try-expand-list hippie-expand-try-functions-list)
#+end_src

** Don't clutter up directories with files~
#+begin_src emacs-lisp :tangle yes
(setq backup-directory-alist `(("." . ,(expand-file-name
                                        (concat dotfiles-dir "backups")))))
#+end_src

** Associate modes with file extensions
#+begin_src emacs-lisp :tangle yes

(add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . diff-mode))
(add-to-list 'auto-mode-alist '("\\.css$" . css-mode))
;; (require 'yaml-mode) ;; dgm comments out as I don't know what it is for
;; (add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))

#+end_src


** Default to unified diffs
From documentation: A string or list of strings specifying switches to be passed to =diff=.
=-u, -U NUM, --unified[=NUM]= is an option for: "output NUM (default 3) lines of unified context" (man pages for =diff=).

#+begin_src emacs-lisp :tangle yes

(setq diff-switches "-u")

#+end_src


* Provide

#+BEGIN_SRC emacs-lisp :tangle yes

(provide 'starter-kit-misc)

#+END_SRC

#+RESULTS:
: starter-kit-misc

* Final Message

#+source: message-line
#+begin_src emacs-lisp :tangle yes

  (message "Starter Kit Misc loaded.")

#+end_src
