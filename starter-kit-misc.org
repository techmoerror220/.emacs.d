# -*- coding: utf-8 -*-
# -*- find-file-hook: org-babel-execute-buffer -*-

#+TITLE: Starter Kit Misc
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Misc
Things that don't fit anywhere else.

** Minions
- Bundle all minor modes under a =[+]= symbol
- Not compatible with =spaceline= out of the box
- Customizations I do without now that I use =spaceline=:
- How to make it compatible with =spaceline=.

#+BEGIN_EXAMPLE
  (setq display-time-24hr-format t)
  (setq display-time-default-load-average t)
  (setq display-time-mail-string "") ;; no mail alert
  (display-time-mode 1)
#+END_EXAMPLE

#+begin_src emacs-lisp :tangle yes
  (use-package minions
;;    :after (circadian)
    :init (minions-mode 1)
    :config
    (setq minions-mode-line-lighter "[+]"))

(global-set-key [S-down-mouse-3] 'minions-minor-modes-menu)
#+end_src

#+RESULTS:
: minions-minor-modes-menu

** My mode line 
https://emacs.stackexchange.com/questions/10033/change-mode-line-buffer-id-face-for-inactive-windows/22682#22682

#+begin_src emacs-lisp :tangle yes
(setq display-time-day-and-date t)
(setq display-time-24hr-format t)
(display-time-mode 1)

(defvar ml-selected-window nil)

(defun ml-record-selected-window ()
  (setq ml-selected-window (selected-window)))

(defun ml-update-all ()
  (force-mode-line-update t))

(add-hook 'post-command-hook 'ml-record-selected-window)

(add-hook 'buffer-list-update-hook 'ml-update-all)

(defface ml-active-window-face
   '((t (:foreground "#b58900")))
   "Face for active buffer identification.")

(defface ml-inactive-window-face
   '((t (:foreground "#696969")))
   "Face for inactive buffer identification.")

(defun ml-propertized-buffer-identification (fmt)
  "Return a list suitable for `mode-line-buffer-identification'.
FMT is a format specifier such as \"%12b\".  This function adds
text properties for face, help-echo, and local-map to it."
  (list (propertize fmt
        'face
          (if (eq ml-selected-window (selected-window))
            'ml-active-window-face
            'ml-inactive-window-face)
        'help-echo
        (purecopy "Buffer name
mouse-1: Previous buffer\nmouse-3: Next buffer")
        'mouse-face 'mode-line-highlight
        'local-map mode-line-buffer-identification-keymap)))

(setq-default mode-line-buffer-identification
  '(:eval (ml-propertized-buffer-identification "%12b")))
#+end_src

#+RESULTS:
| :eval | (ml-propertized-buffer-identification %12b) |


** Color Themes
Emacs 24 introduces a streamlined theming system that replaces an
older, messier one. The Starter Kit comes with Ethan Schoonover's
/Solarized/ color theme and the /Zenburn/ theme, in versions
maintained by Bozhidar Batsov. Load it with =M-x load-theme
solarized-dark= or =M-x load-theme solarized-light=. You can also try
loading the =zenburn= and =anti-zenburn= themes. 


*** Theme customization
Add =(setq custom-safe-themes t)= to your init file before you load your theme.
This will treat all themes as safe, which could be a risk in theory, but if 
you are only installing themes from trusted sources, I don't see any issue 
 https://emacs.stackexchange.com/questions/18932/stop-emacs-asking-if-a-theme-is-safe

If you don't set this up, then =load-theme= does not work.

#+source: colors
#+begin_src emacs-lisp :tangle yes
(add-to-list 'custom-theme-load-path "~/.emacs.d/elpa")
(setq custom-safe-themes t)
#+end_src

#+RESULTS: colors
: t


*** Solarized Theme

New, simplified customization. I leave =(load-theme 'solarized-light t)= as I guess the theme is chosen according to the time.

#+begin_src emacs-lisp :tangle yes
  (use-package solarized-theme
    :init 
    (setq solarized-distinct-fringe-background t) ;; make the fringe stand out from the background 
    (setq solarized-use-variable-pitch nil)       ;; Don't change the font for some headings and titles
    (setq solarized-high-contrast-mode-line nil)  ;; make the modeline high contrast (change to t if you want it)
    ;;  (setq solarized-use-less-bold t)          ;; Use less bolding
    ;;  (setq solarized-use-more-italic t)        ;; Use more italics
    (setq solarized-emphasize-indicators nil)     ;; Use less colors for indicators such as git: gutter, flycheck and similar
    (setq solarized-scale-org-headlines nil)      ;; Don't change size of org-mode headlines (but keep other size-changes)
    ;; Avoid all font-size changes
    (setq solarized-height-minus-1 1.0)
    (setq solarized-height-plus-1 1.0)
    (setq solarized-height-plus-2 1.0)
    (setq solarized-height-plus-3 1.0)
    (setq solarized-height-plus-4 1.0)
    (setq x-underline-at-descent-line t))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24463 13727 622135 792000) :init (24463 13727 622118 656000) :config (24463 13727 621806 582000) :config-secs (0 0 9 912000) :init-secs (0 0 628 310000) :use-package-secs (0 0 740 55000)))

*** Change theme depending on hour of day
- From 9 am to 8 pm, light theme. Otherwise, dark theme.
- https://blog.jft.rocks/emacs/time-based-theme.html
- Disabled so that I simplify it

Note that I've moved this

#+BEGIN_EXAMPLE
    (set-face-attribute 'helm-selection nil 
                        :background nil
                        :foreground "Orange3")
    (set-face-attribute 'helm-source-header
                        nil
                        :foreground "#dcdcdc")
#+END_EXAMPLE

to the function =get-spaceline-working=

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun set-light-theme ()
    "Set the light theme with some customization if needed."
    (interactive)
    (load-theme 'solarized-light t))

  (defun set-dark-theme ()
    "Set the dark theme with some customization if needed."
    (interactive)
    (load-theme 'solarized-dark t))

  ;;(let ((current-hour (string-to-number (format-time-string "%H"))))
  ;;    (if (or (< current-hour 10) (> current-hour 19)) (set-dark-theme) (set-light-theme)))
#+END_SRC

#+RESULTS:
: set-dark-theme


*** Same as my switching of themes based on time, but using the Circadian package

#+begin_src emacs-lisp :tangle yes
  (use-package circadian
    :config
    (setq calendar-latitude 40.4)
    (setq calendar-longitude -3.7)
    (setq circadian-themes '((:sunrise . solarized-light)
                             (:sunset  . solarized-dark)))
    (minions-mode 1)  
    (circadian-setup))
  ;;    (setq circadian-themes '((:sunrise . tao-yang)
  ;;                             (:sunset  . tao-yin)))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24463 13741 994955 24000) :init (24463 13741 994947 477000) :init-secs (0 2 587425 218000) :use-package-secs (0 2 587556 295000) :config (24463 13741 994831 72000) :config-secs (0 0 2997 664000)))

** Window system 

#+srcname: starter-kit-window-view-stuff
#+begin_src emacs-lisp :tangle yes 
    (when window-system
;;      (setq frame-title-format '(buffer-file-name "%f" ("%b")))
      (setq frame-title-format (concat "%b" (unless (daemonp) " [serverless]"))) ;; from ambrevar's main.el
      (tooltip-mode -1)
      (blink-cursor-mode -1)) ;; I include this blink-cursor-mode again because sometimes it disappears and maybe turning this fixes it.
;;      (tool-bar-mode -1)) ;; already in minimal.el

;; alternative de malb dot files to display buffer name in frame titles
;; (setq frame-title-format
;;      '("" (:eval (replace-regexp-in-string "^ +" "" (buffer-name)))
;;        " - " invocation-name))


    (mouse-wheel-mode t)

    (setq visible-bell t
          echo-keystrokes 0.1
;;          font-lock-maximum-decoration t  ;; dgm turned this off as emacs was way too slow with it but now, with my new EXWM setting I want to give it a chance
;;          font-lock-maximum-decoration 1 ;; originally it was true, then nil and then 1, the minimum level, to see if this speeds up things. And I think it does. 
          font-lock-verbose nil
          inhibit-startup-message t
          transient-mark-mode t
        ;;  color-theme-is-global t
          shift-select-mode nil
          truncate-partial-width-windows nil
          whitespace-style '(trailing lines space-before-tab
                                      indentation space-after-tab)
          whitespace-line-column 100
          ediff-window-setup-function 'ediff-setup-windows-plain
          ediff-split-window-function 'split-window-horizontally
          oddmuse-directory (concat dotfiles-dir "oddmuse")
          xterm-mouse-mode t
          save-place-file (concat dotfiles-dir "places"))
#+end_src

#+RESULTS: starter-kit-window-view-stuff
: /home/dgm/.emacs.d/places

** Turn on Minimal mode
Thin window dividers and no scroll bars. Toggle with `C-c C-s`.

#+source: minimal-mode-on
#+begin_src emacs-lisp :tangle yes
(minimal-mode)
#+end_src

#+RESULTS: minimal-mode-on
: t

** Transparently open compressed files
#+begin_src emacs-lisp :tangle yes
(auto-compression-mode t)
#+end_src

** COMMENT Enable syntax highlighting 
#+begin_src emacs-lisp :tangle yes
;;(global-font-lock-mode t)
#+end_src

** Show Menu Bar in Window but not in tty
If launching Emacs as in windowing system, show the menu. If launching in a tty/terminal window, don't display the menu.

Note by dgm on 16 sept 2018: I'm trying to use =exwm= so I am not going to use menu-bar-mode.
#+source: starter-kit-no-menu-in-tty
#+begin_src emacs-lisp :tangle yes
;;  (if window-system
;      (menu-bar-mode t)
;;      (menu-bar-mode -1)
;;      )
#+end_src

#+RESULTS: starter-kit-no-menu-in-tty

** Save place last visited in buffer
The `saveplace` library saves the location of the point when you kill a buffer and returns to it next time you visit the associated file

#+srcname: starter-kit-saveplace
#+begin_src emacs-lisp :tangle yes
;; Code by Kieran Healy:
;; saveplace remembers your location in a file when saving files
;;  (require 'saveplace)
;;  (setq-default save-place t) for Emacs below 24.4
;;  (toggle-save-place-globally 1) ;; in Emacs above 24.4

;; My code
;; (require 'saveplace)
;; I comment saveplace out because in the documentation it says: "For GNU Emacs 25.1 and newer versions
;; Note that saveplace is auto-loaded by save-place-mode. So you do not need to explicitly require it.

  (save-place-mode 1)
#+end_src

#+RESULTS: starter-kit-saveplace
: t

#+RESULTS:
: t

** ido mode and flx-ido
Ido-mode is like magic pixie dust!

#+srcname: starter-kit-loves-ido-mode
#+begin_src emacs-lisp :tangle yes 
;;  (when (> emacs-major-version 21)
;;    (require 'flx-ido) 
;;    (ido-mode t)
;;    (ido-everywhere 1)
;;    (setq ido-enable-prefix nil
;;          ido-enable-flex-matching t
;;          ido-create-new-buffer 'always
;;          ido-use-filename-at-point nil
;;          ido-use-faces nil
;;          ido-max-prospects 10))                    
#+end_src

New setup from https://github.com/danielmai/.emacs.d/blob/master/config.org 
But I disable it as of 12 nov 2019 because it seems that you have to choose either helm or ido! 
See https://github.com/emacs-helm/helm/issues/2085 and https://github.com/emacs-helm/helm/wiki/FAQ#helm-mode-conflict-with-ido-everywhere
and https://github.com/emacs-helm/helm/issues/1527 and, finally, https://github.com/emacs-helm/helm/wiki where it says 

*** Customize helm-mode

To customize the completion interface or disable completion for specific commands in helm-mode, edit helm-completing-read-handlers-alist. See C-h v helm-completing-read-handlers-alist for details.

*** Use helm-mode and ido-mode

To use Ido for some commands and Helm for others, do not enable ido-mode. Instead, customize helm-completing-read-handlers-alist to specify which command uses Ido.

For example, suppose we want find-file-read-only to use Ido and find-file to use Helm. Then:

In your init file, turn on helm-mode.
In the helm-mode customize group, add a key to helm-completing-read-handlers-alist for find-file-read-only with value ido, i.e.

(find-file-read-only . ido)

With helm-mode active, to use Emacs default completion instead of either Helm or Ido, use nil for the key value:

(find-alternate-file . nil)


#+BEGIN_SRC emacs-lisp :tangle yes
;;(use-package ido
;;  :ensure t
;;  :init
;;  (setq ido-enable-prefix nil
;;        ido-enable-flex-matching t
;;        ido-create-new-buffer 'always
;;        ido-use-filename-at-point 'guess ;; changed from nil. If intrusive, revert to nil
;;        ido-use-faces nil             
;;        ido-max-prospects 10
;;        ido-everywhere nil ;; t conflicts with helm sometimes. See https://github.com/emacs-helm/helm/issues/2085
;;        ido-mode t)
;;  (use-package flx-ido
;;    :ensure t) 
(use-package ido-vertical-mode
    :defer t
    :init (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only)
    (setq ido-vertical-show-count t))

(set-face-attribute 'ido-vertical-first-match-face nil
                    :background nil
                    :foreground "#b58900")
(set-face-attribute 'ido-vertical-only-match-face nil
                    :background nil
                    :foreground nil)
(set-face-attribute 'ido-vertical-match-face nil
                    :foreground nil)
#+END_SRC

#+RESULTS:

** Other, tabs, imenu and a coding hook
#+begin_src emacs-lisp :tangle yes 
  (set-default 'indent-tabs-mode nil)
  (set-default 'indicate-empty-lines t)
  (set-default 'imenu-auto-rescan t)
  
  (add-hook 'text-mode-hook 'turn-on-auto-fill)

;; dgm, 1 july 2017: turn flyspell off
;;  (add-hook 'text-mode-hook 'turn-on-flyspell)
;;  (add-hook 'LaTeX-mode-hook 'turn-on-flyspell)
;;  (add-hook 'markdown-mode-hook 'turn-on-flyspell)
;;  (add-hook 'org-mode-hook 'turn-on-flyspell)
  
  (defvar starter-kit-coding-hook nil
    "Hook that gets run on activation of any programming mode.")
  
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Seed the random-number generator
  (random t)

;; Istan Zahn uses this instea: (https://github.com/izahn/dotemacs)
;; Use y/n instead of yes/no
;; (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** functions for prettier source code
#+begin_src emacs-lisp :tangle yes
(defun starter-kit-pretty-lambdas ()
  (font-lock-add-keywords
   nil `(("(\\(lambda\\>\\)"
          (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                    ,(make-char 'greek-iso8859-7 107))
                    nil))))))
#+end_src

#+RESULTS:
: starter-kit-pretty-lambdas

** Hippie expand: at times perhaps too hip

#+begin_src emacs-lisp :tangle yes
(delete 'try-expand-line hippie-expand-try-functions-list)
(delete 'try-expand-list hippie-expand-try-functions-list)
#+end_src

** Don't clutter up directories with files~
#+begin_src emacs-lisp :tangle yes
(setq backup-directory-alist `(("." . ,(expand-file-name
                                        (concat dotfiles-dir "backups")))))
#+end_src

** Associate modes with file extensions
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . diff-mode))
(add-to-list 'auto-mode-alist '("\\.css$" . css-mode))
;; (require 'yaml-mode) ;; dgm comments out as I don't know what it is for
;; (add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
#+end_src


** Default to unified diffs
From documentation: A string or list of strings specifying switches to be passed to =diff=.
=-u, -U NUM, --unified[=NUM]= is an option for: "output NUM (default 3) lines of unified context" (man pages for =diff=).

#+begin_src emacs-lisp :tangle yes
(setq diff-switches "-u")
#+end_src

* Provide

#+BEGIN_SRC emacs-lisp :tangle yes
(provide 'starter-kit-misc)
#+END_SRC

#+RESULTS:
: starter-kit-misc

* Final Message

#+source: message-line
#+begin_src emacs-lisp :tangle yes
  (message "Starter Kit Misc loaded.")
#+end_src
