#+TITLE: Starter Kit Misc
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Misc
Things that don't fit anywhere else.

** Color Themes
Emacs 24 introduces a streamlined theming system that replaces an
older, messier one. The Starter Kit comes with Ethan Schoonover's
/Solarized/ color theme and the /Zenburn/ theme, in versions
maintained by Bozhidar Batsov. Load it with =M-x load-theme
solarized-dark= or =M-x load-theme solarized-light=. You can also try
loading the =zenburn= and =anti-zenburn= themes. 

#+source: colors
#+begin_src emacs-lisp

;; dgm added customizations intended for modeline, following https://github.com/bbatsov/solarized-emacs

;; make the modeline high contrast
;; (setq solarized-high-contrast-mode-line t)

;; powerline by milkman
(use-package powerline)
(display-time-mode 1)
(powerline-default-theme)


;;  add (setq custom-safe-themes t) to your init file before you load your theme. This will treat all themes as safe, which could be a risk in theory, but if ;; you are only installing themes from trusted sources, I don't see any issue 
;; https://emacs.stackexchange.com/questions/18932/stop-emacs-asking-if-a-theme-is-safe
 (add-to-list 'custom-theme-load-path "~/.emacs.d/elpa")
  (setq custom-safe-themes t)

;;(use-package solarized-theme
;;  :defer 10
;;  :init
;;  (setq solarized-use-variable-pitch nil)
;;  (setq solarized-height-plus-1 1.0)
;;  :ensure t)


;; From https://github.com/andschwa/.emacs.d/blob/master/init.el and https://github.com/bbatsov/solarized-emacs

(use-package solarized-theme
  :init 
  (setq solarized-distinct-fringe-background t) ;; make the fringe stand out from the background 
  (setq solarized-use-variable-pitch nil)       ;; Don't change the font for some headings and titles
  (setq solarized-high-contrast-mode-line t)    ;; make the modeline high contrast
;;  (setq solarized-use-less-bold t)              ;; Use less bolding
;;  (setq solarized-use-more-italic t)            ;; Use more italics
  (setq solarized-emphasize-indicators nil)     ;; Use less colors for indicators such as git: gutter, flycheck and similar
  (setq solarized-scale-org-headlines nil)      ;; Don't change size of org-mode headlines (but keep other size-changes)
  ;; Avoid all font-size changes
  (setq solarized-height-minus-1 1.0)
  (setq solarized-height-plus-1 1.0)
  (setq solarized-height-plus-2 1.0)
  (setq solarized-height-plus-3 1.0)
  (setq solarized-height-plus-4 1.0)
  (setq x-underline-at-descent-line t)
  :config
  (defun toggle-theme ()
    "Switch between Solarized variants."
    (interactive)
    (cond
     ((member 'solarized-dark custom-enabled-themes)
      (disable-theme 'solarized-dark)
      (load-theme 'solarized-light t))
     ((member 'solarized-light custom-enabled-themes)
      (disable-theme 'solarized-light)
      (load-theme 'solarized-dark t))))
  (load-theme 'solarized-dark t))

;;  (load-theme 'zenburn t)
;;  (load-theme 'solarized-dark t)
;;  (load-theme 'solarized-light t)
;;  (load-theme 'darktooth t)
;;  (load-theme 'soothe t)
;;  (load-theme 'clues t)

;; from https://github.com/kuanyui/moe-theme.el
;;    (require 'moe-theme)
;;    (powerline-moe-theme)

    ;; Show highlighted buffer-id as decoration. (Default: nil)
;;    (setq moe-theme-highlight-buffer-id t)

    ;; Resize titles (optional).
;;    (setq moe-theme-resize-markdown-title '(1.5 1.4 1.3 1.2 1.0 1.0))
;;    (setq moe-theme-resize-org-title '(1.5 1.4 1.3 1.2 1.1 1.0 1.0 1.0 1.0))
;;    (setq moe-theme-resize-rst-title '(1.5 1.4 1.3 1.2 1.1 1.0))

    ;; Choose a color for mode-line.(Default: blue)
;;    (moe-theme-set-color 'orange)

    ;; Finally, apply moe-theme now.
    ;; Choose what you like, (moe-light) or (moe-dark)
;;    (moe-dark)    

;; If you use Emacs build-in show-paren-mode, I recommend set the value of show-paren-style to expression for optimized visual experience:

;;    (show-paren-mode t)
;;    (setq show-paren-style 'expression)

;; trying to improve the looks of dired+ with solarized dark: http://unix.stackexchange.com/questions/20519/dired-on-dark-color-themes
;; (add-to-list 'default-frame-alist '(background-mode . dark))
;;  (load-theme 'spacemacs-dark t)
;;  (load-theme 'misterioso t)
#+end_src

#+RESULTS: colors
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23561 2554 592840 345000) :init (23561 2554 592831 261000) :config (23561 2554 592719 973000) :config-secs (0 0 92350 397000) :init-secs (0 0 127886 765000) :use-package-secs (0 1 207933 536000)))

#+RESULTS:
: t

*** Theme function for changing theme and disabling temes

From https://github.com/danielmai/.emacs.d/blob/master/config.org
His explanation: I tend to switch themes more often than normal. For example, switching to a lighter theme (such as the default) or to a different theme depending on the time of day or my mood. Normally, switching themes is a multi-step process with disable-theme and load-theme. The switch-theme function will do that in one swoop. I just choose which theme I want to go to.

#+BEGIN_SRC emacs-lisp 
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)
#+END_SRC

#+RESULTS:
: disable-active-themes

** Window system 

Note: =font-lock-maximum-decoration= was originally set to =t=. But this made emacs way too slow.  In https://www.gnu.org/software/emacs/manual/html_node/efaq/Turning-on-syntax-highlighting.html they say that turning it to =nil= we get the default (usually minimum) decoration (but i take this to mean that there is decoration nonetheless). Originally it was true but dgm turned it off as emacs is way to slow with it.
In the description of the variable =font-lock-maximum-decoration= they say that if nil, use the default decoration (typically the minimum available).
- If t, use the maximum decoration available.
- If a number, use that level of decoration (or if not available the maximum). The higher the number, the more decoration is done.
- If a list, each element should be a cons pair of the form (MAJOR-MODE . LEVEL),
where MAJOR-MODE is a symbol or t (meaning the default).  For example:
 ((c-mode . t) (c++-mode . 2) (t . 1))
means use the maximum decoration available for buffers in C mode, level 2
decoration for buffers in C++ mode, and level 1 decoration otherwise.


#+srcname: starter-kit-window-view-stuff
#+begin_src emacs-lisp 
    (when window-system
;;      (setq frame-title-format '(buffer-file-name "%f" ("%b")))
      (setq frame-title-format (concat "%b" (unless (daemonp) " [serverless]"))) ;; from ambrevar's main.el
      (tooltip-mode -1))
;;      (tool-bar-mode -1)) ;; already in minimal.el
;;      (blink-cursor-mode -1))  

    (mouse-wheel-mode t)

  ;; dgm comments this out as it is in init.el already
  ;;  (set-language-environment 'utf-8)
  ;;  (set-terminal-coding-system 'utf-8)
  ;;  (set-keyboard-coding-system 'utf-8)
  ;;
  ;;  (setq locale-coding-system 'utf-8)
  ;;  (set-default-coding-systems 'utf-8)
  ;;  (set-selection-coding-system 'utf-8)
  ;;  (prefer-coding-system 'utf-8)

    (setq visible-bell t
          echo-keystrokes 0.1
          font-lock-maximum-decoration nil  ;; originally it was truel dgm turns this off as emacs is way to slow with it. 
          font-lock-verbose nil
          inhibit-startup-message t
          transient-mark-mode t
        ;;  color-theme-is-global t
          delete-by-moving-to-trash t
          shift-select-mode nil
          truncate-partial-width-windows nil
          whitespace-style '(trailing lines space-before-tab
                                      indentation space-after-tab)
          whitespace-line-column 100
          ediff-window-setup-function 'ediff-setup-windows-plain
          ediff-split-window-function 'split-window-horizontally
          oddmuse-directory (concat dotfiles-dir "oddmuse")
          xterm-mouse-mode t
          save-place-file (concat dotfiles-dir "places"))
#+end_src

#+RESULTS: starter-kit-window-view-stuff
: /home/dgm/.emacs.d/places

** Turn on Minimal mode
Thin window dividers and no scroll bars. Toggle with `C-c C-s`.

#+source: minimal-mode-on
#+begin_src emacs-lisp
(minimal-mode)
#+end_src

#+RESULTS: minimal-mode-on
: t

** Set browser
Set this to whatever browser you use e.g...

#+BEGIN_SRC emacs-lisp 
;; (setq browse-url-browser-function 'browse-url-firefox)
;; (setq browse-url-browser-function 'browse-default-macosx-browser)
;; (setq browse-url-browser-function 'browse-default-windows-browser)
;; (setq browse-url-browser-function 'browse-default-kde)
;; (setq browse-url-browser-function 'browse-default-epiphany)
;; (setq browse-url-browser-function 'browse-default-w3m)
;; (setq browse-url-browser-function 'browse-url-generic
;;       browse-url-generic-program "~/src/conkeror/conkeror")

;;(setq browse-url-browser-function 'browse-url-generic
;;      browse-url-generic-program "chromium")

;;;; (setq browse-url-browser-function 'browse-url-generic
;;;;      browse-url-generic-program "eww")

(setq browse-url-browser-function 'eww-browse-url)  ;; to make eww the default browser (see https://emacs.stackexchange.com/posts/7332/revisions)
;;(setq shr-external-browser 'chromium-browser)               ;; to make chromium default when I do =&= from within eww to open external browser
;;(setq eww-browse-with-external-browser 'shr-external-browser)
(setq browse-url-generic-program "chromium")

#+END_SRC

#+RESULTS:
: chromium

** Transparently open compressed files
#+begin_src emacs-lisp
(auto-compression-mode t)
#+end_src

** Enable syntax highlighting 
#+begin_src emacs-lisp
;;(global-font-lock-mode t)
#+end_src

** Show Menu Bar in Window but not in tty
If launching Emacs as in windowing system, show the menu. If launching in a tty/terminal window, don't display the menu.

Note by dgm on 16 sept 2018: I'm trying to use =exwm= so I am not going to use menu-bar-mode.
#+source: starter-kit-no-menu-in-tty
#+begin_src emacs-lisp
;;  (if window-system
;      (menu-bar-mode t)
;;      (menu-bar-mode -1)
;;      )
#+end_src

#+RESULTS: starter-kit-no-menu-in-tty

** Save place last visited in buffer

#+srcname: starter-kit-saveplace
#+begin_src emacs-lisp
;; Code by Kieran Healy:
;; saveplace remembers your location in a file when saving files
;;  (require 'saveplace)
;;  (setq-default save-place t) for Emacs below 24.4
;;  (toggle-save-place-globally 1) ;; in Emacs above 24.4

;; My code
;; (require 'saveplace)
;; I comment saveplace out because in the documentation it says: "For GNU Emacs 25.1 and newer versions
;; Note that saveplace is auto-loaded by save-place-mode. So you do not need to explicitly require it.

  (save-place-mode 1)

#+end_src

#+RESULTS: starter-kit-saveplace
: t

#+RESULTS:
: t

   
** ido mode and flx-ido
Ido-mode is like magic pixie dust!

#+srcname: starter-kit-loves-ido-mode
#+begin_src emacs-lisp 
;;  (when (> emacs-major-version 21)
;;    (require 'flx-ido) 
;;    (ido-mode t)
;;    (ido-everywhere 1)
;;    (setq ido-enable-prefix nil
;;          ido-enable-flex-matching t
;;          ido-create-new-buffer 'always
;;          ido-use-filename-at-point nil
;;          ido-use-faces nil
;;          ido-max-prospects 10))                    
#+end_src

New setup from https://github.com/danielmai/.emacs.d/blob/master/config.org 
But I disable it as of 12 nov 2019 because it seems that you have to choose either helm or ido! 
See https://github.com/emacs-helm/helm/issues/2085 and https://github.com/emacs-helm/helm/wiki/FAQ#helm-mode-conflict-with-ido-everywhere
 and https://github.com/emacs-helm/helm/issues/1527 and, finally, https://github.com/emacs-helm/helm/wiki where it says 

*** Customize helm-mode

To customize the completion interface or disable completion for specific commands in helm-mode, edit helm-completing-read-handlers-alist. See C-h v helm-completing-read-handlers-alist for details.

*** Use helm-mode and ido-mode

To use Ido for some commands and Helm for others, do not enable ido-mode. Instead, customize helm-completing-read-handlers-alist to specify which command uses Ido.

For example, suppose we want find-file-read-only to use Ido and find-file to use Helm. Then:

In your init file, turn on helm-mode.
In the helm-mode customize group, add a key to helm-completing-read-handlers-alist for find-file-read-only with value ido, i.e.

(find-file-read-only . ido)

With helm-mode active, to use Emacs default completion instead of either Helm or Ido, use nil for the key value:

(find-alternate-file . nil)


#+BEGIN_SRC emacs-lisp
;;(use-package ido
;;  :ensure t
;;  :init
;;  (setq ido-enable-prefix nil
;;        ido-enable-flex-matching t
;;        ido-create-new-buffer 'always
;;        ido-use-filename-at-point 'guess ;; changed from nil. If intrusive, revert to nil
;;        ido-use-faces nil             
;;        ido-max-prospects 10
;;        ido-everywhere nil ;; t conflicts with helm sometimes. See https://github.com/emacs-helm/helm/issues/2085
;;        ido-mode t)
;;  (use-package flx-ido
;;    :ensure t) 
(use-package ido-vertical-mode
    :ensure t
    :defer t
    :init (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only)
    (setq ido-vertical-show-count t))

(set-face-attribute 'ido-vertical-first-match-face nil
                    :background nil
                    :foreground "#b58900")
(set-face-attribute 'ido-vertical-only-match-face nil
                    :background nil
                    :foreground nil)
(set-face-attribute 'ido-vertical-match-face nil
                    :foreground nil)
#+END_SRC

#+RESULTS:

** Other, tabs, imenu and a coding hook
#+begin_src emacs-lisp 
  (set-default 'indent-tabs-mode nil)
  (set-default 'indicate-empty-lines t)
  (set-default 'imenu-auto-rescan t)
  
  (add-hook 'text-mode-hook 'turn-on-auto-fill)

;; dgm, 1 july 2017: turn flyspell off
;;  (add-hook 'text-mode-hook 'turn-on-flyspell)
;;  (add-hook 'LaTeX-mode-hook 'turn-on-flyspell)
;;  (add-hook 'markdown-mode-hook 'turn-on-flyspell)
;;  (add-hook 'org-mode-hook 'turn-on-flyspell)
  
  (defvar starter-kit-coding-hook nil
    "Hook that gets run on activation of any programming mode.")
  
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Seed the random-number generator
  (random t)

;; Istan Zahn uses this instea: (https://github.com/izahn/dotemacs)
;; Use y/n instead of yes/no
;; (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** functions for prettier source code
#+begin_src emacs-lisp
(defun starter-kit-pretty-lambdas ()
  (font-lock-add-keywords
   nil `(("(\\(lambda\\>\\)"
          (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                    ,(make-char 'greek-iso8859-7 107))
                    nil))))))
#+end_src

#+RESULTS:
: starter-kit-pretty-lambdas

** Powerline provides a nicer modeline
A nicer modeline. 
DGM says: yes, but I activate it elsewhere.
#+source: powerline-load
#+begin_src emacs-lisp
;;  (require 'powerline)
;;  (powerline-default-theme)
#+end_src

** Hippie expand: at times perhaps too hip
#+begin_src emacs-lisp
(delete 'try-expand-line hippie-expand-try-functions-list)
(delete 'try-expand-list hippie-expand-try-functions-list)
#+end_src

** Don't clutter up directories with files~
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name
                                        (concat dotfiles-dir "backups")))))
#+end_src

** Associate modes with file extensions
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . diff-mode))
(add-to-list 'auto-mode-alist '("\\.css$" . css-mode))
;; (require 'yaml-mode) ;; dgm comments out as I don't know what it is for
;; (add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
#+end_src



** Default to unified diffs
#+begin_src emacs-lisp
(setq diff-switches "-u")
#+end_src

* Final Message

#+source: message-line
#+begin_src emacs-lisp
  (message "Starter Kit Misc loaded.")
#+end_src
