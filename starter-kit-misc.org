,# -*- coding: utf-8 -*-
# -*- find-file-hook: org-babel-execute-buffer -*-

#+TITLE: Starter Kit Misc
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Misc
Things that don't fit anywhere else.
** Color Themes
Emacs 24 introduces a streamlined theming system that replaces an
older, messier one. The Starter Kit comes with Ethan Schoonover's
/Solarized/ color theme and the /Zenburn/ theme, in versions
maintained by Bozhidar Batsov. Load it with =M-x load-theme
solarized-dark= or =M-x load-theme solarized-light=. You can also try
loading the =zenburn= and =anti-zenburn= themes. 

*** Solarized Theme
#+source: colors
#+begin_src emacs-lisp
;;  add (setq custom-safe-themes t) to your init file before you load your theme. This will treat all themes as safe, which could be a risk in theory, but if ;; you are only installing themes from trusted sources, I don't see any issue 
;; https://emacs.stackexchange.com/questions/18932/stop-emacs-asking-if-a-theme-is-safe
(add-to-list 'custom-theme-load-path "~/.emacs.d/elpa")
(setq custom-safe-themes t)

;;(use-package solarized-theme
;;  :defer 10
;;  :init
;;  (setq solarized-use-variable-pitch nil)
;;  (setq solarized-height-plus-1 1.0)
;;  :ensure t)


;; From https://github.com/andschwa/.emacs.d/blob/master/init.el and https://github.com/bbatsov/solarized-emacs

(use-package solarized-theme
  :init 
  (setq solarized-distinct-fringe-background t) ;; make the fringe stand out from the background 
  (setq solarized-use-variable-pitch nil)       ;; Don't change the font for some headings and titles
  (setq solarized-high-contrast-mode-line nil)    ;; make the modeline high contrast (change to t if you want it)
  ;;  (setq solarized-use-less-bold t)              ;; Use less bolding
  ;;  (setq solarized-use-more-italic t)            ;; Use more italics
  (setq solarized-emphasize-indicators nil)     ;; Use less colors for indicators such as git: gutter, flycheck and similar
  (setq solarized-scale-org-headlines nil)      ;; Don't change size of org-mode headlines (but keep other size-changes)
  ;; Avoid all font-size changes
  (setq solarized-height-minus-1 1.0)
  (setq solarized-height-plus-1 1.0)
  (setq solarized-height-plus-2 1.0)
  (setq solarized-height-plus-3 1.0)
  (setq solarized-height-plus-4 1.0)
  (setq x-underline-at-descent-line t)
  (set-face-attribute 'helm-selection nil 
                      :background nil
                      :foreground "Orange3")
  (set-face-attribute 'helm-source-header
                      nil
                      :foreground "#dcdcdc")
  :config
  (set-face-attribute 'helm-selection nil 
                      :background nil
                      :foreground "Orange3")
  (set-face-attribute 'helm-source-header
                      nil
                      :foreground "#dcdcdc")
  (defun toggle-theme ()
    "Switch between Solarized variants."
    (interactive)
    (cond
     ((member 'solarized-dark custom-enabled-themes)
      (disable-theme 'solarized-dark)
      (load-theme 'solarized-light t)
      (set-face-attribute 'helm-selection nil 
                          :background nil
                          :foreground "Orange3"))
     ((member 'solarized-light custom-enabled-themes)
      (disable-theme 'solarized-light)
      (load-theme 'solarized-dark t)
      (set-face-attribute 'helm-selection nil 
                          :background nil
                          :foreground "Orange3")
      (set-face-attribute 'helm-source-header
                          nil
                          :foreground "#dcdcdc"))))
  (load-theme 'solarized-light t))

(bind-key "s-!" 'toggle-theme)

;;  (load-theme 'solarized-dark t))

;;  (load-theme 'zenburn t)
;;  (load-theme 'solarized-dark t)
;;  (load-theme 'solarized-light t)
;;  (load-theme 'darktooth t)
;;  (load-theme 'soothe t)
;;  (load-theme 'clues t)

;; from https://github.com/kuanyui/moe-theme.el
;;    (require 'moe-theme)
;;    (powerline-moe-theme)

;; Show highlighted buffer-id as decoration. (Default: nil)
;;    (setq moe-theme-highlight-buffer-id t)

;; Resize titles (optional).
;;    (setq moe-theme-resize-markdown-title '(1.5 1.4 1.3 1.2 1.0 1.0))
;;    (setq moe-theme-resize-org-title '(1.5 1.4 1.3 1.2 1.1 1.0 1.0 1.0 1.0))
;;    (setq moe-theme-resize-rst-title '(1.5 1.4 1.3 1.2 1.1 1.0))

;;    Choose a color for mode-line.(Default: blue)
;;    (moe-theme-set-color 'orange)

;; Finally, apply moe-theme now.
;; Choose what you like, (moe-light) or (moe-dark)
;;    (moe-dark)    

;; If you use Emacs build-in show-paren-mode, I recommend set the value of show-paren-style to expression for optimized visual experience:

;;    (show-paren-mode t)
;;    (setq show-paren-style 'expression)

;; trying to improve the looks of dired+ with solarized dark: http://unix.stackexchange.com/questions/20519/dired-on-dark-color-themes
;; (add-to-list 'default-frame-alist '(background-mode . dark))
;;  (load-theme 'spacemacs-dark t)
;;  (load-theme 'misterioso t)
#+end_src

#+RESULTS: colors
: toggle-theme

#+RESULTS:
: t
*** COMMENT Joe Di Castro bit

- Objective: to make toggling themes smoother.
- Joe says: This another code is to provide a hook to do some things after loading a theme, like overwriting a face in a particular theme or
always reload the smart-mode-line theme.

#+BEGIN_EXAMPLE
(defvar after-load-theme-hook nil
   "Hook run after a color theme is loaded using `load-theme'.")

(defadvice load-theme (after run-after-load-theme-hook activate)
   "Run `after-load-theme-hook'."
   (run-hooks 'after-load-theme-hook))
#+END_EXAMPLE

*** COMMENT Sacha Chua's tweaks 

Some more tweaks to solarized:

#+BEGIN_EXAMPLE
;; (when window-system
;;  (custom-set-faces
;;   '(erc-input-face ((t (:foreground "antique white"))))
;;   '(helm-selection ((t (:background "#4682b4" :foreground "black"))))
;;   '(org-agenda-clocking ((t (:inherit secondary-selection :foreground "black"))) t)
;;   '(org-agenda-done ((t (:foreground "dim gray" :strike-through nil))))
;;;;;;;   '(org-done ((t (:foreground "PaleGreen" :weight normal :strike-through t))))
;;   '(org-clock-overlay ((t (:background "SkyBlue4" :foreground "black"))))
;;;;;;;   '(org-headline-done ((((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon" :strike-through t))))
;;   '(outline-1 ((t (:inherit font-lock-function-name-face :foreground "cornflower blue"))))))
#+END_EXAMPLE

*** COMMENT Theme function for changing theme and disabling themes

From https://github.com/danielmai/.emacs.d/blob/master/config.org
His explanation: I tend to switch themes more often than normal. For example, switching to a lighter theme (such as the default) or to a different theme depending on the time of day or my mood. Normally, switching themes is a multi-step process with disable-theme and load-theme. The switch-theme function will do that in one swoop. I just choose which theme I want to go to.

#+BEGIN_EXAMPLE
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)
#+END_EXAMPLE

*** COMMENT Another try for switching themes neatly

- From https://emacs.stackexchange.com/questions/3112/how-to-reset-color-theme
... but I see no difference

#+BEGIN_EXAMPLE
(defadvice load-theme (before theme-dont-propagate activate)
 (mapc #'disable-theme custom-enabled-themes))
;; (mapcar #'disable-theme custom-enabled-themes)) ;; asked by emacs on initialization to change mapcar to either mapc or dolist

(defun enab-theme (theme) 
 (if current-t43m3 (disable-theme current-t43m3))
 (setq current-t43m3 theme) 
 (load-theme theme t)) 
#+END_EXAMPLE

*** Change theme depending on hour of day
- From 9 am to 8 pm, light theme. Otherwise, dark theme.
- https://blog.jft.rocks/emacs/time-based-theme.html

#+BEGIN_SRC emacs-lisp 
(defun set-light-theme ()
  "Set the light theme with some customization if needed."
  (interactive)
  (load-theme 'solarized-light t)
  (set-face-attribute 'helm-selection nil 
                      :background nil
                      :foreground "Orange3")
  (set-face-attribute 'helm-source-header
                      nil
                      :foreground "#dcdcdc"))

(defun set-dark-theme ()
  "Set the dark theme with some customization if needed."
  (interactive)
  (load-theme 'solarized-dark t)
  (set-face-attribute 'helm-selection nil 
                      :background nil
                      :foreground "Orange3")
  (set-face-attribute 'helm-source-header
                      nil
                      :foreground "#dcdcdc"))

(let ((current-hour (string-to-number (format-time-string "%H"))))
  (if (or (< current-hour 10) (> current-hour 17)) (set-dark-theme) (set-light-theme)))
#+END_SRC

#+RESULTS:

If you want your Emacs automatically switch between the color schemes when the time come, you can use run-with-timer function to do the check every hour. But hey, if if I switch theme manually, theme is switched back to what it was after one hour.

#+BEGIN_SRC emacs-lisp 
(defun theme-switcher ()
  (let ((current-hour (string-to-number (format-time-string "%H"))))
    (if (or (< current-hour 11) (> current-hour 17)) (set-dark-theme) (set-light-theme))))

;; Run at every 3600 seconds, after 0s delay; DGM commented this out on 24 august 2019 so it did not switch back by itself 
(run-with-timer 0 3600 'theme-switcher)
#+END_SRC

#+RESULTS:
: [nil 24021 32824 946091 3600 theme-switcher nil nil 677000]

** Mode-line customization

- Powerline (original setup that I had on until I changed to Diego Vicente's)

#+BEGIN_EXAMPLE
;; dgm added customizations intended for modeline, following https://github.com/bbatsov/solarized-emacs

;; make the modeline high contrast
;; (setq solarized-high-contrast-mode-line t)

;; powerline by milkman
(use-package powerline)
(display-time-mode 1)
(powerline-default-theme)
#+END_EXAMPLE

- Powerline setup from https://wolfecub.github.io/dotfiles/ (17 july 2019) but with it I don't get the clock and other things... so I revert to milkman'ss

#+BEGIN_EXAMPLE
(if (or (display-graphic-p) (daemonp))
    (use-package powerline
      :config
      (setq powerline-arrow-shape 'curve
            powerline-display-buffer-size nil
            powerline-display-mule-info nil)
      (powerline-default-theme)
      (remove-hook 'focus-out-hook 'powerline-unset-selected-window)
      (setq powerline-height 24)
      (defpowerline powerline-minor-modes ""))

  (setq-default
   mode-line-format
   (list
    " "
    ;; is this buffer read-only?
    '(:eval (when buffer-read-only
              (propertize "RO"
                          'face 'font-lock-type-face
                          'help-echo "Buffer is read-only")))

    ;; was this buffer modified since the last save?
    '(:eval (when (buffer-modified-p)
              (propertize "M"
                          'face 'font-lock-warning-face
                          'help-echo "Buffer has been modified")))

    " "
    ;; the buffer name; the file name as a tool tip
    '(:eval (propertize "%b " 'face 'font-lock-keyword-face
                        'help-echo (buffer-file-name)))


    ;; the current major mode for the buffer.
    "["

    '(:eval (propertize (format-mode-line mode-name) 'face '(:family "Arial")
                        'help-echo buffer-file-coding-system))
    '(:eval (propertize (format-mode-line minor-mode-alist)
                        'face '(:family "Arial")))
    "]             "

    ;; line and column
    "(" ;; '%02' to set to 2 chars at least; prevents flickering
    (propertize "%02l" 'face 'font-lock-type-face) ","
    (propertize "%02c" 'face 'font-lock-type-face)
    ") "

    ;; relative position, size of file
    "["
    (propertize "%p" 'face 'font-lock-constant-face) ;; % above top
    "/"
    (propertize "%I" 'face 'font-lock-constant-face) ;; size
    "] "

    ;; add the time, with the date and the emacs uptime in the tooltip
    '(:eval (propertize (format-time-string "%H:%M")
                        'help-echo
                        (concat (format-time-string "%c; ")
                                (emacs-uptime "Uptime:%hh")))))))
#+END_EXAMPLE


*** Mode-line configuration by Diego Vicente

After trying most of the alternatives available to customizing the mode-line
(=smart-mode-line=, =powerline=, =airline=, =spaceline=...), I finally settled
with this minimal configuration. These two packages, developed by the great
[[https://github.com/tarsius][Jonas Bernoulli]], provide a beautiful and simple mode-line that shows all the
information I need in a beautiful way, being less flashy and prone to errors
than other packages. The general mode-line aesthetics and distribution is
provided by =moody=, while =minions= provide an on-click menu to show minor
modes. While you might be thinking "on-click menu? Wasn't the point of all this
editor thing not to use the mouse?", just notice that the previous setup used
=delight= to hide all minor modes. This does the same thing, saving me the
effort of writing =:delight= in most package declarations and provides a nice
menu if I need to check the minor modes at some points.


#+begin_src emacs-lisp
(use-package minions
  :ensure t
  :config
  (setq minions-mode-line-lighter "[+]")
  (minions-mode))

(use-package moody
  :ensure t
  :config
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode)

  (defun set-moody-face (frame)
    (let ((line (face-attribute 'mode-line :underline frame)))
      (set-face-attribute 'mode-line          frame :overline   line)
      (set-face-attribute 'mode-line-inactive frame :overline   line)
      (set-face-attribute 'mode-line-inactive frame :underline  line)
      (set-face-attribute 'mode-line          frame :box        nil)
      (set-face-attribute 'mode-line-inactive frame :box        nil)))

  ;; (defun set-current-moody-face (&optional args)
  ;;   (interactive)
  ;;   (set-moody-face (selected-frame)))

  (setq-default x-underline-at-descent-line t
                column-number-mode t)

  (add-to-list 'after-make-frame-functions 'set-moody-face t))
  ;; (add-to-list 'after-make-frame-functions 'set-current-moody-face t))

(setq display-time-24hr-format t)
(setq display-time-default-load-average t)
(setq display-time-mail-string "") ;; no mail alert
(display-time-mode 1)
#+end_src

#+RESULTS:
: t

** Window system 

Note: =font-lock-maximum-decoration= was originally set to =t=. But this made emacs way too slow.  In https://www.gnu.org/software/emacs/manual/html_node/efaq/Turning-on-syntax-highlighting.html they say that turning it to =nil= we get the default (usually minimum) decoration (but i take this to mean that there is decoration nonetheless). Originally it was set to true but dgm turned it off as emacs is way to slow with it.
In the description of the variable =font-lock-maximum-decoration= they say that if nil, use the default decoration (typically the minimum available).
- If t, use the maximum decoration available.
- If a number, use that level of decoration (or if not available the maximum). The higher the number, the more decoration is done.
- If a list, each element should be a cons pair of the form (MAJOR-MODE . LEVEL),
where MAJOR-MODE is a symbol or t (meaning the default).  For example:
 ((c-mode . t) (c++-mode . 2) (t . 1))
means use the maximum decoration available for buffers in C mode, level 2
decoration for buffers in C++ mode, and level 1 decoration otherwise.

From http://el.lisp.se/Levels-of-Font-Lock.html

22.6.5 Levels of Font Lock

Some major modes offer three different levels of fontification. You can define multiple levels by using a list of symbols for keywords in font-lock-defaults. Each symbol specifies one level of fontification; it is up to the user to choose one of these levels, normally by setting font-lock-maximum-decoration (see Font Lock in the GNU Emacs Manual). The chosen level’s symbol value is used to initialize font-lock-keywords. 

Here are the conventions for how to define the levels of fontification: 

- Level 1: highlight function declarations, file directives (such as include or import directives), strings and comments. The idea is speed, so only the most important and top-level
 components are fontified. 
- Level 2: in addition to level 1, highlight all language keywords, including type names that act like keywords, as well as named constant values. The idea is that all keywords
 (either syntactic or semantic) should be fontified appropriately. 
- Level 3: in addition to level 2, highlight the symbols being defined in function and variable declarations, and all builtin function names, wherever they appear. 

 Tip from http://www.emacs.uniyar.ac.ru/doc/em24h/emacs102.htm: A more advanced method for getting cheap font-lock can be obtained using the minor modes called fast-lock-mode and lazy-lock-mode. Use =C-h f= (=describe-function=) for a discussion of what they do. 


#+srcname: starter-kit-window-view-stuff
#+begin_src emacs-lisp 
    (when window-system
;;      (setq frame-title-format '(buffer-file-name "%f" ("%b")))
      (setq frame-title-format (concat "%b" (unless (daemonp) " [serverless]"))) ;; from ambrevar's main.el
      (tooltip-mode -1)
      (blink-cursor-mode -1)) ;; I include this blink-cursor-mode again because sometimes it disappears and maybe turning this fixes it.
;;      (tool-bar-mode -1)) ;; already in minimal.el

;; alternative de malb dot files to display buffer name in frame titles
;; (setq frame-title-format
;;      '("" (:eval (replace-regexp-in-string "^ +" "" (buffer-name)))
;;        " - " invocation-name))


    (mouse-wheel-mode t)

    (setq visible-bell t
          echo-keystrokes 0.1
;;          font-lock-maximum-decoration t  ;; dgm turned this off as emacs was way too slow with it but now, with my new EXWM setting I want to give it a chance
          font-lock-maximum-decoration 1 ;; originally it was true, then nil and then 1, the minimum level, to see if this speeds up things. And I think it does. 
          font-lock-verbose nil
          inhibit-startup-message t
          transient-mark-mode t
        ;;  color-theme-is-global t
          delete-by-moving-to-trash t
          shift-select-mode nil
          truncate-partial-width-windows nil
          whitespace-style '(trailing lines space-before-tab
                                      indentation space-after-tab)
          whitespace-line-column 100
          ediff-window-setup-function 'ediff-setup-windows-plain
          ediff-split-window-function 'split-window-horizontally
          oddmuse-directory (concat dotfiles-dir "oddmuse")
          xterm-mouse-mode t
          save-place-file (concat dotfiles-dir "places"))
#+end_src

#+RESULTS: starter-kit-window-view-stuff
: /home/dgm/.emacs.d/places

** Turn on Minimal mode
Thin window dividers and no scroll bars. Toggle with `C-c C-s`.

#+source: minimal-mode-on
#+begin_src emacs-lisp
(minimal-mode)
#+end_src

#+RESULTS: minimal-mode-on
: t

** Transparently open compressed files
#+begin_src emacs-lisp
(auto-compression-mode t)
#+end_src

** Enable syntax highlighting 
#+begin_src emacs-lisp
;;(global-font-lock-mode t)
#+end_src

** Show Menu Bar in Window but not in tty
If launching Emacs as in windowing system, show the menu. If launching in a tty/terminal window, don't display the menu.

Note by dgm on 16 sept 2018: I'm trying to use =exwm= so I am not going to use menu-bar-mode.
#+source: starter-kit-no-menu-in-tty
#+begin_src emacs-lisp
;;  (if window-system
;      (menu-bar-mode t)
;;      (menu-bar-mode -1)
;;      )
#+end_src

#+RESULTS: starter-kit-no-menu-in-tty

** Save place last visited in buffer

#+srcname: starter-kit-saveplace
#+begin_src emacs-lisp
;; Code by Kieran Healy:
;; saveplace remembers your location in a file when saving files
;;  (require 'saveplace)
;;  (setq-default save-place t) for Emacs below 24.4
;;  (toggle-save-place-globally 1) ;; in Emacs above 24.4

;; My code
;; (require 'saveplace)
;; I comment saveplace out because in the documentation it says: "For GNU Emacs 25.1 and newer versions
;; Note that saveplace is auto-loaded by save-place-mode. So you do not need to explicitly require it.

  (save-place-mode 1)
#+end_src

#+RESULTS: starter-kit-saveplace
: t

#+RESULTS:
: t

** ido mode and flx-ido
Ido-mode is like magic pixie dust!

#+srcname: starter-kit-loves-ido-mode
#+begin_src emacs-lisp 
;;  (when (> emacs-major-version 21)
;;    (require 'flx-ido) 
;;    (ido-mode t)
;;    (ido-everywhere 1)
;;    (setq ido-enable-prefix nil
;;          ido-enable-flex-matching t
;;          ido-create-new-buffer 'always
;;          ido-use-filename-at-point nil
;;          ido-use-faces nil
;;          ido-max-prospects 10))                    
#+end_src

New setup from https://github.com/danielmai/.emacs.d/blob/master/config.org 
But I disable it as of 12 nov 2019 because it seems that you have to choose either helm or ido! 
See https://github.com/emacs-helm/helm/issues/2085 and https://github.com/emacs-helm/helm/wiki/FAQ#helm-mode-conflict-with-ido-everywhere
 and https://github.com/emacs-helm/helm/issues/1527 and, finally, https://github.com/emacs-helm/helm/wiki where it says 

*** Customize helm-mode

To customize the completion interface or disable completion for specific commands in helm-mode, edit helm-completing-read-handlers-alist. See C-h v helm-completing-read-handlers-alist for details.

*** Use helm-mode and ido-mode

To use Ido for some commands and Helm for others, do not enable ido-mode. Instead, customize helm-completing-read-handlers-alist to specify which command uses Ido.

For example, suppose we want find-file-read-only to use Ido and find-file to use Helm. Then:

In your init file, turn on helm-mode.
In the helm-mode customize group, add a key to helm-completing-read-handlers-alist for find-file-read-only with value ido, i.e.

(find-file-read-only . ido)

With helm-mode active, to use Emacs default completion instead of either Helm or Ido, use nil for the key value:

(find-alternate-file . nil)


#+BEGIN_SRC emacs-lisp
;;(use-package ido
;;  :ensure t
;;  :init
;;  (setq ido-enable-prefix nil
;;        ido-enable-flex-matching t
;;        ido-create-new-buffer 'always
;;        ido-use-filename-at-point 'guess ;; changed from nil. If intrusive, revert to nil
;;        ido-use-faces nil             
;;        ido-max-prospects 10
;;        ido-everywhere nil ;; t conflicts with helm sometimes. See https://github.com/emacs-helm/helm/issues/2085
;;        ido-mode t)
;;  (use-package flx-ido
;;    :ensure t) 
(use-package ido-vertical-mode
    :ensure t
    :defer t
    :init (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only)
    (setq ido-vertical-show-count t))

(set-face-attribute 'ido-vertical-first-match-face nil
                    :background nil
                    :foreground "#b58900")
(set-face-attribute 'ido-vertical-only-match-face nil
                    :background nil
                    :foreground nil)
(set-face-attribute 'ido-vertical-match-face nil
                    :foreground nil)
#+END_SRC

#+RESULTS:

** Other, tabs, imenu and a coding hook
#+begin_src emacs-lisp 
  (set-default 'indent-tabs-mode nil)
  (set-default 'indicate-empty-lines t)
  (set-default 'imenu-auto-rescan t)
  
  (add-hook 'text-mode-hook 'turn-on-auto-fill)

;; dgm, 1 july 2017: turn flyspell off
;;  (add-hook 'text-mode-hook 'turn-on-flyspell)
;;  (add-hook 'LaTeX-mode-hook 'turn-on-flyspell)
;;  (add-hook 'markdown-mode-hook 'turn-on-flyspell)
;;  (add-hook 'org-mode-hook 'turn-on-flyspell)
  
  (defvar starter-kit-coding-hook nil
    "Hook that gets run on activation of any programming mode.")
  
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Seed the random-number generator
  (random t)

;; Istan Zahn uses this instea: (https://github.com/izahn/dotemacs)
;; Use y/n instead of yes/no
;; (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** functions for prettier source code
#+begin_src emacs-lisp
(defun starter-kit-pretty-lambdas ()
  (font-lock-add-keywords
   nil `(("(\\(lambda\\>\\)"
          (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                    ,(make-char 'greek-iso8859-7 107))
                    nil))))))
#+end_src

#+RESULTS:
: starter-kit-pretty-lambdas

** Powerline provides a nicer modeline
A nicer modeline. 
DGM says: yes, but I activate it elsewhere.

#+source: powerline-load
#+begin_src emacs-lisp
;;  (require 'powerline)
;;  (powerline-default-theme)
#+end_src

** Hippie expand: at times perhaps too hip

#+begin_src emacs-lisp
(delete 'try-expand-line hippie-expand-try-functions-list)
(delete 'try-expand-list hippie-expand-try-functions-list)
#+end_src

** Don't clutter up directories with files~
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name
                                        (concat dotfiles-dir "backups")))))
#+end_src

** Associate modes with file extensions
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . diff-mode))
(add-to-list 'auto-mode-alist '("\\.css$" . css-mode))
;; (require 'yaml-mode) ;; dgm comments out as I don't know what it is for
;; (add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
#+end_src


** Default to unified diffs
#+begin_src emacs-lisp
(setq diff-switches "-u")
#+end_src

* Provide

#+BEGIN_SRC emacs-lisp
(provide 'starter-kit-misc)
#+END_SRC

#+RESULTS:
: starter-kit-misc

* Final Message

#+source: message-line
#+begin_src emacs-lisp
  (message "Starter Kit Misc loaded.")
#+end_src
