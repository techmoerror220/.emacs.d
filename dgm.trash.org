** Help - guide-key

It's hard to remember keyboard shortcuts. The =guide-key= package pops up help after a short delay.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package guide-key
    :diminish guide-key-mode
    :config
    (progn
      (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c"))
      (guide-key-mode 1)))  ; Enable guide-key-mode
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24467 16866 86654 610000) :init (24467 16866 86647 480000) :init-secs (0 0 18565 660000) :use-package-secs (0 0 18706 192000) :config (24467 16866 86538 675000) :config-secs (0 0 208 392000)))

    (global-set-key "\C-x\ \C-r" 'recentf-open-files)
    (global-set-key (kbd "C-&") 'recentf-open-files)

* Disabled goodies

** Bookmarks on Start
Set emacs to open Bookmark+ on start. From Xah Emacs. Disabled now that I use =Dashboard=

#+srcname: bookmarks
#+BEGIN_SRC emacs-lisp :tangle no
  ;; included by dgm
  ;;   (setq inhibit-splash-screen t)
  ;; (require 'bookmark+) ;; no longer available in MELPA
  ;;  (bookmark-bmenu-list)
  ;;  (switch-to-buffer "*Bookmark List*")
  ;; '(initial-buffer-choice "*Bookmark List*")
  ;; (setq initial-buffer-choice "*Bookmark List*")
#+END_SRC


#+RESULTS: bookmarks


#+srcname: custom-setup
#+BEGIN_SRC emacs-lisp :tangle no
  ;;    Load the files in CustomDir using mapc:
  ;; (mapc 'load (directory-files "~/.emacs.d/customDir" t ".*\.el"))
  ;; (add-to-list 'load-path "~/.emacs.d/customDir/")
  ;; (require 'setup-programming)
#+END_SRC



** Flycheck
I disable this as flycheck makes emacs too slow.
#+srcname: flycheck-tip
#+BEGIN_SRC emacs-lisp :tangle yes
  ;;  (require 'flycheck-tip)
  ;;  (define-key global-map (kbd "\C-c \C-n") 'flycheck-tip-cycle)
  ;;  (setq flycheck-display-errors-function 'ignore)
#+END_SRC

#+RESULTS: flycheck-tip
: ignore

#+RESULTS:
: ignore

** Golden Ratio

For now, I deactivate the golden-ratio mode because it distract me too much.

#+srcname: golden-ratio
#+BEGIN_SRC emacs-lisp :tangle no
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; PACKAGE: golden-ratio                         ;;
  ;;                                               ;;
  ;; GROUP: Environment -> Windows -> Golden Ratio ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; activate for helm when helm is installed
  ;; (require 'golden-ratio)

  ;; (add-to-list 'golden-ratio-exclude-modes "ediff-mode")
  ;; (add-to-list 'golden-ratio-exclude-modes "helm-mode")
  ;; (add-to-list 'golden-ratio-exclude-modes "dired-mode")
  ;; (add-to-list 'golden-ratio-exclude-modes "ess-mode")

  ;; I dont want the golden ratio with the Helm window
  ;;  (defun pl/helm-alive-p ()
  ;;   (if (boundp 'helm-alive-p)
  ;;       (symbol-value 'helm-alive-p)))

  ;;  (add-to-list 'golden-ratio-inhibit-functions 'pl/helm-alive-p)

  ;; do not enable golden-ratio in theses modes
  ;;   (setq golden-ratio-exclude-modes '("ediff-mode"
  ;;                                      "gud-mode"
  ;;                                      "gdb-locals-mode"
  ;;                                      "gdb-registers-mode"
  ;;                                      "gdb-breakpoints-mode"
  ;;                                      "gdb-threads-mode"
  ;;                                      "gdb-frames-mode"
  ;;                                      "gdb-inferior-io-mode"
  ;;                                      "gud-mode"
  ;;                                      "gdb-inferior-io-mode"
  ;;                                      "gdb-disassembly-mode"
  ;;                                      "gdb-memory-mode"
  ;;   ;;                                   "magit-log-mode"
  ;;   ;;                                   "magit-reflog-mode"
  ;;   ;;                                   "magit-status-mode"
  ;;                                      "IELM"
  ;;                                      "eshell-mode"
  ;;                                      "dired-mode"
  ;;                                      "helm-mode"
  ;;                                      "ess-mode"))
  ;; delete "dired-mode"  from the above list if you want golden-ratio to apply to helm

  ;;   (golden-ratio-mode)
#+END_SRC

#+RESULTS: golden-ratio :tangle no


** Frame title
I disable this as it is dealt with in -misc.org
#+srcname: frame-title
#+BEGIN_SRC emacs-lisp :tangle no
  ;; more useful frame title, that show either a file or a
  ;; buffer name (if the buffer isn't visiting a file)
  ;; taken from prelude-ui.el
  ;; (setq frame-title-format
  ;;      '("" invocation-name " - " (:eval (if (buffer-file-name)
  ;;                                                    (abbreviate-file-name (buffer-file-name))
  ;;                                                  "%b"))))
#+END_SRC

#+RESULTS: frame-title
|   | invocation-name | - | (:eval (if (buffer-file-name) (abbreviate-file-name (buffer-file-name)) %b)) |


* COMMENT Resize minibuffer

#+begin_src emacs-lisp :tangle no
  ;; (setq resize-mini-windows t)
  ;; (setq max-mini-window-height 0.50)
#+end_src

#+RESULTS:
: 0.5

* COMMENT Window highlight

Too funky

#+begin_src emacs-lisp :tangle no
  (require 'window-highlight)

  (apply
   #'custom-set-faces
   (let ((inactive-color "#ffffe2")
         (where '((type x w32 ns))))
     `((default
         ((,where
           :background ,inactive-color)))
       (fringe
        ((,where
          :background ,inactive-color)))
       )))

  (window-highlight-mode 1)
#+end_src

** Trying EXWM keybind

#+begin_src emacs-lisp :tangle no
  ;;;(setq exwm-input-global-keys
  ;;;        `(,(kbd "s-<tab>") . buffer-flip))
#+end_src


** Bookmarks on Start
Set emacs to open Bookmark+ on start. From Xah Emacs. Disabled now that I use =Dashboard=

#+srcname: bookmarks
#+BEGIN_SRC emacs-lisp :tangle no
  ;; included by dgm
  ;;   (setq inhibit-splash-screen t)
  ;; (require 'bookmark+) ;; no longer available in MELPA
  ;;  (bookmark-bmenu-list)
  ;;  (switch-to-buffer "*Bookmark List*")
  ;; '(initial-buffer-choice "*Bookmark List*")
  ;; (setq initial-buffer-choice "*Bookmark List*")
#+END_SRC


#+RESULTS: bookmarks


#+srcname: custom-setup
#+BEGIN_SRC emacs-lisp :tangle no
  ;;    Load the files in CustomDir using mapc:
  ;; (mapc 'load (directory-files "~/.emacs.d/customDir" t ".*\.el"))
  ;; (add-to-list 'load-path "~/.emacs.d/customDir/")
  ;; (require 'setup-programming)
#+END_SRC

** Bookmarks on Start
Set emacs to open Bookmark+ on start. From Xah Emacs. Disabled now that I use =Dashboard=

#+srcname: bookmarks
#+BEGIN_SRC emacs-lisp :tangle no
  ;; included by dgm
  ;;   (setq inhibit-splash-screen t)
  ;; (require 'bookmark+) ;; no longer available in MELPA
  ;;  (bookmark-bmenu-list)
  ;;  (switch-to-buffer "*Bookmark List*")
  ;; '(initial-buffer-choice "*Bookmark List*")
  ;; (setq initial-buffer-choice "*Bookmark List*")
#+END_SRC


#+RESULTS: bookmarks


#+srcname: custom-setup
#+BEGIN_SRC emacs-lisp :tangle no
  ;;    Load the files in CustomDir using mapc:
  ;; (mapc 'load (directory-files "~/.emacs.d/customDir" t ".*\.el"))
  ;; (add-to-list 'load-path "~/.emacs.d/customDir/")
  ;; (require 'setup-programming)
#+END_SRC


* COMMENT Resize minibuffer

#+begin_src emacs-lisp :tangle no
  ;; (setq resize-mini-windows t)
  ;; (setq max-mini-window-height 0.50)
#+end_src

#+RESULTS:
: 0.5

*** Math notation

With the solarized-dark theme, math notation is too dark to see.

#+BEGIN_SRC emacs-lisp :tangle no
  ;; (setq font-latex-math-face :foreground grey)
#+END_SRC

* COMMENT Management of window configurations
From https://emacs.stackexchange.com/questions/2710/switching-between-window-layouts

DGM: I've tried it but not convinced...
#+begin_src emacs-lisp :tangle yes
  (defvar winstack-stack '()
    "A Stack holding window configurations.
  Use `winstack-push' and
  `winstack-pop' to modify it.")

  (defun winstack-push()
    "Push the current window configuration onto `winstack-stack'."
    (interactive)
    (if (and (window-configuration-p (first winstack-stack))
             (compare-window-configurations (first winstack-stack) (current-window-configuration)))
        (message "Current config already pushed")
      (progn (push (current-window-configuration) winstack-stack)
             (message (concat "pushed " (number-to-string
                                         (length (window-list (selected-frame)))) " frame config")))))

  (defun winstack-pop()
    "Pop the last window configuration off `winstack-stack' and apply it."
    (interactive)
    (if (first winstack-stack)
        (progn (set-window-configuration (pop winstack-stack))
               (message "popped"))
      (message "End of window stack")))

  ;;(global-set-key (kbd "s-,") 'winstack-push)
  ;;(global-set-key (kbd "s-.") 'winstack-pop)
#+end_src

#+RESULTS:
: winstack-pop

* COMMENT Face of comments

#+begin_src emacs-lisp :tangle no
  (set-face-attribute 'font-lock-comment-delimiter-face nil :foreground "#268bd2")
  (set-face-attribute 'font-lock-comment-face nil :foreground "#268bd2")
#+end_src

#+RESULTS:

* COMMENT Remapping =M-<= and =M->=

#+begin_src emacs-lisp :tangle no
  (global-set-key (kbd "s-,") 'beginning-of-buffer)
  (global-set-key (kbd "s-.") 'end-of-buffer)
#+end_src

#+RESULTS:
: end-of-buffer

* COMMENT Better line numbers
Joe di Castro says: Display a more appealing line numbers. I don't use them too much because is a very slow feature, but sometimes it comes handy.

DGM: not sure it is better.
#+BEGIN_SRC emacs-lisp :tangle no
                                          ; 2014-04-04: Holy moly its effort to get line numbers like vim!
                                          ; http://www.emacswiki.org/emacs/LineNumbers#toc6
  (unless window-system
    (add-hook 'linum-before-numbering-hook
              (lambda ()
                (setq-local linum-format-fmt
                            (let ((w (length (number-to-string
                                              (count-lines (point-min) (point-max))))))
                              (concat "%" (number-to-string w) "d"))))))

  (defun joe-linum-format-func (line)
    (concat
     (propertize (format linum-format-fmt line) 'face 'linum)
     (propertize " " 'face 'linum)))

  (unless window-system
    (setq linum-format 'joe-linum-format-func))
#+END_SRC

#+RESULTS:

**** COMMENT Dashboard

I leave it out as it doesn't work with =exwm=

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package dashboard
    :defer t
    :config
    (dashboard-setup-startup-hook)
                                          ;    (setq dashboard-startup-banner "~/.emacs.d/img/dashLogo.png")
    (setq dashboard-items '((recents   . 10)
                            (bookmarks . 10)
                            (projects  . 10)))
    (setq dashboard-banner-logo-title ""))
  (message "Testing 2 dashboard chunk is evaluated.")
#+END_SRC

#+RESULTS:
: Testing 2 dashboard chunk is evaluated.

**** COMMENT Mark current word
From https://www.emacswiki.org/emacs/MarkCommands#toc7

Commented out as =s-/= does the same and with a better shortcut, as defined  [[select]]

#+BEGIN_SRC emacs-lisp :tangle no
  (defun my-mark-current-word (&optional arg allow-extend)
    "Put point at beginning of current word, set mark at end."
    (interactive "p\np")
    (setq arg (if arg arg 1))
    (if (and allow-extend
             (or (and (eq last-command this-command) (mark t))
                 (region-active-p)))
        (set-mark
         (save-excursion
           (when (< (mark) (point))
             (setq arg (- arg)))
           (goto-char (mark))
           (forward-word arg)
           (point)))
      (let ((wbounds (bounds-of-thing-at-point 'word)))
        (unless (consp wbounds)
          (error "No word at point"))
        (if (>= arg 0)
            (goto-char (car wbounds))
          (goto-char (cdr wbounds)))
        (push-mark (save-excursion
                     (forward-word arg)
                     (point)))
        (activate-mark))))

  (define-key global-map (kbd "C-c x") 'my-mark-current-word)
#+END_SRC

#+RESULTS:
: my-mark-current-word

***** COMMENT Transpose frame

Check it out here: https://www.emacswiki.org/emacs/TransposeFrame
Commented out because I don't work with frames and because this functionality is already implemented with =s-\=

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package transpose-frame
    :defer t
    :bind ("C-c t" . transpose-frame))
#+END_SRC

#+RESULTS :
: transpose-frame


**** Update: open wttrin with default city

By default wttrin prompts you to chose the city from your list when it starts. This function starts wttrin with the first city on your list. You can always change this by hitting =g=.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; function to open wttrin with first city on list
  (defun bjm/wttrin ()
    "Open `wttrin' without prompting, using first city in `wttrin-default-cities'"
    (interactive)
    ;; save window arrangement to register
    (window-configuration-to-register :pre-wttrin)
    (delete-other-windows)
    ;; save frame setup
    (save-frame-config)
    (set-frame-width (selected-frame) 130)
    (set-frame-height (selected-frame) 48)
    ;; call wttrin
    (wttrin-query (car wttrin-default-cities))
    )
#+END_SRC

#+RESULTS:
: bjm/wttrin


**** Update: open wttrin with default city

By default wttrin prompts you to chose the city from your list when it starts. This function starts wttrin with the first city on your list. You can always change this by hitting =g=.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; function to open wttrin with first city on list
  (defun bjm/wttrin ()
    "Open `wttrin' without prompting, using first city in `wttrin-default-cities'"
    (interactive)
    ;; save window arrangement to register
    (window-configuration-to-register :pre-wttrin)
    (delete-other-windows)
    ;; save frame setup
    (save-frame-config)
    (set-frame-width (selected-frame) 130)
    (set-frame-height (selected-frame) 48)
    ;; call wttrin
    (wttrin-query (car wttrin-default-cities))
    )
#+END_SRC

#+RESULTS:
: bjm/wttrin


** NOAA
- https://github.com/thomp/noaa

#+begin_src emacs-lisp :tangle no
(use-package noaa)

;; set latitude and longitude for noaa.el
(setq noaa-latitude 40.4)
(setq noaa-longitude -3.7)
#+end_src

#+RESULTS:
: -3.7

** Sunshine

No me funciona
#+begin_src emacs-lisp :tangle no
  (use-package sunshine
    :ensure t
    :commands (bnb/get-forecast-data)
    :config
    (defun bnb/get-forecast-data (b e)
      (let* ((url (sunshine-make-url sunshine-location sunshine-units sunshine-appid))
             (forecast (if (sunshine-forecast-cache-expired url)
                           (with-current-buffer (url-retrieve-synchronously url)
                             (goto-char (point-min))
                             (sunshine-extract-response))
                         (with-temp-buffer
                           (mm-disable-multibyte)
                           (url-cache-extract (url-cache-create-filename url))
                           (sunshine-extract-response)))))
        (cl-loop for day across (cdr (assoc 'list forecast)) collect
                 (make-cfw:event
                  :title (format "%s/%s°, %s"
                                 (round (cdr (assoc 'min (cdr (assoc 'temp day)))))
                                 (round (cdr (assoc 'max (cdr (assoc 'temp day)))))
                                 (cdr (assoc 'main (elt (cdr (assoc 'weather day)) 0))))
                  :start-date (cfw:emacs-to-calendar (seconds-to-time (cdr (assoc 'dt day)))))))))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24275 52106 222610 708000) :init (24275 52106 222591 880000) :init-secs (0 0 105 286000) :use-package-secs (0 1 651141 160000)))

