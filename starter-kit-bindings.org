# -*- coding: utf-8 -*-
# -*- find-file-hook: org-babel-execute-buffer -*-

#+TITLE: Starter Kit Bindings
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Bindings

Key Bindings.

** COMMENT Map fn to Hyper

#+source: fn-to-hyper 
#+begin_src emacs-lisp
;;  (setq mac-function-modifier 'hyper)
;;  ;; fix page-up and page-down keys
  
;;  (defun sfp-page-down (&optional arg)
;;    (interactive "^P")
;;    (setq this-command 'next-line)
;;    (next-line
;;     (- (window-text-height)
;;        next-screen-context-lines)))
;;  (put 'sfp-page-down 'isearch-scroll t)
;;  (put 'sfp-page-down 'CUA 'move)
  
;;  (defun sfp-page-up (&optional arg)
;;    (interactive "^P")
;;    (setq this-command 'previous-line)
;;    (previous-line
;;     (- (window-text-height)
;;        next-screen-context-lines)))
;;  (put 'sfp-page-up 'isearch-scroll t)
;;  (put 'sfp-page-up 'CUA 'move)
;;  
;;  (global-set-key [(H down)] 'scroll-up)
;;  (global-set-key [(H up)]   'scroll-down) 
;;  (require 'scroll-lock)
;;  (setq scroll-preserve-screen-position t)
#+end_src

** Align your code in a pretty way.
#+begin_src emacs-lisp 
;;(global-set-key (kbd "C-x \\") 'align-regexp)
(global-set-key (kbd "s-\\") 'align-regexp)
#+end_src

#+RESULTS:
: align-regexp

** Indent region
#+begin_src emacs-lisp
(global-set-key (kbd "s-/") 'indent-region)
#+end_src

#+RESULTS:
: indent-region

** Completion that uses many different methods to find options.

#+begin_src emacs-lisp 
(global-set-key (kbd "M-/") 'hippie-expand) ;; replace dabbrev-expand
(setq
 hippie-expand-try-functions-list
 '(try-expand-dabbrev                      ;; try to expand word "dynamically", searching the current buffer.
   try-expand-dabbrev-all-buffers          ;; try to expand word "dynamically", searching all other buffers.
   try-expand-dabbrev-from-kill            ;; try to expand word "dynamically", searching the kill ring.
   try-complete-file-name-partially        ;; try to complete text as a file name, as many characters as unique.
   try-complete-file-name                  ;; try to complete text as a file name.
   try-complete-all-abbrevs                ;; try to expand word before point according to all abbrev tables.
   try-expand-list                         ;; try to complete the current line to an entire line in the buffer.
   try-expand-line                         ;; try to complete the current line to an entire line in the buffer.
   try-complete-lisp-symbol-partially      ;; try to complete as an Emacs Lisp symbol, as many characters as unique.
   try-complete-lisp-symbol)               ;; try to complete word as an Emacs Lisp symbol
 )
#+end_src

** Turn on the menu bar for exploring new modes
#+begin_src emacs-lisp 
(global-set-key [f1] 'menu-bar-mode)
#+end_src

** Font size
#+begin_src emacs-lisp 
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)
#+end_src

** Use Regex searches by default, and use Visual Regexp to construct them.
Building regular expressions in Emacs is kind of a pain.  The =visual-regexp= package is a very convenient way to dynamically build regular expressions for searching and replacing. You enter a minibuffer that lets you type the regexp and the prospective matches to the expression you type are highlighted in the main buffer. =M-x vr/replace= gives you global replacement and =M-x vr/query-replace= lets you decide to replace per match. Visual regexp replace is bound to =C-c s= and visual =query-replace-regexp= to =C-c q=. 

- On =visual-regexp= see https://github.com/benma/visual-regexp.el

#+begin_src emacs-lisp 
  (global-set-key (kbd "C-s")   'isearch-forward-regexp)
  (global-set-key (kbd "\C-r")  'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)

  (use-package visual-regexp
    :defer t)
  (define-key global-map (kbd "C-c s") 'vr/replace) 
  (define-key global-map (kbd "C-c q") 'vr/query-replace)
  #+end_src

Make searches case-insensitive. Should be on by default but I've realized it is not when working with an org file. I tried the following. At first it did not work. Then I toogled mode from latex back to org and the case-insensitive search worked.

#+begin_src emacs-lisp 
 ;;  (setq case-fold-search nil) ; make searches case sensitive
  (setq case-fold-search t)   ; Make searches case insensitive

  (add-hook 'org-mode-hook
            (lambda ()
              (setq case-fold-search t)))
#+end_src

*** COMMENT =visual-regexp= on steroids: an extension
- DGM: turned off on 31/01/2020 to continue using the regular =visual-regexp= until I understand the version on steroids

- https://github.com/benma/visual-regexp-steroids.el
- https://www.reddit.com/r/emacs/comments/evdcie/back_to_cursors_stutteringchoppy_movement/

- Interesting: it'll make searches case sentitive.

#+BEGIN_SRC emacs-lisp
  ;; (use-package visual-regexp
  ;;   :defer)

  ;; (use-package visual-regexp-steroids
  ;;   :defer
  ;;   :demand
  ;;   :bind (("C-M-r" . vr/isearch-backward)
  ;;          ("C-M-s" . vr/isearch-forward)
  ;;          ("C-c q" . vr/query-replace)
  ;;          ("C-c r" . vr/replace)
  ;;          ("C-r"   . vr/isearch-backward) ;; C-M-r
  ;;          ("C-s"   . vr/isearch-forward) ;; C-M-s
  ;;          ))
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24115 4119 835327 964000) :init (24115 4119 834970 275000) :init-secs (0 0 747 842000) :use-package-secs (0 0 1160 571000) :config (24115 4119 834609 132000) :config-secs (0 0 9 101000)))

** File finding
#+begin_src emacs-lisp 
;;  (global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
;;  (global-set-key (kbd "C-x C-p") 'find-file-at-point) ;; I use helm and projectile for this
;;  (global-set-key (kbd "C-c y") 'bury-buffer)   ;; commented out because I never use this
;;  (global-set-key (kbd "C-c r") 'revert-buffer) ;; commented out because I never use this
;;  (global-set-key (kbd "M-`") 'file-cache-minibuffer-complete) ;; Key used somewhere else
;;  (global-set-key (kbd "C-x C-b") 'ibuffer) ;; bound to s-z now
;;  (global-set-key (kbd "C-x f") 'recentf-ido-find-file) ;; commented out until helm and ido are made to work together
#+end_src

#+RESULTS:
: ibuffer

** Browse the Kill Ring
Conveniently navigate the kill-ring (ie, the cut/copy clipboard history) in a pop-up buffer.

#+srcname: kill-ring
#+begin_src emacs-lisp 
  (when (require 'browse-kill-ring nil 'noerror)
  (browse-kill-ring-default-keybindings))
#+end_src

** Window switching.
=C-x o= goes to the next window, Shift+direction arrow moves between frames.

#+begin_src emacs-lisp 
;; dgm comments this out because Shift-Arrows should work in org mode for choosing dates and because instead of windmove I will use ace-window by the great abo-abo.
;; (windmove-default-keybindings) 
;; (global-set-key (kbd "C-x O") (lambda () (interactive) (other-window -1))) ;; back one
;; (global-set-key (kbd "C-x C-o") (lambda () (interactive) (other-window 2))) ;; forward two
;; (setq windmove-wrap-around t)
#+end_src

#+RESULTS:

** Resizing Windows on the fly
When your frame (i.e., the main Emacs window) is split into different parts (e.g. using =C-x 2= or =C-x 3=), you sometimes want to resize these parts dynamically. This defines =Shift-C-[arrow keys]= so you can do this easily. 

Note from DGM: these key bindings are superseded by org mode and don't work in the way intended here. For some reason org mode takes precedence.
 
#+srcname: resize-splits
#+begin_src emacs-lisp
  ;; resizing 'windows' (i.e., inside the frame)
  (global-set-key (kbd "s-M-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "s-M-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "s-M-<down>") 'shrink-window)
  (global-set-key (kbd "s-M-<up>") 'enlarge-window)  
#+end_src

#+RESULTS: resize-splits
: enlarge-window

** Rotate Windows in a Frame
When windows get out of order, you can rotate them.

#+source: rotate-windows
#+begin_src emacs-lisp
  ;;  (defun rotate-windows ()
  ;;    "Rotate your windows" (interactive) (cond ((not (> (count-windows) 1)) (message "You can't rotate a single window!"))
  ;; (t
  ;;  (setq i 1)
  ;;  (setq numWindows (count-windows))
  ;;  (while  (< i numWindows)
  ;;    (let* (
  ;;           (w1 (elt (window-list) i))
  ;;           (w2 (elt (window-list) (+ (% i numWindows) 1)))
  ;;           (b1 (window-buffer w1))
  ;;           (b2 (window-buffer w2))
  ;;           (s1 (window-start w1))
  ;;           (s2 (window-start w2))
  ;;           )
  ;;      (set-window-buffer w1  b2)
  ;;      (set-window-buffer w2 b1)
  ;;      (set-window-start w1 s2)
  ;;      (set-window-start w2 s1)
  ;;      (setq i (1+ i)))))))

  ;; ;; (global-set-key (kbd "C-c m") 'rotate-windows)
  ;; (global-set-key (kbd "s-;") 'rotate-windows)
#+end_src


#+RESULTS: rotate-windows
: rotate-windows

** COMMENT Indentation help
Disabled, as it interferes with abbrev-mode. 
#+begin_src emacs-lisp 
;; (global-set-key (kbd "C-x a") 'join-line)
#+end_src

#+RESULTS:

** Start eshell or switch to it if it's active.
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x m") 'eshell)
#+end_src
** Start a new eshell even if one is active.
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x M") (lambda () (interactive) (eshell t)))
#+end_src
** COMMENT Smex replaces M-x
- Watch out (14 nov 2018): smex is built on top of ido mode and ido mode may interfere with Helm, so until I clarify this I disable this. 
- Original notes:
    Smex replaces M-x, and is built on top of ido-mode. See
    http://github.com/nonsequitur/smex or
    http://www.emacswiki.org/emacs/Smex for details.  

The commands are displayed in an Ido completion buffer, ordered by relevance. The 7 most recently executed commands come first, the rest are sorted by frequency of use, command length and in alphabetical order.

Ido completion in 10 seconds: Typing selects matching commands: e.g. 'lnmd' matches 'line-number-mode'. C-s/C-r switches to the next/previous match. Enter executes the selected command.

=smex-major-mode-commands= runs Smex, limited to commands that are relevant to the active major mode. Try it with Dired or Magit.
=smex-show-unbound-commands= shows frequently used commands that have no key bindings.

*** Command help

=C-h f=, while Smex is active, runs describe-function on the currently selected command.

=M-.= jumps to the definition of the selected command.

=C-h w= shows the key bindings for the selected command. (Via =where-is=.)

#+srcname: smex
#+begin_src emacs-lisp
;;  (require 'smex)
;;  (smex-initialize)  
;;  (global-set-key (kbd "M-x") 'smex)  ;; I think this is superseded by helm now
;;  (global-set-key (kbd "C-x C-m") 'smex) 
;;  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
;;  (global-set-key (kbd "C-x C-M") 'smex-major-mode-commands)
  ;; This is your old M-x.
  ;; (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
;;  (setq smex-show-unbound-commands t)
;;  (smex-auto-update 30)
#+end_src

#+RESULTS: smex

** If you want to be able to M-x without meta
#+begin_src emacs-lisp 
;; (global-set-key (kbd "C-x C-m") 'smex)
#+end_src
    
** Use Option as Meta key

#+source: option-is-meta
#+begin_src emacs-lisp 
;;  (setq mac-option-modifier 'meta)    
#+end_src

** Use Command-Z as undo
Use a little bit of Mac keys, but not all of them.
#+source: mackeys1
#+begin_src emacs-lisp 
  ;; (global-set-key [(meta z)] 'undo) ;; M-z is for zap to char on my watch
  ;; (require 'redo+) 
  ;;(global-set-key [(alt a)] 'mark-whole-buffer)
  ;;(global-set-key [(alt v)] 'yank)
  ;; (global-set-key [(alt c)] 'kill-ring-save)
  ;;(global-set-key [(alt x)] 'kill-region)
  ;;(global-set-key [(alt s)] 'save-buffer)
  ;;(global-set-key [(alt f)] 'isearch-forward)
  ;;(global-set-key [(alt g)] 'isearch-repeat-forward)
  ;; (global-set-key [(alt z)] 'undo)
    #+end_src

** Fetch the contents at a URL, display it raw.
DGM comments it out as =C-M-x= is already taken for evaluating a function.

#+begin_src emacs-lisp 

;; (global-set-key (kbd "C-M-x") 'view-url)

#+end_src

#+RESULTS:
: view-url

** Help should search more than just commands

#+begin_src emacs-lisp 
(global-set-key (kbd "C-h a") 'apropos)
#+end_src

** Should be able to eval-and-replace anywhere.

As far as I can see, KHJ gives the binding to the =eval-and-replace= function but not the function! I found it in:
http://emacsredux.com/blog/2013/06/21/eval-and-replace/
and I copy it below because it is awesome.

#+begin_src emacs-lisp 
(defun eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))

(global-set-key (kbd "C-c e") 'eval-and-replace)
#+end_src

#+RESULTS:
: eval-and-replace

** Applications

Interesting, but I don't use this and i've mapped R's assignment operator to C-c i
#+begin_src emacs-lisp 
;;  (global-set-key (kbd "C-c j") (lambda () (interactive) (switch-or-start 'jabber-connect "*-jabber-*")))
;;  (global-set-key (kbd "C-c i") (lambda () (interactive) (switch-or-start (lambda ()
;;                                                                       (rcirc-connect "irc.freenode.net"))
;;                                                                     "*irc.freenode.net*")))
;;  (global-set-key (kbd "C-c J") 'jabber-send-presence)
;;  (global-set-key (kbd "C-c M-j") 'jabber-disconnect)
;;  (global-set-key (kbd "C-x g") 'magit-status) ;; now in dgm.org
#+end_src

#+RESULTS:

** Activate occur easily inside isearch
#+begin_src emacs-lisp 
(define-key isearch-mode-map (kbd "C-o")
  (lambda () (interactive)
    (let ((case-fold-search isearch-case-fold-search))
      (occur (if isearch-regexp isearch-string (regexp-quote isearch-string))))))
#+end_src

And from https://github.com/danielmai/.emacs.d/blob/master/config.org

The following function for occur-dwim is taken from Oleh Krehel from his blog post at (or emacs. It takes the current region or the symbol at point as the default value for occur.

#+BEGIN_SRC emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))

(bind-key "M-s o" 'occur-dwim)
#+END_SRC

#+RESULTS:
: occur-dwim

** Winner mode

Winner mode allows you to undo/redo changes to window changes in Emacs.

Remember the previous window configurations and jump back to them as needed (as when, e.g., some other mode messes with your working layout.) Rebind the default keys to =C-c-up= and =C-c-down= as in a moment we'll assign =C-c-right= for rotating windows.

Winner Mode has been included with GNU Emacs since version 20 (https://www.emacswiki.org/emacs/WinnerMode) so no need for =use-package=.

#+source: local-winner-mode
#+begin_src emacs-lisp
;; (use-package winner
;;  :config
;;  (winner-mode t)
;;  :bind (("C-c <down>" . winner-undo)
;;         ("C-c <up>" . winner-redo)))

;; Old khj's code
(winner-mode 1)
(global-set-key (kbd "C-c <up>") 'winner-undo)
(global-set-key (kbd "C-c <down>") 'winner-redo)
#+end_src

#+RESULTS: local-winner-mode
: winner-redo

Restore the windows after Ediff quits. By default, when you quit the Ediff session with q, it just leaves the two diff windows around, instead of restoring the window configuration from when Ediff was started.

(Tip from https://caolan.org/dotfiles/emacs.html#orgd96aeb0)

#+BEGIN_SRC emacs-lisp 
(add-hook 'ediff-after-quit-hook-internal 'winner-undo)
#+END_SRC

#+RESULTS:
| winner-undo |

** Don't Use Suspend Frame

I (DGM) kept bumping into =C-x C-z= when I wanted to undo something and this binding means =suspend-frame=. So I disable the command.

From https://stackoverflow.com/questions/7243155/cant-seem-to-get-rid-of-ctrl-x-ctrl-z-key-binding-in-emacs-for-minimizing-windo

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x\C-z" nil)
(global-set-key (kbd "C-x C-z") nil)
(put 'suspend-frame 'disabled t)
#+END_SRC

#+RESULTS:
: t

By default C-z is bound to "Suspend Frame", which minimizes Emacs. I find this of no use. Bind it to "Undo" instead. 

#+source: disable-suspend-frame
#+begin_src emacs-lisp
  ;; I can't remember ever having meant to use C-z to suspend the frame
  (global-set-key (kbd "C-z") 'undo)
#+end_src

** CUA mode for rectangle editing
Sometimes very useful (but we don't use the core cua keys.)

DGM: I don't like CUA generally though for rectangle editing it can be very handy, but I've learnt the emacs way to rectangle editing anyway so... I disable it as CUA bindings could interfere with other findings.... but wait!! below are many functions I ignored about rectangle editing!!! Plus it seems the great KHJ disables the core =cua-mode= bindings so I'll leave this running!

BUT, I've added two lines: one to unset the C-return binding in CUA mode and one to set C-M-return to rectangle marking.  
The reason is that in many data science programs, the great ista zahn binds the sending of current line to interpreter to C-return and I use this much more often than rectangle editing.

#+source: cua-rectangle
#+begin_src emacs-lisp 
  (setq cua-enable-cua-keys nil)
  (global-unset-key (read-kbd-macro "C-<return>"))
  (setq cua-rectangle-mark-key (kbd "C-M-<return>"))
  (cua-mode)

;; To start a rectangle, use [C-return] and extend it using the normal
;; movement keys (up, down, left, right, home, end, C-home,
;; C-end). Once the rectangle has the desired size, you can cut or
;; copy it using C-w and M-w, and you can
;; subsequently insert it - as a rectangle - using C-y.  So
;; the only new command you need to know to work with cua-mode
;; rectangles is C-return!
;;
;; Normally, when you paste a rectangle using C-v (C-y), each line of
;; the rectangle is inserted into the existing lines in the buffer.
;; If overwrite-mode is active when you paste a rectangle, it is
;; inserted as normal (multi-line) text.
;;
;; And there's more: If you want to extend or reduce the size of the
;; rectangle in one of the other corners of the rectangle, just use
;; [return] to move the cursor to the "next" corner.  Or you can use
;; the [M-up], [M-down], [M-left], and [M-right] keys to move the
;; entire rectangle overlay (but not the contents) in the given
;; direction.
;;
;; [C-return] cancels the rectangle
;; [C-space] activates the region bounded by the rectangle

;; cua-mode's rectangle support also includes all the normal rectangle
;; functions with easy access:
;;
;; [M-a] aligns all words at the left edge of the rectangle
;; [M-b] fills the rectangle with blanks (tabs and spaces)
;; [M-c] closes the rectangle by removing all blanks at the left edge
;;       of the rectangle
;; [M-f] fills the rectangle with a single character (prompt)
;; [M-i] increases the first number found on each line of the rectangle
;;       by the amount given by the numeric prefix argument (default 1)
;;       It recognizes 0x... as hexadecimal numbers
;; [M-k] kills the rectangle as normal multi-line text (for paste)
;; [M-l] downcases the rectangle
;; [M-m] copies the rectangle as normal multi-line text (for paste)
;; [M-n] fills each line of the rectangle with increasing numbers using
;;       a supplied format string (prompt)
;; [M-o] opens the rectangle by moving the highlighted text to the
;;       right of the rectangle and filling the rectangle with [blanks.
;;  M-p] toggles virtual straight rectangle edges
;; [M-P] inserts tabs and spaces (padding) to make real straight edges
;; [M-q] performs text filling on the rectangle
;; [M-r] replaces REGEXP (prompt) by STRING (prompt) in rectangle
;; [M-R] reverse the lines in the rectangle
;; [M-s] fills each line of the rectangle with the same STRING (prompt)
;; [M-t] performs text fill of the rectangle with TEXT (prompt)
;; [M-u] upcases the rectangle
;; [M-|] runs shell command on rectangle
;; [M-'] restricts rectangle to lines with CHAR (prompt) at left column
;; [M-/] restricts rectangle to lines matching REGEXP (prompt)
;; [C-?] Shows a brief list of the above commands.

;; [M-C-up] and [M-C-down] scrolls the lines INSIDE the rectangle up
;; and down; lines scrolled outside the top or bottom of the rectangle
;; are lost, but can be recovered using [C-z].
  
#+end_src

#+RESULTS: cua-rectangle
: t

** Expand Region

   Expand selected region by semantic units. Just keep pressing the key until it selects what you want.

#+begin_src emacs-lisp
(use-package expand-region
  :defer t
  :bind (("s-<SPC>"       . er/expand-region)
         ("s-<backspace>" . er/contract-region)))
#+end_src

#+RESULTS: expand-region
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23973 37848 504409 702000) :init (23973 37848 504337 958000) :init-secs (0 0 24 784000) :use-package-secs (0 0 142 83000)))

*** COMMENT Remapping =er/expand-region=

Old code
#+begin_src emacs-lisp
(global-set-key (kbd "<s-SPC>") 'er/expand-region)
(global-set-key (kbd "<s-backspace>") 'er/contract-region)
#+end_src

#+RESULTS:
: er/contract-region

** COMMENT Multiple Cursors
   -Use multiple cursors for search, replace, and text-cleaning tasks. For a demonstration, see http://emacsrocks.com/e13.html
   Alternative customization at https://caolan.org/dotfiles/emacs.html#orgd96aeb0

See also http://pragmaticemacs.com/emacs/multiple-cursors/ and http://pragmaticemacs.com/emacs/add-multiple-cursors-with-mouse-clicks/

M-x mc/insert-numbers: By default, it inserts 0 for the first cursor, 1 for the second cursor etc, but you can change this by using a numeric prefix argument. So to get 1, 2, 3 as in your example, use C-u 1 M-x mc/insert-numbers.

HOWEVER, this is the possible cause of choppy cursor movement!! See https://www.reddit.com/r/emacs/comments/d46era/troubleshooting_choppy_cursor_movement/

#+source: multiple-cursors
#+begin_src emacs-lisp
;;(use-package multiple-cursors
;;  :defer t
;;  :bind
;;  ("C-c C-m l"   . mc/edit-lines) ; When you have an active region that spans multiple lines, add a cursor to each line
;;  ("C-c C-m d"   . mc/mark-all-dwim)
;;  ("C-c C-m A"   . mc/mark-all-like-this)
;;  ("C-c C-m a"   . mc/edit-beginnings-of-lines)
;;  ("C-c C-m e"   . mc/edit-ends-of-lines)
;;  ("C-c C-m E"   . mc/mark-more-like-this-extended)
;;  ("C-c C-m p"   . mc/mark-previous-lines)
;;  ("C-c C-m n"   . mc/mark-next-lines)
;;  ("C-c C-m P"   . mc/mark-previous-like-this)
;;  ("C-c C-m N"   . mc/mark-next-like-this) ;; works on same line! Cool! Warning: have to mark region first.
;;  ("C-c C-m h"   . mc-hide-unmatched-lines-mode)
;;  ("C-c C-m z"   . mc/insert-numbers)
;;  ("C-c C-m u"   . mc/unmark-next-like-this)
;;  ("C-c C-m U"   . mc/unmark-previous-like-this)
;;  ("C-c C-m r"   . mc/mark-all-in-region)
;;  )
#+end_src  

#+RESULTS: multiple-cursors
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23913 40233 583591 570000) :init (23913 40233 582472 937000) :config (23913 40233 582421 924000) :config-secs (0 0 17 1000) :init-secs (0 0 118 611000) :use-package-secs (0 0 1469 621000)))

Previous code: 

#+BEGIN_EXAMPLE
  ;; When you have an active region that spans multiple lines, the following will add a cursor to each line:
  ; (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

    (global-set-key (kbd "s-{") 'mc/edit-lines)  ; esto no se' que' hace
  
  ;(global-set-key (kbd "C-S-c C-e") 'mc/edit-ends-of-lines)
  ;(global-set-key (kbd "C-S-c C-a") 'mc/edit-beginnings-of-lines)
  (global-set-key (kbd "s-(") 'mc/edit-beginnings-of-lines)
  (global-set-key (kbd "s-)") 'mc/edit-ends-of-lines)
  
  ;; When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer, use:
  ; (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "s-+") 'mc/mark-next-like-this)
  ;(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "s-*") 'mc/mark-previous-like-this)
  (global-set-key (kbd "s-#") 'mc/unmark-next-like-this)
  (global-set-key (kbd "s-!") 'mc/unmark-previous-like-this)
  ;(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  (global-set-key (kbd "s-@") 'mc/mark-all-like-this) ; works on the same line! This is the coolest bit I think! Warning: have to mark region first.
  

  ;; DGM comments out on Feb 2019 cos no H key on my keyboard
  ;; Rectangular region mode
  ;(global-set-key (kbd "H-SPC") 'set-rectangular-region-anchor)
  
  ;; Mark more like this
  ;(global-set-key (kbd "H-a") 'mc/mark-all-like-this)
  ;(global-set-key (kbd "H-p") 'mc/mark-previous-like-this)
  ;(global-set-key (kbd "H-n") 'mc/mark-next-like-this)
  ;(global-set-key (kbd "H-S-n") 'mc/mark-more-like-this-extended)
  ;(global-set-key (kbd "H-S-a") 'mc/mark-all-in-region)
#+END_EXAMPLE

First mark the word, then add more cursors. To get out of multiple-cursors-mode, press <return> or C-g. The latter will first disable multiple regions before disabling multiple cursors. If you want to insert a newline in multiple-cursors-mode, use C-j.

** Minimal mode
   A nice clutter-free appearance with a reduced-size modeline, no
   scroll bars, and no fringe indicators. Useful in conjunction with running Emacs full-screen.
#+source: minimal-mode
#+begin_src emacs-lisp
(set-fringe-mode '(5 . 5))
(require 'minimal)
#+end_src

#+RESULTS: minimal-mode
: minimal

** DGM bindings 
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-<escape>") 'cua-set-mark)
#+END_SRC

#+RESULTS:
: cua-set-mark

** Closing
#+begin_src emacs-lisp 
(provide 'starter-kit-bindings)
;;; starter-kit-bindings.el ends here
#+end_src

* Final message
#+source: message-line
#+begin_src emacs-lisp
  (message "Starter Kit Bindings loaded.")
#+end_src
