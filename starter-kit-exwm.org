# -*- coding: utf-8 -*-
# -*- find-file-hook: org-babel-execute-buffer -*-

#+TITLE: EXWM Customizations
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args :tangle yes

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* COMMENT Set up of EXWM: emacs as desktop manager!

First step with =use-package= moved to init.


Tip from Uncle Dave's emacs. 

Emacs as a daemon means you can use =emacsclient <filename>= to seamlessly edit files from the terminal directly.
Plus in https://github.com/ch11ng/exwm/wiki/Configuration-Example the developer puts this line before =(require 'exwm)=, so that is why I've taken it out of the bit on exwm. 
From https://caolan.org/dotfiles/emacs.html#orgd96aeb0,  run server if using =emacsclient= as default EDITOR also useful for =org-protocol capture= https://www.emacswiki.org/emacs/EmacsClient


#+source: exwm-starting
#+begin_src emacs-lisp :tangle no

;; (server-start)

;;  (use-package exwm 
;;    :ensure t
;;    :config 
  
;;    ;; necessary to configure exwm manually
;;    (require 'exwm-config)

;;    ;; fringe size, most people prefer 1 (uncle dave's setup)
;;    (fringe-mode 3)

;; dgm comments this as it appears to not be working!! reverts to old (server-star)
;;    (require 'server)
;;      (unless (server-running-p)
;;        (server-start))

;;    (exwm-config-default))

    ;; this just enables exwm, it started automatically once everything is ready
;; commented out now that I have the Ferguson setup    (exwm-enable))  
      #+end_src

      #+RESULTS: exwm-starting
      : t

* Further configuration

When stating the client from .xinitrc, =save-buffer-kill-terminal= will =force-kill= Emacs before it can run through =kill-emacs-hook=.

#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "C-x C-c") 'save-buffers-kill-emacs)
#+END_SRC

#+RESULTS:
: save-buffers-kill-emacs

** Buffers

Rename buffer to window title.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun ambrevar/exwm-rename-buffer-to-title () (exwm-workspace-rename-buffer exwm-title))
(add-hook 'exwm-update-title-hook 'ambrevar/exwm-rename-buffer-to-title)

(add-hook 'exwm-floating-setup-hook 'exwm-layout-hide-mode-line)
(add-hook 'exwm-floating-exit-hook 'exwm-layout-show-mode-line)
#+END_SRC

Allow non-floating resizing with mouse.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq window-divider-default-bottom-width 2
      window-divider-default-right-width 2)
(window-divider-mode)
#+END_SRC

#+RESULTS:
: t

** System tray

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'exwm-systemtray)
(exwm-systemtray-enable)
(setq exwm-systemtray-height 16)
#+END_SRC
** Shortcuts 

These cannot be set globally: if Emacs were to be run in another WM, the =s-= prefix would conflict with the WM bindings.



#+BEGIN_SRC emacs-lisp :tangle yes
(exwm-input-set-key (kbd "s-<left>") #'windmove-left)
(exwm-input-set-key (kbd "s-<down>") #'windmove-down)
(exwm-input-set-key (kbd "s-<up>") #'windmove-up)
(exwm-input-set-key (kbd "s-<right>") #'windmove-right)
(exwm-input-set-key (kbd "s-r") #'exwm-reset) 
;; (exwm-input-set-key (kbd "s-b") #'eww) ;; commented out as I now use starter-kit-search-engine-with-eww.org
;; (exwm-input-set-key (kbd "s-D") #'kill-this-buffer) I don't need a shortcut for this
;; (exwm-input-set-key (kbd "s-b") #'list-buffers)   "s-b" mapped to helm-mini in starter-kit-helm.org
;;(exwm-input-set-key (kbd "s-f") #'find-file)       "s-f" mapped to helm-find-files in starter-kit-helm.org 

(when (require 'functions)
  (exwm-input-set-key (kbd "C-$") 'ambrevar/toggle-window-split))
;; DGM comments out as never used
  ;;(exwm-input-set-key (kbd "s-H") 'ambrevar/swap-windows-left)
  ;;(exwm-input-set-key (kbd "s-J") 'ambrevar/swap-windows-below)
  ;;(exwm-input-set-key (kbd "s-K") 'ambrevar/swap-windows-above)
  ;;(exwm-input-set-key (kbd "s-L") 'ambrevar/swap-windows-right))
#+END_SRC

#+RESULTS:

The following can only apply to EXWM buffers, else it could have unexpected effects.

#+BEGIN_SRC emacs-lisp :tangle yes
(push ?\s-  exwm-input-prefix-keys)
;; (exwm-input-set-key (kbd "s-i") #'follow-delete-other-windows-and-split) ;; no lo veo claro 
;; (exwm-input-set-key (kbd "s-o") #'ambrevar/toggle-single-window) ;; not working... =s-o= not recognized, don't know why. 
;; DGM comments out as never used: 
;; (exwm-input-set-key (kbd "s-O") #'exwm-layout-toggle-fullscreen)
#+END_SRC

#+RESULTS:
** External application shortcuts.

I comment out =s-r= because it is already defined for =helm-run-external-command= in =starter-kit-helm.org=.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun ambrevar/exwm-start (command)
  (interactive (list (read-shell-command "$ ")))
  (start-process-shell-command command nil command))
(exwm-input-set-key (kbd "s-&") #'ambrevar/exwm-start)
#+END_SRC

#+RESULTS:

;; (exwm-input-set-key (kbd "s-r") #'ambrevar/exwm-start) 


** Magit 

I don't need this shortcut as I already have =C-x g= for =magit-status=.

#+BEGIN_SRC emacs-lisp :tangle no
(when (fboundp 'magit-status)
  (exwm-input-set-key (kbd "s-v") #'magit-status))
#+END_SRC

** Send key literally 

From Damien Cassou.  Bind =C-q= so that the next key is sent literally to the application. 

#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'exwm-input-prefix-keys ?\C-q)
    (define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)
#+END_SRC

#+RESULTS:
: exwm-input-send-next-key

** Simulation keys

From  https://github.com/ch11ng/exwm/wiki/Configuration-Example. 

Note that with the package =whole-line-or-region-kill-save= these simulation keys stop working on chromium, so there I use the native keybind =C-c= after doing =C-q= for sending the key straight down to the native process. I think it is worthwhile because whole-line is very handy in emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq exwm-input-simulation-keys
      '(
        ;; movement
        ([?\C-b] . [left])
        ([?\M-b] . [C-left])
        ([?\C-f] . [right])
        ([?\M-f] . [C-right])
        ([?\C-p] . [up])
        ([?\C-n] . [down])
        ([?\C-a] . [home])
        ([?\C-e] . [end])
        ([?\M-v] . [prior])
        ([?\C-v] . [next])
        ([?\C-d] . [delete])
        ([?\C-k] . [S-end delete])
        ([?\M-h] . [S-end select])
        ([?\M-d] . [C-S-right ?\C-x])
        ([M-backspace] . [C-S-left ?\C-x])
        ;; escape
        ([?\C-g] . [escape])
        ;; cut/paste.
        ([?\C-w] . [?\C-x])
        ([?\M-w] . [?\C-c])
        ([?\C-y] . [?\C-v])
        ;; search
        ([?\C-s] . [?\C-f])))
#+END_SRC

#+RESULTS:
: (([2] . [left]) ([134217826] . [C-left]) ([6] . [right]) ([134217830] . [C-right]) ([16] . [up]) ([14] . [down]) ([1] . [home]) ([5] . [end]) ([134217846] . [prior]) ([22] . [next]) ([4] . [delete]) ([11] . [S-end delete]) ([134217832] . [S-end select]) ([134217828] . [C-S-right 24]) ([M-backspace] . [C-S-left 24]) ([7] . [escape]) ([23] . [24]) ([134217847] . [3]) ([25] . [22]) ([19] . [6]))

* Ambrevar's functions

#+BEGIN_SRC emacs-lisp :tangle yes
;; (require 'functions) ;; this is the first thing loaded in the whole process so no need to use it here again
(exwm-input-set-key (kbd "s-<tab>") #'ambrevar/switch-to-last-buffer)
#+END_SRC

** COMMENT Lock screen 

Commented out as I use Daedreth's way because it uses =async=. 

#+BEGIN_SRC emacs-lisp :tangle no
(defun ambrevar/exwm-start-lock () (interactive) (start-process "slock" nil "slock"))
(exwm-input-set-key (kbd "s-_") #'ambrevar/exwm-start-lock)
#+END_SRC

** COMMENT Screenshot 

Superseded by Daedreth's stuff

#+BEGIN_SRC emacs-lisp :tangle no
(defun ambrevar/exwm-start-screenshot () (interactive) (start-process-shell-command "scrot" nil "scrot ~/temp/screen-%F-%T.png"))
(exwm-input-set-key (kbd "s->") #'ambrevar/exwm-start-screenshot)
#+END_SRC

#+RESULTS:

* More goodies 
** Remote editing

From Uncle Dave at https://github.com/daedreth/UncleDavesEmacs.

I have no need to directly edit files over SSH, but what I do need is a way to edit files as root. Opening up nano in a terminal as root to play around with grubs default settings is a no-no, this solves that.

*** Editing with sudo
Pretty self-explanatory, useful as hell if you use exwm.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package sudo-edit
  :ensure t
  :bind
    ("s-\#" . sudo-edit))
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23919 49079 895094 346000) :init (23919 49079 894940 871000) :init-secs (0 0 63 304000) :use-package-secs (0 0 266 479000) :config (23919 49079 894905 501000) :config-secs (0 0 4 992000)))

** Check for start-up errors. See =~/.profile=.

#+BEGIN_SRC emacs-lisp :tangle yes
(let ((error-logs (directory-files "~" t "errors.*log$")))
  (when error-logs
    (warn "Error during system startup.  See %s." (mapconcat 'identity error-logs ", "))
    (when (daemonp)
      ;; Non-daemon Emacs already brings up the *Warning* buffer.
      (setq initial-buffer-choice
            (lambda () (get-buffer "*Warnings*"))))))
#+END_SRC

** =char= mode

Some programs such as 'emacs' are better off being started in char-mode.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun ambrevar/exwm-start-in-char-mode ()
  (when (string-prefix-p "emacs" exwm-instance-name)
    (exwm-input-release-keyboard (exwm--buffer->id (window-buffer)))))
(add-hook 'exwm-manage-finish-hook 'ambrevar/exwm-start-in-char-mode)
#+END_SRC

#+RESULTS:
| ambrevar/exwm-start-in-char-mode |

* Technomancy's customization

** COMMENT Workspaces
We start out with 1 workspace, as exwm creates workspaces dynamically. (I think Technomancy starts with 9 workspaces really and this setup of 1 is really from Uncle Dave.)
??? Don't know really. I see three workspaces to start with if I do =s-w= so I disable to see what effect it has

#+BEGIN_SRC emacs-lisp :tangle no
(setq exwm-workspace-number 1
      exwm-workspace-show-all-buffers t
      exwm-layout-show-all-buffers t)
#+END_SRC

The next loop will bind =s-<number>= to switch to the corresponding workspace from https://github.com/daedreth/UncleDavesEmacs.

#+BEGIN_SRC emacs-lisp :tangle no
;;    (dotimes (i 10)
;;      (exwm-input-set-key (kbd (format "s-%d" i))
;;                          `(lambda ()
;;                             (interactive)
;;                             (exwm-workspace-switch-create ,i))))
#+END_SRC


** Making the audio keys work

#+BEGIN_SRC emacs-lisp :tangle yes
  (dolist (k '(("<XF86AudioLowerVolume>"
                "amixer sset Master 5%-")
               ("<XF86AudioRaiseVolume>"
                "amixer set Master unmute; amixer sset Master 5%+")))
    (let ((f (lambda () (interactive)
               (save-window-excursion
                 (start-process-shell-command (cadr k) nil (cadr k))))))
      (exwm-input-set-key (kbd (car k)) f)))
#+END_SRC

#+RESULTS:

* Launchers
Stuff from Uncle Dave at https://github.com/daedreth/UncleDavesEmacs

Since I do not use a GUI launcher and do not have an external one like dmenu or rofi, I figured the best way to launch my most used applications would be direct emacsy keybindings.

** Functions to start processes
I guess this goes without saying but you absolutely have to change the arguments to suit the software that you are using. What good is a launcher for discord if you don’t use it at all.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun exwm-async-run (name)
  (interactive)
  (start-process name nil name))

(defun daedreth/launch-browser ()
  (interactive)
  (exwm-async-run "chromium"))

(defun daedreth/lock-screen ()
  (interactive)
  (exwm-async-run "slock"))

;;(defun daedreth/mu4e ()
;;  (interactive)
;;  (exwm-async-run "mu"))
#+END_SRC

#+RESULTS:
: daedreth/lock-screen

*** Keybindings to start processes

I've selected an unlikely combination to avoid locking the screen accidentally. But it is not too hard to type either as I need =super= and =shift= together and the the key with the minus sign ~-~.

#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "C-\{") 'daedreth/launch-browser) ;; commented out as <s-w> also launches the browser and <s-W> does so in other window
(global-set-key (kbd "s-_") 'daedreth/lock-screen)
#+END_SRC

#+RESULTS:
: daedreth/lock-screen

** exwm-edit

From: https://github.com/agzam/exwm-edit

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package exwm-edit)
#+END_SRC

* Redshift

 Great for using the computer at night

#+BEGIN_EXAMPLE
sudo apt install redshift redshift-gtk
#+END_EXAMPLE


#+BEGIN_SRC emacs-lisp :tangle yes
;; Redshift off
(exwm-input-set-key (kbd "C-\)")
(lambda () (interactive) (start-process "" nil "redshift" "-x")))

;; Redshift on
(exwm-input-set-key (kbd "C-\(")
                    (lambda () (interactive) (start-process "" nil "redshift" "-O" "3500")))
#+END_SRC

#+RESULTS:

* Provide

#+BEGIN_SRC emacs-lisp :tangle yes
(provide 'starter-kit-exwm)
#+END_SRC

* Final message
#+source: message-line
#+begin_src emacs-lisp :tangle yes
(message "Starter Kit User EXWM File loaded.")
#+end_src




