* ox-latex

From https://github.com/kjhealy/emacs-starter-kit/blob/master/kjhealy.org

    #+source: orgmode-latex-export
    #+BEGIN_SRC emacs-lisp :tangle yes



    #+END_SRC


* Prettify symbols

https://www.gnu.org/software/auctex/manual/auctex/Prettifying.html

... not sure this is how it works. Plus I think it was already on.

#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'TeX-mode-hook
    (lambda ()
      (add-to-list 'prettify-symbols-mode)))
#+END_SRC

Trying the next bit from https://yoo2080.wordpress.com/2016/11/15/how-to-make-prettify-symbols-mode-work-with-auctex/

DGM 27 august 2020: turned off cos I don't like prettifying symbols any more.
#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'TeX-mode-hook 'prettify-symbols-mode)
#+END_SRC

#+RESULTS:
| prettify-symbols-mode | (lambda nil (add-to-list 'prettify-symbols-mode)) | (lambda nil (setq TeX-command-default latexmk)) | (lambda nil (add-to-list 'TeX-output-view-style '(^pdf$ . /usr/bin/evince  %n %o %b))) | pandoc-mode |

** Package =latex-pretty-symbols=
DGM 27 august 2020: turned off cos I don't like prettifying symbols any more.

#+source: latex-pretty-symbols 
#+begin_src emacs-lisp :tangle no
(use-package latex-pretty-symbols
  :defer t)
(add-hook 'LaTeX-mode-hook 'latex-unicode-simplified) 
#+END_SRC

#+RESULTS: latex-pretty-symbols
| er/add-latex-mode-expansions | TeX-PDF-mode | turn-on-reftex | latex-unicode-simplified |

#+end_src

** Local vc commands

    Run the =vc= shellscript before running xelatex with =C-c c= (instead
    of =C-c C-c= for regular compile). This assumes you're using the VC
    LaTeX package, have vc in your path, and have =vc-awk= in the
    directory you're working in.

    DGM: I comment it out as =C-c c= is used elsewhere for capture in org.

#+srcname: vc-command
#+begin_src emacs-lisp :tangle yes
;;    (fset 'run-vc-then-xelatex
;;    [?\M-! ?v ?c return ?\C-c ?\C-c return])
;;    (global-set-key (kbd "C-c c") 'run-vc-then-xelatex);; Run the VC command before running xelatex
;;    (fset 'run-vc-then-xelatex
;;    [?\M-! ?v ?c return ?\C-c ?\C-c return])
;;    (global-set-key (kbd "\C-c c") 'run-vc-then-xelatex)
#+end_src

    Or just run =vc= alone --- this is useful when writing LaTeX files
    using org-mode. (See the org-mode customizations below).

    dgm: I comment this out. I don't know how to make =vc= work as a command... I think you need to first make a =makefile=.  Plus I think =vc= is run automatically when =latexmk= is run thanks to the =\immediate\write18{sh ./vc}= line

#+source: vc-alone
#+begin_src emacs-lisp :tangle yes
;;  (global-set-key (kbd "\C-c v")
;;                      (lambda ()
;;                        (interactive)
;;                        (shell-command "vc")))
#+end_src


;; emacs-lisp from https://github.com/nkicg6/emacs-config
;; org-bibtex

;; manage citations
;; (require 'org-bibtex)


Disappeared in upgrade 2 june 2020

DGM 10 Jan 21: seems to be back. Read: http://gewhere.github.io/org-bibtex

** Biblio

From: http://juanjose.garciaripoll.com/blog/managing-bibliographies-from-emacs/

A nice complement to ebib is =biblio=, a library to query various databases, such as Crossref, the arXiv, etc. This library allows you to grab bibtex records for the articles you search for. The following code links this library with ebib, so that you can press Ctrl-i and the current record is added to your ebib database.

#+begin_src emacs-lisp :tangle no
(use-package biblio
  :after ebib
  :custom
  (biblio-arxiv-bibtex-header "misc")
  :init
  ;; This links biblio to ebib
  (defun biblio-to-ebib-and-quit ()
    (interactive)
    (biblio--selection-forward-bibtex
     (lambda (entry metadata)
       (print entry)
       (ebib-capture-raw-bibtex entry)
       (ebib--update-buffers))
     t))
  )

;; (define-key biblio-selection-mode-map (kbd "C-i") 'biblio-to-ebib-and-quit)
;;  :bind
;;  (map biblio-selection-mode-map
;;        ("C-i" . biblio-to-ebib-and-quit))
#+end_src

#+RESULTS:
: biblio-to-ebib-and-quit

In order for this to work, you need the following code, which extends ebib with a function to edit raw Bibtex entries from arbitrary sources.

#+begin_src emacs-lisp :tangle no
(defvar ebib-capture-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map "\C-c\C-c" #'ebib-capture-finalize)
    (define-key map "\C-c\C-k" #'ebib-capture-kill)
    map)
  "Keymap for `ebib-capture-mode', a minor mode.
  Use this map to set additional keybindings for when Org mode is used
  for a capture buffer.")

(defvar ebib-capture-mode-hook nil
  "Hook for the `ebib-capture-mode' minor mode.")

(define-minor-mode ebib-capture-mode
  "Minor mode for special key bindings in a capture buffer.

  Turning on this mode runs the normal hook `ebib-capture-mode-hook'."
  nil " Cap" ebib-capture-mode-map
  (setq-local
   header-line-format
   (substitute-command-keys
    "\\<ebib-capture-mode-map>Capture buffer.  Finish \
  `\\[ebib-capture-finalize]', abort `\\[ebib-capture-kill]'.")))

(defun ebib-capture-kill ()
  "Abort the current capture process."
  (interactive)
  ;; FIXME: This does not do the right thing, we need to remove the
  ;; new stuff by hand it is easy: undo, then kill the buffer
  (kill-buffer (current-buffer))
  (quit-window))

(defun ebib-capture-finalize ()
  "Save entries and finalize."
  (interactive)
  (ebib-execute-when
    ((or slave-db filtered-db)
     (error "[Ebib] Cannot merge into a filtered or a slave database"))
    (real-db
     (unless (ebib-capture-check-duplicates)
       (let ((result (ebib--bib-find-bibtex-entries ebib--cur-db nil)))
         (ebib--log 'message "%d entries, %d @Strings and %s @Preamble found in file."
                    (car result)
                    (cadr result)
                    (if (nth 2 result) "a" "no")))
       (ebib--update-buffers)
       (ebib--set-modified t ebib--cur-db)
       (ebib-capture-kill)))
    (default (beep))))

(defun ebib-capture-check-duplicates ()
  (interactive)
  (let ((db (ebib-db-new-database))
        (duplicates '()))
    (let ((result (ebib--bib-find-bibtex-entries db nil)))
      (if (zerop (car result))
          (message "No entries found")
        (maphash
         (lambda (key value)
           (if (ebib-db-get-entry key ebib--cur-db t)
               (push key duplicates)))
         (ebib-db-val 'entries db))))
    (when duplicates
      (message "Found duplicate keys: %S" duplicates)
      (goto-char 0)
      (search-forward (car duplicates)))))

(defun ebib-capture-raw-bibtex (entry)
  (with-current-buffer (get-buffer-create "*Biblio entry*")
    (erase-buffer)
    (insert entry)
    (bibtex-mode)
    (ebib-capture-mode)
    (pop-to-buffer (current-buffer))
    (current-buffer)))
#+end_src

#+RESULTS:
: ebib-capture-raw-bibtex


*** Local RefTeX Settings

Tell RefTeX where the bibliography files are. Commented out for now cos the path specified does not exist and I dont know what this bibpath-environment-variables does.

#+srcname: local-reftex
#+begin_src emacs-lisp :tangle no
    ;; Make RefTex able to find my local bib files
     (setq reftex-bibpath-environment-variables
;;     '("/media/dgm/blue/documents/bibs"))
     '("/home/dgm/texmf/bibtex/bib"))
#+end_src


*** Default Bibliography
This is important when editing source code in Org-babel, since the LaTeX source code block being edited probably doesn't include the \bibliography{} command that RefTeX uses to find bibliographic database(s).  Make certain also that RefTeX has a path to the bibliographic databases.  This source-code block is turned off be default as it should be configured by the user in a personal file/directory.

#+srcname: default-bibliography
#+begin_src emacs-lisp :tangle no

 (setq reftex-default-bibliography '("/media/dgm/blue/documents/bibs/socbib.bib"))

#+end_src

#+RESULTS: default-bibliography
| /media/dgm/blue/documents/bibs/socbib.bib |

*** Use '-' as the separator in auto-generated bibtex keys
We use this (rather than the underscore character) for compatibilty with Pandoc.

#+source: bibtex-key-separator
#+begin_src emacs-lisp :tangle no
  (setq bibtex-autokey-titleword-separator "_")
  (setq bibtex-autokey-year-title-separator ":_")
#+end_src


*** Keep all entries in sorted order

#+BEGIN_SRC emacs-lisp :tangle no
(setq bibtex-maintain-sorted-entries t)
#+END_SRC

#+RESULTS:
: t

*** Entry cleaning with bibtex

Customize BibTeX bibtex-clean-entry as in https://github.com/higham/dot-emacs/blob/master/.emacs

#+BEGIN_SRC emacs-lisp :tangle no
(setq bibtex-entry-format
      `(page-dashes required-fields
         numerical-fields whitespace last-comma delimiters
         unify-case sort-fields))

(setq bibtex-field-delimiters 'double-quotes)
(setq bibtex-entry-delimiters 'braces)
#+END_SRC

#+RESULTS:
: braces

Higham prefers closing brace on its own line after cleaning BibTeX entry. I don't

#+BEGIN_SRC emacs-lisp :tangle no
(setq bibtex-clean-entry-hook 'mybibtex-clean-extra)
(defun mybibtex-clean-extra ()
  "Move final right brace to a line of its own."
  (progn (bibtex-end-of-entry) (left-char) (newline-and-indent)
         (insert "      ")))
#+END_SRC
 
*** Configure Biber
Allow AucTeX to use biber as well as/instead of bibtex.

#+source: setup-biber
#+begin_src emacs-lisp :tangle no
    ;; Biber under AUCTeX
    (defun TeX-run-Biber (name command file)
      "Create a process for NAME using COMMAND to format FILE with Biber." 
     (let ((process (TeX-run-command name command file)))
        (setq TeX-sentinel-function 'TeX-Biber-sentinel)
        (if TeX-process-asynchronous
            process
          (TeX-synchronous-sentinel name file process))))
    
    (defun TeX-Biber-sentinel (process name)
      "Cleanup TeX output buffer after running Biber."
      (goto-char (point-max))
      (cond
       ;; Check whether Biber reports any warnings or errors.
       ((re-search-backward (concat
                             "^(There \\(?:was\\|were\\) \\([0-9]+\\) "
                             "\\(warnings?\\|error messages?\\))") nil t)
        ;; Tell the user their number so that she sees whether the
        ;; situation is getting better or worse.
        (message (concat "Biber finished with %s %s. "
                         "Type `%s' to display output.")
                 (match-string 1) (match-string 2)
                 (substitute-command-keys
                  "\\\\[TeX-recenter-output-buffer]")))
       (t
        (message (concat "Biber finished successfully. "
                         "Run LaTeX again to get citations right."))))
      (setq TeX-command-next TeX-command-default))
  
  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list '("Biber" "biber %s" TeX-run-Biber nil t :help "Run Biber"))
    )    

#+end_src

*** Use pdfLaTeX
    - Take this out to compile to DVI, instead.
#+srcname: pdf-mode
#+begin_src emacs-lisp :tangle no
      (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
#+end_src

#+RESULTS: pdf-mode
| er/add-latex-mode-expansions | TeX-PDF-mode | turn-on-reftex | latex-unicode-simplified |


*** Automatic Parsing
#+source: autoparse
#+begin_src emacs-lisp :tangle no
  (setq TeX-parse-self t) ; Enable parse on load.
  (setq TeX-auto-save t) ; Enable parse on save.
#+end_src

*** Load RefTeX
#+srcname: reftex-support
#+begin_src emacs-lisp :tangle no
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
  (add-hook 'pandoc-mode-hook 'turn-on-reftex)  ; with Pandoc mode
  (autoload 'reftex-mode     "reftex" "RefTeX Minor Mode" t)
  (autoload 'turn-on-reftex  "reftex" "RefTeX Minor Mode" t)
  (autoload 'reftex-citation "reftex-cite" "Make citation" t)
  (autoload 'reftex-index-phrase-mode "reftex-index" "Phrase mode" t)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
  (add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode

  ;; Make RefTeX faster
  (setq reftex-enable-partial-scans t)
  (setq reftex-save-parse-info t)
  (setq reftex-use-multiple-selection-buffers t)
  (setq reftex-plug-into-AUCTeX t)

  ;; Make RefTeX work with Org-Mode
  ;; use 'C-c (' instead of 'C-c [' because the latter is already
  ;; defined in orgmode to the add-to-agenda command.
  (defun org-mode-reftex-setup ()
    (load-library "reftex") 
    (and (buffer-file-name)
    (file-exists-p (buffer-file-name))
    (reftex-parse-all))
    (define-key org-mode-map (kbd "C-c (") 'reftex-citation))

  (add-hook 'org-mode-hook 'org-mode-reftex-setup)

  ;; RefTeX formats for biblatex (not natbib), and for pandoc
  (setq reftex-cite-format
        '(
          (?\C-m . "\\cite[]{%l}")
          (?t . "\\textcite{%l}")
          (?a . "\\autocite[]{%l}")
          (?p . "\\parencite{%l}")
          (?f . "\\footcite[][]{%l}")
          (?F . "\\fullcite[]{%l}")
          (?P . "[@%l]")
          (?T . "@%l [p. ]")
          (?x . "[]{%l}")
          (?X . "{%l}")
          ))

  (setq font-latex-match-reference-keywords
        '(("cite" "[{")
          ("cites" "[{}]")
          ("footcite" "[{")
          ("footcites" "[{")
          ("parencite" "[{")
          ("textcite" "[{")
          ("fullcite" "[{") 
          ("citetitle" "[{") 
          ("citetitles" "[{") 
          ("headlessfullcite" "[{")))

  (setq reftex-cite-prompt-optional-args nil)
  (setq reftex-cite-cleanup-optional-args t)
#+end_src

#+RESULTS: reftex-support
: t

** Set a Path to Executables (optional)
The location of the LaTeX excecutables is system dependent. AUCTeX calls everything through a shell, so you may or may not need this.  This source-code block is turned off by default as it should be added to the user's personal configuration as needed.

DGM: Creo que ya no es necesario porque tengo el paquete de Purcell para que Emacs use el path definido systemwide.

#+srcname: set-exec-path
#+begin_src emacs-lisp :tangle no
;;      (setenv "PATH" (concat "/usr/texbin:" (getenv "PATH")))
#+end_src

