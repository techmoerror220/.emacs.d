# -*- coding: utf-8 -*-
# -*- find-file-hook: org-babel-execute-buffer -*-

#+TITLE: Starter Kit Statistics
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]]. 

This file provides settings for ESS and R. 

* R and ESS
   Load ESS: Emacs Speaks Statistics, and several further tweaks for R. 
 
** Load ESS 

#+src-name: ess-mode
#+begin_src emacs-lisp :tangle yes :results silent
  ;; (use-package ess
  ;;  :ensure t
  ;;  :init (require 'ess-site))

  (use-package ess
    :ensure t)

  (require 'ess-site)

  (use-package ess-smart-underscore
    :ensure t
    :after ess)

  (use-package ess-view
    :ensure t
    :after ess)

  (use-package ess-R-data-view
    :ensure t
    :after ess)

  (require 'ob-stata)
  (require 'ob-ledger)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (R . t)
     (perl . t)
     (ruby . t)
     (python . t)
     (js . t)
     (haskell . t)
     (stata . t)
     (shell . t)
     (latex . t)
     (ledger . t)
     (ditaa . t)
     ))

  ;; (sh . t)
  ;; (scheme . t)


  ;; I am following Ista Zahn here: don't include (stata . t) but do (require 'ob-stata) afterwards. Stil, when I do so, I get the Debugger entered--Lisp error: (void-variable inferior-STA-program-name)
  ;; eval(inferior-STA-program-name) so the problem comes from =ob-stata=.
  ;;(require 'ess)
  ;;(require 'ess-site)
#+end_src

#+RESULTS:

** Customize smart underscore
Insert =_= if the preceding character is not a tab/space. 

Toggle with =ess-S-underscore-when-last-character-is-a-space=  Not enabled by default, so when I defined a varible with an underscore as in =my_packages=, I got a =<-= as soon as I typed the =_=.

#+begin_src emacs-lisp :tangle yes :results silent 
(setq ess-S-underscore-when-last-character-is-a-space t)
#+end_src

#+RESULTS:
: t

** Coding Hooks
#+source: ide-ess
#+begin_src emacs-lisp :tangle yes :results silent
(add-hook 'ess-mode-hook 'run-starter-kit-coding-hook)
;;  (add-hook 'ess-R-post-run-hook 'smartparens-mode)
#+end_src

** Use Knitr to process Sweave documents
#+source: knitr-swv
#+begin_src emacs-lisp :tangle yes :results silent
  (setq ess-swv-processor "'knitr")
#+end_src
 
** Make shift-enter to a lot in ESS.

 Use shift-enter to split window & launch R (if not running), execute
 highlighted region (if R running & area highlighted), or execute
 current line (and move to next line, skipping comments). Nice. See
 http://www.emacswiki.org/emacs/EmacsSpeaksStatistics,
 FelipeCsaszar. Adapted to split vertically instead of horizontally. 

#+src-name: ess-shift-enter
#+begin_src emacs-lisp :tangle yes :results silent
  (setq ess-ask-for-ess-directory nil)
  (setq ess-local-process-name "R")
  (setq ansi-color-for-comint-mode 'filter)
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)
  (defun my-ess-start-R ()
    (interactive)
    (if (not (member "*R*" (mapcar (function buffer-name) (buffer-list))))
      (progn
	(delete-other-windows)
	(setq w1 (selected-window))
	(setq w1name (buffer-name))
	(setq w2 (split-window w1 nil t))
	(R)
	(set-window-buffer w2 "*R*")
	(set-window-buffer w1 w1name))))
  (defun my-ess-eval ()
    (interactive)
    (my-ess-start-R)
    (if (and transient-mark-mode mark-active)
	(call-interactively 'ess-eval-region)
      (call-interactively 'ess-eval-line-and-step)))
  (add-hook 'ess-mode-hook
	    '(lambda()
	       (local-set-key [(shift return)] 'my-ess-eval)))
  (add-hook 'inferior-ess-mode-hook
	    '(lambda()
	       (local-set-key [C-up] 'comint-previous-input)
	       (local-set-key [C-down] 'comint-next-input)))
 (add-hook 'Rnw-mode-hook 
          '(lambda() 
             (local-set-key [(shift return)] 'my-ess-eval))) 
  (require 'ess-site)
#+end_src

#+RESULTS:
: ess-site


** COMMENT lintr and flycheck
[[https://github.com/jimhester/lintr][lintr]] checks your R code for style and syntax errors. It's an R library that integrates with [[http://www.flycheck.org][flycheck]]. You must install lintr from R. Flycheck can also check code in many other languages. You will need to install linters for them separately as well. See the flycheck documentation for details.

dgm disables flycheck as it slows emacs down

#+source: lintr
#+begin_src emacs-lisp :tangle yes :results silent
;;  (add-hook 'after-init-hook #'global-flycheck-mode)
;;    (add-hook 'ess-mode-hook
;;              (lambda () (flycheck-mode t)))

#+end_src

#+RESULTS: lintr

* R very slow

- See here:  https://stat.ethz.ch/pipermail/ess-help/2011-March/006734.html
and here: https://stackoverflow.com/questions/13779399/emacs-ess-evaluating-slower-than-normal-r

#+begin_src emacs-lisp :tangle yes :results silent
(setq ess-eval-visibly-p nil)
(setq ess-use-eldoc nil)
;;(setq ess-use-eldoc 'script-only)
#+end_src

#+RESULTS:

* COMMENT Indentation error
When working in Stata I get an indentation error to do with the function: =ess-indent-new-comment-line()=

I found one possible solution by Vitalie Spinu, the author of polymode (https://stat.ethz.ch/pipermail/ess-help/2014-May/009941.html):

DGM: I've commented it out because I move my work in Stata from ESS to =ado-mode= by Bill Rising.

#+begin_src emacs-lisp :tangle yes :results silent
   (add-to-list 'ess-style-alist
                '(my-style
                  (ess-indent-level . 4)
                  (ess-first-continued-statement-offset . 2)
                  (ess-continued-statement-offset . 0)
                  (ess-brace-offset . -4)
                  (ess-expression-offset . 4)
                  (ess-else-offset . 0)
                  (ess-close-brace-offset . 0)
                  (ess-brace-imaginary-offset . 0)
                  (ess-continued-brace-offset . 0)
                  (ess-arg-function-offset . 4)
   	          (ess-arg-function-offset-new-line . '(4))
                ))
   
   (setq ess-default-style 'my-style)
#+end_src

#+RESULTS:
: my-style


* Bill Rising's =ado-mode= for Stata

https://www.louabill.org/Stata/ado-mode_install.html

#+begin_src emacs-lisp :tangle yes :results silent 
(add-to-list 'load-path "/home/dgm/.emacs.d/src/ado-mode/lisp")
(require 'ado-mode)
#+end_src

#+RESULTS:
: ado-mode

If you also use ESS (Emacs Speaks Statistics), but you would rather
use this ado-mode to code Stata, include the following in your .emacs
file:

#+begin_src emacs-lisp :tangle yes :results silent
  (setq auto-mode-alist 
        (append (list '("\\.ado\\'" . ado-mode)
                      '("\\.do\\'"  . ado-mode)
                      )
                auto-mode-alist
                ))
#+end_src

This will make ado-mode load when you open an ado or do file.

* Provide

Trying this on 28 dic 2018. I don't really know why it is needed or not.

#+begin_src emacs-lisp :tangle yes :results silent
(provide 'starter-kit-stats)
#+end_src

#+RESULTS:
: starter-kit-stats

* Final message
#+source: message-line
#+begin_src emacs-lisp :tangle yes :results silent
  (message "Starter Kit STATS file loaded.")
#+end_src

#+RESULTS: message-line
: Starter Kit STATS file loaded.



