# -*- coding: utf-8 -*-

#+TITLE: Starter Kit Statistics
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]]. 

This file provides settings for ESS and R. 

* R and ESS
   Load ESS: Emacs Speaks Statistics, and several further tweaks for R. 
 
** Load ESS 

#+src-name: ess-mode
#+begin_src emacs-lisp
;; (use-package ess
;;  :ensure t
;;  :init (require 'ess-site))

(use-package ess
  :ensure t)

(use-package ess-smart-underscore
  :ensure t
  :after ess)

(use-package ess-view
  :ensure t
  :after ess)

(use-package ess-R-data-view
  :ensure t
  :after ess)

(require 'ob-stata)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (R . t)
   (perl . t)
   (ruby . t)
   (python . t)
   (js . t)
   (haskell . t)
   (stata . t)
   (shell . t)
   (latex . t)
   ))

;; (sh . t)
;; (scheme . t)


;; I am following Ista Zahn here: don't include (stata . t) but do (require 'ob-stata) afterwards. Stil, when I do so, I get the Debugger entered--Lisp error: (void-variable inferior-STA-program-name)
;; eval(inferior-STA-program-name) so the problem comes from =ob-stata=.
;;(require 'ess)
;;(require 'ess-site)
#+end_src

#+RESULTS:

* COMMENT Test 
** Coding Hooks
#+source: ide-ess
#+begin_src emacs-lisp
(add-hook 'ess-mode-hook 'run-starter-kit-coding-hook)
(add-hook 'ess-R-post-run-hook 'smartparens-mode)
#+end_src

** Define Rnw-mode and make LaTeX aware of it. 

#+srcname: misc-r
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.Rnw\\'" . Rnw-mode))
(add-to-list 'auto-mode-alist '("\\.Snw\\'" . Rnw-mode))
(add-to-list 'auto-mode-alist '("\\.Rmd\\'" . Rnw-mode))

;; Make TeX and RefTex aware of Snw and Rnw files
(setq reftex-file-extensions
      '(("Snw" "Rnw" "nw" "tex" ".tex" ".ltx") ("bib" ".bib")))
(setq TeX-file-extensions
      '("Snw" "Rnw" "nw" "tex" "sty" "cls" "ltx" "texi" "texinfo"))

;; Lets you do 'C-c C-c Sweave' from your Rnw file
(add-hook 'Rnw-mode-hook
	  (lambda ()
	    (add-to-list 'TeX-command-list
			 '("Sweave" "R CMD Sweave %s"
			   TeX-run-command nil (latex-mode) :help "Run Sweave") t)
	    (add-to-list 'TeX-command-list
			 '("LatexSweave" "%l %(mode) %s"
			   TeX-run-TeX nil (latex-mode) :help "Run Latex after Sweave") t)
	    (setq TeX-command-default "Sweave")))
#+end_src

#+RESULTS: misc-r
| lambda | nil | (add-to-list 'TeX-command-list '(Sweave R CMD Sweave %s TeX-run-command nil (latex-mode) :help Run Sweave) t) | (add-to-list 'TeX-command-list '(LatexSweave %l %(mode) %s TeX-run-TeX nil (latex-mode) :help Run Latex after Sweave) t) | (setq TeX-command-default Sweave) |
| lambda | nil | (local-set-key [(shift return)] 'my-ess-eval)                                                                 |                                                                                                                          |                                   |

** Use Knitr to process Sweave documents
#+source: knitr-swv
#+begin_src emacs-lisp
  (setq ess-swv-processor "'knitr")
#+end_src

** Local Polymode Support
Polymode is a package that supports multiple modes inside a single buffer. It is aimed particularly at literate programming approaches and supports, e.g., R and markdown in a single =.Rmd= file. So it is very useful with knitr in R.

#+source: Polymode
#+begin_src emacs-lisp
  (use-package poly-R)
  (use-package poly-markdown)
  ;;; polymode + markdown
  (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))

  ;;; polymode + R
  (add-to-list 'auto-mode-alist '("\\.Snw" . poly-noweb+r-mode))
  (add-to-list 'auto-mode-alist '("\\.Rnw" . poly-noweb+r-mode))
  (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode))
#+end_src

** Make shift-enter to a lot in ESS.

 Use shift-enter to split window & launch R (if not running), execute
 highlighted region (if R running & area highlighted), or execute
 current line (and move to next line, skipping comments). Nice. See
 http://www.emacswiki.org/emacs/EmacsSpeaksStatistics,
 FelipeCsaszar. Adapted to split vertically instead of horizontally. 

#+src-name: ess-shift-enter
#+begin_src emacs-lisp
  (setq ess-ask-for-ess-directory nil)
  (setq ess-local-process-name "R")
  (setq ansi-color-for-comint-mode 'filter)
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)
  (defun my-ess-start-R ()
    (interactive)
    (if (not (member "*R*" (mapcar (function buffer-name) (buffer-list))))
      (progn
	(delete-other-windows)
	(setq w1 (selected-window))
	(setq w1name (buffer-name))
	(setq w2 (split-window w1 nil t))
	(R)
	(set-window-buffer w2 "*R*")
	(set-window-buffer w1 w1name))))
  (defun my-ess-eval ()
    (interactive)
    (my-ess-start-R)
    (if (and transient-mark-mode mark-active)
	(call-interactively 'ess-eval-region)
      (call-interactively 'ess-eval-line-and-step)))
  (add-hook 'ess-mode-hook
	    '(lambda()
	       (local-set-key [(shift return)] 'my-ess-eval)))
  (add-hook 'inferior-ess-mode-hook
	    '(lambda()
	       (local-set-key [C-up] 'comint-previous-input)
	       (local-set-key [C-down] 'comint-next-input)))
 (add-hook 'Rnw-mode-hook 
          '(lambda() 
             (local-set-key [(shift return)] 'my-ess-eval))) 
  (require 'ess-site)
#+end_src

** lintr and flycheck
[[https://github.com/jimhester/lintr][lintr]] checks your R code for style and syntax errors. It's an R library that integrates with [[http://www.flycheck.org][flycheck]]. You must install lintr from R. Flycheck can also check code in many other languages. You will need to install linters for them separately as well. See the flycheck documentation for details.

dgm disables flycheck as it slows emacs down

#+source: lintr
#+begin_src emacs-lisp
;;  (add-hook 'after-init-hook #'global-flycheck-mode)
;;    (add-hook 'ess-mode-hook
;;              (lambda () (flycheck-mode t)))

#+end_src

** DGM customization

From: http://stackoverflow.com/questions/2531372/how-to-stop-emacs-from-replacing-underbar-with-in-ess-mode

To assign ":" to "<-" and to stop the assignment of underscore (underbar) "_" to "<-" put the following in .emacs (yes, the repeated line is correct)

#+BEGIN_SRC emacs-lisp
(setq ess-smart-S-assign-key ";")
(ess-toggle-S-assign nil)
(ess-toggle-S-assign nil)
(ess-toggle-underscore nil) ; leave underscore key alone!
#+END_SRC

#+RESULTS:
: ess-smart-S-assign

** R very slow

- See here:  https://stat.ethz.ch/pipermail/ess-help/2011-March/006734.html
and here: https://stackoverflow.com/questions/13779399/emacs-ess-evaluating-slower-than-normal-r

#+begin_src emacs-lisp
(setq ess-eval-visibly-p nil)
(setq ess-use-eldoc nil)
;;(setq ess-use-eldoc 'script-only)
#+end_src

#+RESULTS:

* Provide

Trying this on 28 dic 2018. I don't really know why it is needed or not.

#+BEGIN_SRC emacs-lisp
(provide 'starter-kit-stats)
#+END_SRC

#+RESULTS:
: starter-kit-lisp

* Final message
#+source: message-line
#+begin_src emacs-lisp
  (message "Starter Kit STATS file loaded.")
#+end_src
