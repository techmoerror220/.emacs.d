Q# -*- coding: utf-8 -*-
# -*- find-file-hook: org-babel-execute-buffer -*-

#+TITLE: Starter Kit Statistics
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]]. 

This file provides settings for ESS and R. 

* R and ESS
   Load ESS: Emacs Speaks Statistics, and several further tweaks for R. 
 
** Load ESS 

Nota que si no incluyo =(require 'ess-site)=, tengo un mensaje:

#+BEGIN_EXAMPLE
Warning (defvaralias): Overwriting value of ‘R-mode-hook’ by aliasing to ‘ess-r-mode-hook’
#+END_EXAMPLE

("M-p"   . my/ess-eval-pipe-through-line) -> can't use =M-p=, that's for cycling the history at the command prompt!! 

Also 

#+BEGIN_EXAMPLE

    (defun my/ess-eval-pipe-through-line (vis)
      "Like `ess-eval-paragraph' but only evaluates up to the pipe on this line.
  If no pipe, evaluate paragraph through the end of current line.
  Prefix arg VIS toggles visibility of ess-code as for `ess-eval-region'."
      (interactive "P")
      (save-excursion
        (let ((end (progn
                     (my/ess-beginning-of-pipe-or-end-of-line)
                     (point)))
              (beg (progn (backward-paragraph)
                          (ess-skip-blanks-forward 'multiline)
                          (point))))
          (ess-eval-region beg end vis))))

#+END_EXAMPLE

doesn't work.

#+src-name: ess-mode
#+begin_src emacs-lisp :tangle yes :results silent
  (use-package ess
    :defer t
    :bind
    (:map inferior-ess-mode-map
          ;; Usually I bind C-z to `undo', but I don't really use `undo' in
          ;; inferior buffers. Use it to switch to the R script (like C-c
          ;; C-z):
          ("C-z" . ess-switch-to-inferior-or-script-buffer))
    (:map ess-r-mode-map
          ("C->"   . my/pipe_operator)
          ("C-<"   . my/assignment_operator)
          ("C-c i" . my/in_operator)
          ("_"     . ess-insert-assign)
          ("S-<return>"  . my/ess-eval-pipe-through-line))
    (:map inferior-ess-r-mode-map
          ("C->"   . my/pipe_operator)
          ("C-<"   . my/assignment_operator)
          ("C-c i" . my/in_operator)
          ("_"     . ess-insert-assign))
    :init
    (require 'ess-site)
    (require 'ess-r-mode)

    (defun my/pipe_operator ()
      "Add a pipe operator %>% at the end of the current line.
    Don't add one if the end of line already has one.  Ensure one
    space to the left and start a newline with indentation."
      (interactive)
      (end-of-line)
      (unless (looking-back "%>%" nil)
        (just-one-space 1)
        (insert "%>%"))
      (reindent-then-newline-and-indent))

    (defun my/assignment_operator ()
      "R/ESS <- assignment"
      (interactive)
      (just-one-space 1)
      (insert "<-")
      (just-one-space 1))

    (defun my/in_operator ()
      "R/ESS %in% operator"
      (interactive)
      (just-one-space 1)
      (insert "%in%")
      (just-one-space 1))

    ;; https://gitlab.com/jabranham/emacs/-/blob/master/init.el
    ;; I sometimes want to evaluate just part of a piped sequence. The
    ;; following lets me do so without needing to insert blank lines or
    ;; something:
  
    (defun my/ess-beginning-of-pipe-or-end-of-line ()
      "Find point position of end of line or beginning of pipe %>%."
      (if (search-forward "%>%" (line-end-position) t)
          (goto-char (match-beginning 0))
        (end-of-line)))
  
    (defun my/ess-eval-pipe-through-line (vis)
      "Like `ess-eval-paragraph' but only evaluates up to the pipe on this line. If no pipe, evaluate paragraph through the end of current line. Prefix arg VIS toggles visibility of ess-code as for `ess-eval-region'."
      (interactive "P")
      (save-excursion
        (let ((end (progn
                     (my/ess-beginning-of-pipe-or-end-of-line)
                     (point)))
              (beg (progn (backward-paragraph)
                          (ess-skip-blanks-forward 'multiline)
                          (point))))
          (ess-eval-region beg end vis))))
    :custom
    (ess-ask-for-ess-directory nil "Don't ask for dir when starting a process")
    (ess-style 'RStudio)
    (ess-eval-visibly t "See the Commands you send")
    ;; (ess-plain-first-buffername nil "Name first R process R:1")
    (ess-tab-complete-in-script t "TAB should complete.")
    (ess-write-to-dribble nil)
    (ess-execute-in-process-buffer t)
    (inferior-ess-fix-misaligned-output t)
    :config
    ;; Disable IDO so helm is used instead
    (setq ess-use-ido nil)
    (setq inferior-R-args "--no-save")
    ;; ESS syntax highlight
    (setq ess-R-font-lock-keywords
          '((ess-R-fl-keyword:modifiers . t)
            (ess-R-fl-keyword:fun-defs . t)
            (ess-R-fl-keyword:keywords . t)
            (ess-R-fl-keyword:assign-ops . t)
            (ess-R-fl-keyword:constants . t)
            (ess-fl-keyword:fun-calls . nil)
            (ess-fl-keyword:numbers . t)
            (ess-fl-keyword:operators . t)
            (ess-fl-keyword:delimiters . t) ;; originally set to nil
            (ess-fl-keyword:= . t)
            (ess-R-fl-keyword:F&T . t)
            (ess-R-fl-keyword:%op% . t)))
    (setq inferior-ess-r-font-lock-keywords
          '((ess-S-fl-keyword:prompt . t)
            (ess-R-fl-keyword:messages . t)
            (ess-R-fl-keyword:modifiers . t)
            (ess-R-fl-keyword:fun-defs . t)
            (ess-R-fl-keyword:keywords . t)   ;; try with nil
            (ess-R-fl-keyword:assign-ops . t)
            (ess-R-fl-keyword:constants . t)
            (ess-fl-keyword:matrix-labels . t)
            (ess-fl-keyword:fun-calls . nil)
            (ess-fl-keyword:numbers . nil)
            (ess-fl-keyword:operators . nil)
            (ess-fl-keyword:delimiters . nil)
            (ess-fl-keyword:= . nil)          ;; try with t
            (ess-R-fl-keyword:F&T . nil))))


  ;; https://matthewbauer.us/bauer/
  (use-package ess-site
    :ensure ess
    :commands R
    :interpreter (("Rscript" . r-mode)
                  ("r" . r-mode))
    :mode (("\\.sp\\'"          . S-mode)
           ("/R/.*\\.q\\'"      . R-mode)
           ("\\.[qsS]\\'"       . S-mode)
           ("\\.ssc\\'"         . S-mode)
           ("\\.SSC\\'"         . S-mode)
           ("\\.[rR]\\'"        . R-mode)
           ("\\.[rR]nw\\'"      . Rnw-mode)
           ("\\.[sS]nw\\'"      . Snw-mode)
           ("\\.[rR]profile\\'" . R-mode)
           ("NAMESPACE\\'"      . R-mode)
           ("CITATION\\'"       . R-mode)
           ("\\.omg\\'"         . omegahat-mode)
           ("\\.hat\\'"         . omegahat-mode)
           ("\\.lsp\\'"         . XLS-mode)
           ("\\.do\\'"          . STA-mode)
           ("\\.ado\\'"         . STA-mode)
           ("\\.[Ss][Aa][Ss]\\'"        . SAS-mode)
           ("\\.[Ss]t\\'"       . S-transcript-mode)
           ("\\.Sout"           . S-transcript-mode)
           ("\\.[Rr]out"        . R-transcript-mode)
           ("\\.Rd\\'"          . Rd-mode)
           ("\\.[Bb][Uu][Gg]\\'"         . ess-bugs-mode)
           ("\\.[Bb][Oo][Gg]\\'"         . ess-bugs-mode)
           ("\\.[Bb][Mm][Dd]\\'"         . ess-bugs-mode)
           ("\\.[Jj][Aa][Gg]\\'"         . ess-jags-mode)
           ("\\.[Jj][Oo][Gg]\\'"         . ess-jags-mode)
           ("\\.[Jj][Mm][Dd]\\'"         . ess-jags-mode)))

  (use-package ess-smart-underscore
    :after ess
    :config
    (setq ess-S-underscore-when-last-character-is-a-space t)
    )

  (use-package ess-view
    :defer t
    :after ess)

  (use-package ess-R-data-view
    :defer t
    :after ess)

  ;;  (require 'ob-stata)
  (require 'ob-ledger)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (R . t)
     (perl . t)
     (ruby . t)
     (python . t)
     (js . t)
     (haskell . t)
     ;;     (stata . t)
     (shell . t)
     (latex . t)
     (ledger . t)
     (ditaa . t)
     ))

  ;; (sh . t)
  ;; (scheme . t)


  ;; I am following Ista Zahn here: don't include (stata . t) but do (require 'ob-stata) afterwards. Still, when I do so, I get the Debugger entered--Lisp error: (void-variable inferior-STA-program-name)
  ;; eval(inferior-STA-program-name) so the problem comes from =ob-stata=.
  ;;(require 'ess)
  ;;(require 'ess-site)
#+end_src

#+RESULTS:

** Coding Hooks
#+source: ide-ess
#+begin_src emacs-lisp :tangle yes :results silent
(add-hook 'ess-mode-hook 'run-starter-kit-coding-hook)
;;  (add-hook 'ess-R-post-run-hook 'smartparens-mode)
#+end_src

** Use Knitr to process Sweave documents

Creo que está deprecada porque no se encuentra en =C-h v=.

#+source: knitr-swv
#+begin_src emacs-lisp :tangle no :results silent
  (setq ess-swv-processor "'knitr")
#+end_src
 
* Other stuff
** COMMENT lintr and flycheck
[[https://github.com/jimhester/lintr][lintr]] checks your R code for style and syntax errors. It's an R library that integrates with [[http://www.flycheck.org][flycheck]]. You must install lintr from R. Flycheck can also check code in many other languages. You will need to install linters for them separately as well. See the flycheck documentation for details.

dgm disables flycheck as it slows emacs down

#+source: lintr
#+begin_src emacs-lisp :tangle yes :results silent
;;  (add-hook 'after-init-hook #'global-flycheck-mode)
;;    (add-hook 'ess-mode-hook
;;              (lambda () (flycheck-mode t)))

#+end_src

#+RESULTS: lintr

** R very slow

- See here:  https://stat.ethz.ch/pipermail/ess-help/2011-March/006734.html
and here: https://stackoverflow.com/questions/13779399/emacs-ess-evaluating-slower-than-normal-r

#+begin_src emacs-lisp :tangle yes :results silent

;; I prefer to see the echo of the message sent out
; (setq ess-eval-visibly-p t) 
(setq ess-use-eldoc nil)
;;(setq ess-use-eldoc 'script-only)

#+end_src

#+RESULTS:

** COMMENT Indentation error
When working in Stata I get an indentation error to do with the function: =ess-indent-new-comment-line()=

I found one possible solution by Vitalie Spinu, the author of polymode (https://stat.ethz.ch/pipermail/ess-help/2014-May/009941.html):

DGM: I've commented it out because I move my work in Stata from ESS to =ado-mode= by Bill Rising.

#+begin_src emacs-lisp :tangle yes :results silent
   (add-to-list 'ess-style-alist
                '(my-style
                  (ess-indent-level . 4)
                  (ess-first-continued-statement-offset . 2)
                  (ess-continued-statement-offset . 0)
                  (ess-brace-offset . -4)
                  (ess-expression-offset . 4)
                  (ess-else-offset . 0)
                  (ess-close-brace-offset . 0)
                  (ess-brace-imaginary-offset . 0)
                  (ess-continued-brace-offset . 0)
                  (ess-arg-function-offset . 4)
   	          (ess-arg-function-offset-new-line . '(4))
                ))
   
   (setq ess-default-style 'my-style)
#+end_src

#+RESULTS:
: my-style


* Bill Rising's =ado-mode= for Stata

https://www.louabill.org/Stata/ado-mode_install.html

#+begin_src emacs-lisp :tangle yes :results silent 
(add-to-list 'load-path "/home/dgm/.emacs.d/src/ado-mode/lisp")
(require 'ado-mode)
#+end_src

#+RESULTS:
: ado-mode

If you also use ESS (Emacs Speaks Statistics), but you would rather
use this ado-mode to code Stata, include the following in your .emacs
file:

#+begin_src emacs-lisp :tangle yes :results silent
  (setq auto-mode-alist 
        (append (list '("\\.ado\\'" . ado-mode)
                      '("\\.do\\'"  . ado-mode)
                      )
                auto-mode-alist
                ))
#+end_src

This will make ado-mode load when you open an ado or do file.


* Provide

Trying this on 28 dic 2018. I don't really know why it is needed or not.

#+begin_src emacs-lisp :tangle yes :results silent
(provide 'starter-kit-stats)
#+end_src

#+RESULTS:
: starter-kit-stats

* Final message
#+source: message-line
#+begin_src emacs-lisp :tangle yes :results silent
  (message "Starter Kit STATS file loaded.")
#+end_src

#+RESULTS: message-line
: Starter Kit STATS file loaded.
