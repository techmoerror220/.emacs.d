# -*- coding: utf-8 -*-
# -*- find-file-hook: org-babel-execute-buffer -*-

#+TITLE: Starter Kit Completions
#+OPTIONS: toc:nil num:nil ^:nil

* Starter kit yasnippet

Yasnippet is a snippet expansion system for Emacs. It uses short phrases and the tab key to trigger the insertion of frequently-used snippets of code or text in your document. 
** Load the yasnippet bundle

Load the snippets defined in the package's =./snippets/= directory, and local snippets from the =./local-snippets/= directory. 
Added tips from Uncle Dave and Daniel Mai (https://github.com/danielmai/.emacs.d/blob/master/config.org)


This is the old configuration.

#+begin_src emacs-lisp :tangle no
  (add-to-list 'load-path
               (expand-file-name  "yasnippet"
                                  (expand-file-name "elpa"
                                                    dotfiles-dir)))
  ;;    (require 'yasnippet)
  ;; above line replaced with the following use-package from uncle dave
  ;; https://github.com/daedreth/UncleDavesEmacs
  (use-package yasnippet
    :ensure t)

  (use-package yasnippet-snippets
    :ensure t)

  (use-package yasnippet-classic-snippets
    :ensure t)

  ;; Setting yas-indent-line to =’fixed= fixes Python indentation behavior when typing a templated snippet. 
  ;; Tip from https://github.com/danielmai/.emacs.d/blob/master/config.org
  (setq yas-indent-line 'fixed)

  ;;  (yas-set-ac-modes)
  ;;  (yas-enable-emacs-lisp-paren-hack)
  (yas-global-mode 1)
  (setq yas-snippet-dirs '("~/.emacs.d/mysnippets"
                           "~/.emacs.d/snippets"
                           "~/.emacs.d/elpa/yasnippet-classic-snippets-1.0.2/snippets"
                           "~/.emacs.d/elpa/yasnippet-snippets-20181107.2203/snippets"
                           "~/.emacs.d/elpa/"))

  ;;   (yas-load-directory (expand-file-name "snippets" dotfiles-dir))  ;; original line from kieran healy
#+end_src

#+RESULTS:
| ~/.emacs.d/mysnippets | ~/.emacs.d/snippets | ~/.emacs.d/elpa/yasnippet-classic-snippets-1.0.2/snippets | ~/.emacs.d/elpa/yasnippet-snippets-20180909.1015/snippets | ~/.emacs.d/elpa/ |

The new config from Daniel Mai's config files is this:

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :config
(setq yas-snippet-dirs '("~/.emacs.d/mysnippets"
                         "~/.emacs.d/snippets"
                         "~/.emacs.d/elpa/yasnippet-classic-snippets-1.0.2/snippets"
                         "~/.emacs.d/elpa/yasnippet-snippets-20180909.1015/snippets"
                         "~/.emacs.d/elpa/"))
  (setq yas-indent-line 'fixed)
  (yas-global-mode))
#+END_SRC

#+RESULTS:
: t

His text is: 
Yeah, snippets! I start with snippets from Andrea Crotti’s collection and have also modified them and added my own.

It takes a few seconds to load and I don’t need them immediately when Emacs starts up, so we can defer loading yasnippet until there’s some idle time.

Setting yas-indent-line to =’fixed= fixes Python indentation behavior when typing a templated snippet.


These are some functions defined in the old configuration that I leave as they might be useful or required somewhere.

#+begin_src emacs-lisp :tangle yes
  (defun check-expansion ()
    (save-excursion
      (if (looking-at "\\_>") t
        (backward-char 1)
        (if (looking-at "\\.") t
          (backward-char 1)
          (if (looking-at "->") t nil)))))

  (defun do-yas-expand ()
    (let ((yas-fallback-behavior 'return-nil))
      (yas-expand)))

  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
        (minibuffer-complete)
      (if (or (not yas-minor-mode)
              (null (do-yas-expand)))
          (if (check-expansion)
              (company-complete-common)
            (indent-for-tab-command)))))

  (global-set-key [tab] 'tab-indent-or-complete)
#+end_src

#+RESULTS:
: tab-indent-or-complete

** Company Mode

Auto-completion of text and code. 

We use the `:with` keyword to include dabbrev in every backend, which gives us completion from everything that's in the buffer (and other open buffers).

#+source: company-mode
#+begin_src emacs-lisp :tangle yes
;;Use C-TAB to complete. We put this in eval-after-load 
;; because otherwise some modes will try to override our settings.
;;;;;;; (require 'company) ;; commented out by dgm in favor of uncle dave's use-package from https://github.com/daedreth/UncleDavesEmacs

(use-package company
  :ensure t
  :config
  (setq company-tooltip-limit 20)
;;  (setq company-idle-delay 0.01)
  (setq company-ech-delay 0)
  (setq company-minimum-prefix-length 3))

;; set to 0 to prevent completion starting automatically 
(setq company-idle-delay 0)
;; cancel if input doesn't match
(setq company-require-match nil)
;; complete using C-TAB
(global-set-key (kbd "<C-tab>") 'company-complete)
;; use C-n and C-p to cycle through completions
;; (define-key company-mode-map (kbd "<tab>") 'company-complete)
(define-key company-active-map (kbd "C-n") 'company-select-next)
(define-key company-active-map (kbd "<tab>") 'company-complete-common)
(define-key company-active-map (kbd "C-p") 'company-select-previous)
(define-key company-active-map (kbd "<backtab>") 'company-select-previous)
;; enable math completions
;;(require 'company-math)
;; company-mode completions for ess
;; (require 'company-ess)
;;  (add-to-list 'company-backends 'company-math-symbols-unicode)
;;(add-to-list 'company-backends 'company-math-symbols-latex)
;; put company-capf at the beginning of the list
(require 'company-capf)
(setq company-backends
      (delete-dups (cons 'company-capf company-backends)))

;; ;; disable dabbrev
;; (delete 'company-dabbrev company-backends)
;; (delete 'company-dabbrev-code company-backends)


(add-hook 'after-init-hook 'global-company-mode)

;; completion for kill ring history
(use-package browse-kill-ring)
(browse-kill-ring-default-keybindings)

;; From https://stackoverflow.com/questions/34652692/how-to-turn-off-company-mode-in-org-mode
(setq company-global-modes '(not python-mode))
#+end_src

#+RESULTS: company-mode
| not | python-mode |

Now that I have =company-capf= above, I turn on =semantic-mode=. See https://github.com/syl20bnr/spacemacs/issues/1907
Tuhdo says that =company-capf= is the expected backend to be used: ``I had no slowness [due to semantic-mode] with it [turned off] (...) And even without semantic-mode enabled, in Emacs Lisp company should use company-capf. Do you set =company-idle-delay= to very small value?''

On Semantic read also this: https://www.reddit.com/r/emacs/comments/5yxxrl/what_is_that_status_of_semantic/ and http://alexott.net/en/writings/emacs-devenv/EmacsCedet.html

#+BEGIN_SRC emacs-lisp :tangle yes
(semantic-mode 1)
#+END_SRC

#+RESULTS:
: t

** Autocomplete
We use company mode, as initiated above, but here's a working auto-complete setup as an alternative. Don't use company mode and autocomplete together. To switch from company-mode to autocomplete, move the `tangle: no` from the `begin_src` line below up to the corresponding line in the `company-mode` section above. Then open the `starter-kit-elpa.org` file, uncomment the `autocomplete` and `ac-` extensions there, and restart Emacs.

#+source:  autocomplete
#+begin_src emacs-lisp :tangle no
  (require 'auto-complete)
  (require 'auto-complete-config)
  (global-auto-complete-mode t)
  (add-to-list 'ac-dictionary-directories (expand-file-name "auto-complete" dotfiles-dir))
  (setq ac-modes (append ac-modes '(org-mode))) 
  (ac-config-default)
  (define-key ac-complete-mode-map [tab] 'ac-expand)
  (setq ac-auto-start 4)
  (ac-flyspell-workaround)
  (define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
  (define-key ac-completing-map (kbd "C-c h") 'ac-quick-help)  
  (add-hook 'html-mode-hook 'ac-html-enable)

#+end_src 

** Specific languages 
This comes from Uncle Dave at https://github.com/daedreth/UncleDavesEmacs

Be it for code or prose, completion is a must. After messing around with auto-completion for a while I decided to drop it in favor of company, and it turns out to have been a great decision.

Each category also has additional settings.

*** C/C++
**** yasnippet
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'c++-mode-hook 'yas-minor-mode)
(add-hook 'c-mode-hook 'yas-minor-mode)
#+END_SRC
**** flycheck
#+BEGIN_SRC emacs-lisp :tangle no
(use-package flycheck-clang-analyzer
  :ensure t
  :config
  (with-eval-after-load 'flycheck
    (require 'flycheck-clang-analyzer)
     (flycheck-clang-analyzer-setup)))
#+END_SRC
**** company
Requires libclang to be installed.
#+BEGIN_SRC emacs-lisp :tangle no
(with-eval-after-load 'company
  (add-hook 'c++-mode-hook 'company-mode)
  (add-hook 'c-mode-hook 'company-mode))

(use-package company-c-headers
  :ensure t)

(use-package company-irony
  :ensure t
  :config
  (setq company-backends '((company-c-headers
                            company-dabbrev-code
                            company-irony))))

(use-package irony
  :ensure t
  :config
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC

*** Python
**** yasnippet

This is currently tangled to =yes=.
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'python-mode-hook 'yas-minor-mode)
(add-hook 'python-mode-hook 'flycheck-mode)
;;;;;; Disabled by DGM so that I don't use company with Python
;;(with-eval-after-load 'company
;;    (add-hook 'python-mode-hook 'company-mode))

;;(use-package company-jedi
;;  :ensure t
;;  :config
;;    (require 'company)
;;    (add-to-list 'company-backends 'company-jedi)
;;    ;(add-hook 'python-mode-hook 'python-mode-company-init)
;;    (add-hook 'python-mode-hook 'company-jedi-setup))

;;(defun python-mode-company-init ()
;; company-jedi and company-etags taken out
;;  (setq-local company-backends '((company-dabbrev-code))))
#+END_SRC

Set up: https://github.com/syohex/emacs-company-jedi#installation

This is currently tangled to =no=.

#+BEGIN_SRC emacs-lisp :tangle no
(defun my/python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi))

(add-hook 'python-mode-hook 'my/python-mode-hook)
#+END_SRC

*** COMMENT emacs-lisp

Watch out: you have to install in your system =sbcl=. 
I comment this out for the time being as it seems to use a keybinding that conflicts with others (I get this warning =Error (use-package): slime-company/:catch: Key sequence C-x C-a C-l starts with non-prefix key C-x C-a=)

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
(add-hook 'emacs-lisp-mode-hook 'company-mode)

;;(use-package slime
;;  :ensure t
;;  :config
;;  (setq inferior-lisp-program "/usr/bin/sbcl")
;;  (setq slime-contribs '(slime-fancy)))

;; (use-package slime-company
;;  :ensure t
;;  :init
;;    (require 'company)
;;    (slime-setup '(slime-fancy slime-company)))
#+END_SRC

#+RESULTS:
| (lambda nil (require 'company-elisp) (set (make-local-variable 'company-backends) (delete-dups (cons 'company-elisp (cons 'company-files company-backends))))) | esk-remove-elc-on-save | run-starter-kit-coding-hook | turn-on-eldoc-mode | company-mode | yas-minor-mode | eldoc-mode |

*** bash

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company-shell
  :ensure t
  :config
    (require 'company)
    (add-hook 'shell-mode-hook 'shell-mode-company-init))

(add-hook 'shell-mode-hook 'yas-minor-mode)
(add-hook 'shell-mode-hook 'flycheck-mode)
(add-hook 'shell-mode-hook 'company-mode)

;; company-etags
(defun shell-mode-company-init ()
  (setq-local company-backends '((company-shell
                                  company-shell-env
                                  company-dabbrev-code))))
#+END_SRC

#+RESULTS:
: t


* Provide 

#+BEGIN_SRC emacs-lisp :tangle yes
(provide 'starter-kit-completion)
#+END_SRC

#+RESULTS:
: starter-kit-completion


* Final message
#+source: message-line
#+begin_src emacs-lisp :tangle yes
  (message "Starter Kit Completion loaded.")
#+end_src

